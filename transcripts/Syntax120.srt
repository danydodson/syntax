1
00:00:01,319 --> 00:00:10,530
Unknown: You're listening to syntax the podcast with the tastiest web development treats out there. strap yourself in and get ready to live ski and West boss.

2
00:00:10,589 --> 00:00:24,090
Wes Bos: Welcome to syntax the podcast with the tastiest web development treats out there. My name is Wes Bos. I'm a full stack web developer from Canada and with me as always is Scott to Lynskey, who is also full stack web developer. How you doing Scott?

3
00:00:24,479 --> 00:00:56,310
Unknown: Hey, I'm doing good. I'm not from Canada, though. I'm from the United States. Yeah, no, we are we are cross cross the border here. I'm doing good. If you can't tell from my voice right now, you'll probably upload tell as the honey is wearing off that I am a bit under the weather. I have the worst kind of sickness for hosting a podcast, which is one that involves your throat. So here, I might be struggling a little bit to be talking. Hopefully, it's not too bad. And hopefully my voice isn't blown up the bass in your speakers today, because I'm getting a little busy. How are you doing?

4
00:00:56,610 --> 00:02:06,690
Wes Bos: I'm doing great. I am going to Paris in a couple days for some developer stuff. So I'm pretty excited about that. So today, we're gonna be talking all about next versus Gatsby. This is a question I get all the time from people. Why didn't you use Gatsby in your course? Or why did you choose next? What are the benefits of the upsides and downsides of both them? So there's a lot going on in this question. It's not they're not totally comparable, but they do overlap in a lot of the areas. So we're gonna attempt to break that down today and explain why you might want to grab one over the other. Today, we are sponsored by two awesome companies. First one is Log Rocket going to do all of your error and exception tracking. And second one is a brand new sponsor, but one we've been talking to for a long time. And it's a clothing sponsor. It's called the armory. And they are a men's retailer out of New York and Hong Kong. We'll talk about them a little bit more throughout this episode. But the reason why I've said that we've talked to them for so long is because they sent us clothes, and we had to make sure that they were decent. They were good clothes. So we've been wearing them for the last couple months and really enjoying them. So we'll talk about all those companies partway through.

5
00:02:06,900 --> 00:02:15,960
Unknown: I'm gonna say they're beyond decent. I'm going to go ahead. You'll you'll hear us rave about these closed in a little bit. But, uh, I think we're both big fans.

6
00:02:16,110 --> 00:03:12,419
Wes Bos: Yes. So welcome to the armory for sponsoring the podcast. So we're gonna break today's down into a bunch of different sections, we're going to talk about server side rendering what to do with your data, routing, and creating pages, the plugins and finally deploying and hosting your website. So we'll talk about the pros and the cons to both next. And Gatsby, if you don't know what either of these things are, they are both frameworks that are built upon react, and they make they make creating server rendered applications or websites much easier, as well as providing a whole host, not just server side rendering, that's just a small piece of the pie for both of these things. But they they make just sort of like building a react website or application. Very, very smooth. They do all of the tooling under the hood for you probably never have to write a web pack config unless you're doing some really up to stuff out there. It just sort of handles it all for you.

7
00:03:12,539 --> 00:03:30,539
Unknown: Yeah. And they are they are both awesome platforms. I mean, they're awesome. And this is like, this is what 2019 web development is all about. I mean, these things are straight out of the future, in terms of when I was using them last year, I felt like these things is where it needs to go. This is this is the hotness,

8
00:03:30,630 --> 00:03:53,940
Wes Bos: yeah, I would even go as far to say like, if you're looking to get hired in react, I would definitely spend a little bit of time building an app in both of these things, just so that you can throw both of those on your resume, because they are the the two hot things right now in building a react application. And I would go as far to say, as I would never build anything in react without choosing either next or Gatsby. Yeah,

9
00:03:53,970 --> 00:04:29,760
Unknown: that's a big statement. And I would mostly agree with you on that. You know, it's funny, I think I think even particularly, like you said, both of them are good skills to have. But I know people that with some serious Gatsby skills that are getting some really good gigs right now in these Gatsby gigs are taking people out of, you know, an early dev role and moving them into a higher dev role because it's a specialized skill. And again, people see this stuff, they see how fast the sights are, they see how amazing it is. They want to get it going. And if you can have some specialized skills in this department, I think there is a lot of room for you to grow in your career.

10
00:04:29,940 --> 00:05:05,700
Wes Bos: Yeah, I think just like maybe six, seven years ago, if you double down on WordPress development that was very good for like, thousands of developers career I know tons of people who built their career on on WordPress. I think that if you were to double down on Gatsby, not even just react just Gatsby itself. Obviously you need to know react to do this. But if you can focus in on Gatsby and become an expert, because there is so much to to learning a Gatsby next not so much. Next that we'll talk about that. But next is more more pared down in what it offers you. I think there's a huge opportunity for your career there.

11
00:05:05,700 --> 00:05:48,780
Unknown: Yeah, definitely cool. So let's get into it a little bit with the server side rendering component of both of these things, because they both offer what could be seen as server side rendering, but they offer in a totally different way. Where next .js is offering server side rendering on demand, right? When you hit that page request, it goes off and it renders the page and brings you something back. The Gatsby is building out actual HTML files that are going to be returned, right? So it's going to be a little bit different where these HTML files are created at build time, or Gatsby. And then they're just sent out to the user. The next j. s strategy is the files are built and sent out to the user at the same time.

12
00:05:48,960 --> 00:07:26,580
Wes Bos: Yeah, and we should say, right now, there's probably people saying, Well, next, Jess has the option to do a static site generator. For this whole episode, we're going to assume that that doesn't exist, because I think that if you were to go the static site generation, you probably should pick Gatsby, just because of all the stuff that is available. But so like Scott says, next, Jess will lay the render on demand. So next j. s is a node application that will accept your request, you can also integrate it into your existing node Express application as well. And you can think of it like, if you had a blog website built on next j. s, if you were to publish a new blog post to your database, it will immediately start working, someone will be able to go and visit it. Or if you go to my advanced reacting graph qL course we use next j s in that, because when somebody creates a new product, that product, as soon as you create a product, it will automatically bring you to the product page and that that new product will automatically show up on the homepage. And that's because these things are rendered on demand. As soon as somebody makes that request where something like Gatsby, it's all done at build time where all of the data is requested at build time, all of the HTML is done at build time, which has some pros and cons, some of the pros of Gatsby is that it's very, very fast to make that page load, because it's been pre compiled and pre rendered out for you. But a con to that is that sometimes you need instant, you needed to instantly show up, and Gatsby will have to regenerate the entire website, and then redeploy it, which in some cases, that's 30 seconds. But in some cases, that's 2025 minutes. And that could be a little bit slow for some use cases.

13
00:07:26,700 --> 00:08:47,539
Unknown: Yeah. And then it might even it might throw people off from what they're used to, right. I mean, if you have like a headless WordPress site, you're used to saving the content in the back end, and then going to the front end and seeing it right there. Because that content is being rendered on demand where with Gatsby, it does need to run that build command where it has to go refetch everything do the build. And that takes time. And you won't see those updates come in immediately. You'll see them in a minute or so or a couple seconds. But it's not that instantaneous, save your content, whatever have it update. And if you're working with an API, again, there's going to be a change there, you're going to have to tell Gatsby to rebuild, which is a big thing. Like if you're going to have to trigger some white now one of the this is not an ad. But one of the cool things that Netlify does is that they just give you a simple web hook to rebuild your site with and it makes doing something like a headless WordPress or something with Gatsby super easy because you can say, all right, WordPress, whenever I save this page, go hit this, this URL that Netlify gives you and then that tells Gatsby to go, Okay, I got to go rebuild and go refetch, all this stuff. So there is some added complexity around the build process and how it's creating a new version of the site. When data comes in with Gatsby. And that complexity that exists there. It exists up front. But everything else is fast and easier. You know, easier. Yeah, way faster. Yeah,

14
00:08:47,640 --> 00:10:15,090
Wes Bos: totally. And I'll give some examples here. So my new website, which will I don't know when I'll be done it, but I'm building it on Gatsby. And the reason I'm doing that is because I don't care that the build time takes five minutes because right I maybe publish a blog post or update the website like once a month. Whereas on my advanced react and graph qL course we're adding new products and disabling them and adding them to cart all that stuff is happening multiple times a day and we don't have time to sit around and wait for for that. Another benefit is that's really important here is do you want to server render authenticated pages. So one thing if you like, if you want a server render, like my cart, or you want a server render an account or somebodies internal messages, that's all authenticated. And there's no way you could pre render somebodies like back end that they're logged into. So the solution in Gatsby is just render that on the client so you don't get the benefit of server rendered. You only get it rendered in the browser. At the end of the day Gatsby still is react like it should be said that Gatsby is not kicking out like HTML tags. At the end of the day, Gatsby is still delivering a react application to the browser that then runs in the browser. And that's good unless you want to server rendered you're authenticated pages. Whereas with next js, you can make requests with cookies. And that cookie might have a JW T or a session in it. And that will allow you to server render and also pre load authenticated pages that are behind a login wall.

15
00:10:15,409 --> 00:11:38,549
Unknown: Yeah, so there's definitely trade offs, right. And this is sort of going to go along with a theme that we're having here where Gatsby really, really, really shines on content that doesn't need to be dynamic. And not to say they can't do any of this stuff with Gatsby. But again, Gatsby shines in situations where content is going to be largely evil, you want to stay static, right. Another good use case for something like Gatsby would be the syntax website, which actually is not in Gatsby, it's in next. But I think the syntax website might be better suited for Gatsby, because what we release an episode twice a week, and then Gatsby could rebuild whenever we release an episode. And then the site would probably be a little bit faster, right? We don't have any authentication stuff, we don't have any of those demands. So I you know, I think that is a situation where if you're looking at the types of sites, a Gatsby site would be really well suited for something like syntax, or actual brochure websites, that kind of thing. So let's get into the data aspect of this, because these are big pieces in both of these. In fact, I think this is an interesting thing that next does really, really well and is one of the things that really, it really shined for me when I found what next was doing. They have their own sort of react bit that allows you to fetch data in the next j s system, rather than having to do it maybe just via a lifecycle method that exists within react, they have their own lifecycle method.

16
00:11:38,789 --> 00:12:43,500
Wes Bos: Yeah, it's called get initial props. And it can only be done at the highest level of a component, which in next Yes, is called a page. So if you have any data that needs to be fetched and needs to be done server side, that obviously needs to be done synchronously, meaning that you can't send the HTML from the server to the client, until that data has been resolved and sent to the browser. So next introduced this thing called get initial props. I think that it's fairly complicated because the demos are really simple, where you're like, Oh, I can await the fetching data in a page j s. But in in real applications, you're probably not fetching data. At a page level, you're almost always fetching data at a component level. So what that leads you to is, you have to create like a complicated document j s, that sort of crawls the tree for any data fetching, and then bubbles those back up to the top level, and you can await those. However, this is exactly what suspense react suspense is going to solve. So I suspect that that will get much, much easier in the coming months.

17
00:12:43,830 --> 00:14:08,850
Unknown: I'm really excited to see that overall, because I do, as some of you may know, I do server side rendering with data and all that stuff in my application without using next or Gatsby, I use Meteor to do it. But Meteor doesn't care about it, it's sort of like this is just the way you would do it, maybe even a web pack setup or something. It's not like a meteor thing specifically. But for me, I found that to be a difficult aspect of server side rendering, when you're doing it fully custom was saying, Hey, I have to wait for this data to come in. You know, I was it was almost like, I could get code splitting and server side rendering to work. Or I could get server side rendering and data to work. But getting all three to work was really difficult, where the data would actually be ready. By the time that it was server side rendering. And all this stuff. It ended up being I mean, it ended up being a big chore. And again, it's not like a meteor thing. It's just that this is one of those things that next JS notice that was a chore and decided to make it a little bit easier for those of you who are grabbing at a page level. And even the just the fact that they have a way to do it. That's not like a react thing. It's like their own way. This is the next JS way of doing it, I think is a big, big improvement upon just sort of saying, hey, figure it out yourself. But I'm excited. Like you said, I'm excited to see what suspense does for everyone all the way around. In terms of server side rendering. In general, I think it's going to make my setup way better, way easier, especially with the new no hook setup. And suspense, I feel like all the code bases are going to start feeling really nice.

18
00:14:09,179 --> 00:15:18,029
Wes Bos: I should also say that next chance is on opinionated as to how you fetch your data or where your data comes from. You bring all of your own. You can use react Apollo, if you're if you're doing graph qL, you can just use the fetch, like a fetch API, if you just want to grab from a REST API. It doesn't care what it is. And all it cares about is that get initial props function is resolved before it actually shifts that data out to the browser. Whereas Gatsby is totally the opposite. Where Gatsby is very opinionated in how you handle your data. Because I think with everything in Gatsby Gatsby wants everything to go through it. It and by doing that it opens up a lot of doors in terms of making things amazing for you. So the way that Gatsby does it is they have this thing called source plugins which are going to pull in data from anywhere really you can pull it in from markdown or MDX. You could pull it in from WordPress. Any REST API a graph qL API, a file system, it basically it will just go off to all of these different sources that you've configured. And then it will pull in all of that data and put it into a graph qL API. And then once you have that data in your graph, qL API, you can query it via your all of your different templates.

19
00:15:18,270 --> 00:15:27,360
Unknown: Yeah, and this is my favorite part. I keep going back for like, what is my favorite part of Gatsby? I don't know. I have, like 10,000 favorite parts of Gatsby. It's all my favorite part.

20
00:15:27,419 --> 00:15:28,169
Wes Bos: So good.

21
00:15:28,200 --> 00:16:55,770
Unknown: Yeah, one of my favorite parts of Gatsby is the fact that it's a excellent way to get comfortable with graph QL. Because you don't have to necessarily learn how to set up or work with an API. Right? You don't have to do the back end part of it. What you can do is even query normal rest API's using these these plugins. And you can really get a handle on what the syntax of graph qL query looks great. I've done a bunch of courses on Gatsby at this point. When I teach Gatsby, I think that's always my favorite part of teaching, it is being able to say, look at how easy an excellent graph qL querying can be inside of Gatsby, it is really super elegant. And I think it not only makes your code nicer, but I think it sells people on graph qL really well, they can see the benefits of graph QL. Immediately within Gatsby, one of the coolest things that Gatsby added in the v2 of Gatsby they used to sort of be more restrictive on how you're querying data, they added a static query component that's just like a normal react component that takes a query, and that you can really just use anywhere for static queries. There's also a page level query that is for more dynamic stuff, where maybe you're, you're adding some context into this query or something like that. There is a little bit of like the Gatsby way of doing things. But in v2 of Gatsby, they've definitely made it way more flexible. And in my opinion, it just got so much better in terms of handling and managing your data.

22
00:16:56,220 --> 00:17:35,790
Wes Bos: Yeah, I think that that's the one thing I tripped up on is that there's two kinds of queries in Gatsby and the static query has some limitations as to passing variables to it, I believe, like I was trying to build a, I was trying to build a component that would query an image based on the source. And I couldn't do it. And all of the answers were to just query all of the images and then filter for the one that you want and the client, which is such a bizarre solution to it. So I think that and I wonder if the React suspense is going to solve this as well. I think that in a future version of Gatsby, they'll probably bring it down to just one type of query that you can use anywhere inside of the application.

23
00:17:36,180 --> 00:18:09,080
Unknown: I know, David mentioned in that that spectrum issue, we were talking about that image thing that they were working on a way to sort of get around this. So I would assume they're they're very on top of it. That's one thing that the Gatsby team is always surprised me with. And I shouldn't say surprised. But it's always surprising because it always comes out with excellent updates right there. Gatsby team just seems to get it in a way that some other product teams maybe don't get. So I really, really am. I trust the direction that they're going to take this thing, because each update makes Gatsby better.

24
00:18:09,270 --> 00:18:40,020
Wes Bos: Yeah, I think that they're intentional about everything that they do, because they want to ensure it like they could add all kinds of features to it. But then I think it would make it harder to use in the long run. And then also, because of the way that Gatsby works, where it's all done at compile time. It has to be generated ahead of time. There's there's things that you might think like, well, I could whip up a PHP server and make a dynamic script, no problem. But you have to remember that this is all generated at build time and can necessarily be as flexible and as dynamic as you think it would be.

25
00:18:40,259 --> 00:19:07,800
Unknown: Yeah, that's definitely the context you need to look at everything you're building and Gatsby with is that it does need to be built. Right. It needs to be built at that time. And I think with Gatsby one of these things is that by building the site, you're just going to get an insanely high quality, fast experience. And one of our sponsors today provides an insanely high quality experience as well. This is the armory now this is spelled armory with a you a Rm OURY armory,

26
00:19:07,820 --> 00:19:11,220
Wes Bos: the proper way to spell it as the Canadians of Brits would say.

27
00:19:11,460 --> 00:19:19,050
Unknown: Yes, and let me tell you, we've had well How long have we had to close maybe about a month we've had we've had some time with the close so it's not like

28
00:19:19,100 --> 00:19:21,630
Wes Bos: I got mine. Yeah, about a month and a half, two months now.

29
00:19:21,989 --> 00:19:38,460
Unknown: Yeah, we've had him for a little bit so I I've had some time to really grow and attachment and the fundament fun fondness for these clothes. They definitely sparked joy with me. I look forward to putting out these every single time I do so with a little bit more about armory is Wes

30
00:19:38,520 --> 00:20:19,580
Wes Bos: Yeah, so the armory is a men's clothing and accessories retailer that provides some of the highest quality clothes out there that you can get. Now, this is pretty interesting because this is not the cheapest clothes that you're going to find. It's looking for someone who wants to spend a little bit of cash on your clothes and not necessarily get a brand name but get some clothing. That is extremely high quality and it's going to last you forever and you're going to feel really really good at it so they sent Scott and I a bunch of stuff out I got a I think it was a cashmere buttoned up a wool sweater pullover and a wool tuk. Which for you Americans, a tuk is a What do you call it a beanie?

31
00:20:19,850 --> 00:20:33,800
Unknown: Yes. better name than that. Yeah, but I don't know, whatever. I got a, I got a wool cardigan. And a safari jacket, a canvas Safari jacket that is Oh, loving that jacket.

32
00:20:35,310 --> 00:21:14,520
Wes Bos: So the armory believes in by less by better. So if you need a suit, or a sport coat for a special date, a job interview, a wedding or something like that. Don't just go and buy a cheap one that you're never going to wear again, invest in a good piece that you're going to have for years and years to come. They're pretty small little shop. I know that in they have two spots, one in Hong Kong and one in New York. So they're pretty small. If you email them, you're going to be speaking to probably the people that we know over there. If you have any questions about the product. It's it's a very, very tailored experience shopping with them. So I know Scott, you even were just wearing it around the city the other day and somebody asks you about it.

33
00:21:14,640 --> 00:22:12,480
Unknown: Yeah, was that I was at a coffee shop. That's by my house. I was just working on some code. I was working on some new level up tuts stuff. And this guy, I was wearing my my air pods. I was in the zone, I was working. And he he liked my jacket so much that he he had to interrupt me, you know, tapped me on the shoulder says like, Hey, man, I'm really really sorry. But I have to know where you got that jacket. He's like I've been I've been just looking at that jacket. He's like, I've been looking for something just like that. And I have to have it, you have to tell me where you got this. So I told him we looked at the site together. And I'm pretty sure he's probably ordered it by now. Because he was uh, he was like down at a no, it's funny, because it's like, that was maybe the first time I had worn that jacket, you know, out to go work somewhere because it's it's definitely like a spring fall jacket. And we've had some chilly temps here. So it's funny, it's like I'm one for one in terms of people demanding to know where I got my jacket. On the very first day I wore it outside. So definitely, I think obviously high quality stuff here.

34
00:22:12,720 --> 00:22:46,680
Wes Bos: Awesome. So I want to tell you to go to their Instagram and follow them there. The armory, ar m o u r y NYC, the armory, NYC and follow them along. So you can get some ideas for the clothing that they have. I like to do this with companies where if you're not looking for something immediately at least follow them on Instagram so that you can kind of get a feel for what the whole company is about. And then obviously go to the website, take a look at all the different stuff they have for sale at the armory.com. So cool. It's pretty cool to have a clothing sponsor on the podcast. And we want to thank the armory for joining us.

35
00:22:46,860 --> 00:23:32,880
Unknown: Yes, thank you. Cool. So let's get into it here talking about routing and pages. These are concepts that typically you'd think, hey, the framework, why would a framework touch routing, we have react router, we have react router, we have these options to do routing. And many people are so used to that. But one of the cool things about having the framework take control of the routing is that it understands your application in a way that it can build out and generate these pages via server side or via via static site generation. And for the most part Gatsby, and next j s, they handle routing very, very differently, were very differently, but also in a way that is sort of centered around I don't know ease of use, they're both very easy to use the routing systems.

36
00:23:32,910 --> 00:25:26,700
Wes Bos: Yeah, there's no like configuration for your router. So I think previously, when we first started react with things like react router, the first thing you do is you do the router first, and you configure it, whereas with next j s, all you have to do is create a there's kind of like two directories that you have an index JS application, the only one that you actually need is a pages directory, and every single file inside of your pages directory will be a page. So you might have an index j s, that's your homepage, you might have an about dot j s, that's your about Ford slash about. And you might have Ford slash team Ford slash members. That would be a directory called team and a members.js file. And it's just like the old PHP days or the old HTML days where you just create a file. And that would be your router right there. You don't have to configure anything out there. It's pretty cool, because you can nest them as deep as you want. And one downside to that is that if you want like custom routing, if you wanted like forward slash items like in my my advanced react and graph qL course, when you want to view an item, it's forward slash item, and then it's a query string, which is question mark ID equals ABC 123 will be really cool is if you had custom slugs like WordPress where forward slash item forward slash sick pair of shoes with dashes in between. and you can't do that in the next class by default. Anytime you have something that is dynamic like that, you have to pass it as a query string, which is the question mark However, there are some options out there where you can use like an express server to handle all of the routing for you, and then pass it. So there's, there's some packages out there. The reason I didn't use that in my course is just because like, I feel like that's a big missing point in next, Jess, because because it is next Jess is a node server, so they should be able to handle that. But I think the reason they don't do that is because then you'd have to configure that instead of explicitly just creating pages in your pages directory.

37
00:25:27,000 --> 00:25:28,770
Unknown: Yeah, that this is a huge bummer.

38
00:25:28,800 --> 00:25:39,360
Wes Bos: Yeah, I think so to that, obviously, they have their the reasonings behind it. But just as someone who is using a framework, that's something that you would expect to have inside of a framework. Yeah, I

39
00:25:39,360 --> 00:25:42,810
Unknown: look my slug URLs, my pretty pretty URLs.

40
00:25:43,380 --> 00:26:24,390
Wes Bos: Totally. So Gatsby allows you to do this, because at the time of build, you know, all of the got my Tim Hortons tea hearts. Yeah, my wife just brought me a Tim rim. In Canada, it's roped the rim season where you drink your mediocre coffee. And then you roll the rim of the cup up and you might want a jeep. So we're, we're drinking a lot of mediocre coffee right now to hopefully win achieve Fingers crossed view on that Jeep. Anyways, well, we're talking about Gatsby, because it gets me knows about all of the data at build time. You can create the pages however you want, right? Because it Gatsby doesn't have a pages directory, it has a create pages API. Is that right, Scott?

41
00:26:25,050 --> 00:28:55,950
Unknown: Yeah. And it's really elegant. Well, because Okay, so there's two, I guess there's two types of ways that you can think about routing in Gatsby world where you have the directory based routing, like you do in index j s, right? Like, if I wanted to, I have a pages directory, I can throw in a component, I can then throw in a folder, and it does the routing structure the exact same way that nest next would, where it takes the folder name as the route, name, all that stuff. And then if you were unhappy with the pages directory, for some reason, you could head to your config file, and then go ahead and denote other directories or other types of pages using different routing ways. But one of the cooler things that Gatsby allows you to do is some really excellent dynamic page creation, using what is this node config file that Gatsby gives you. And this node config file is something that runs at build time, while it's creating these pages. So Gatsby has the concept of a page, right. And for a page to exist in Gatsby, it either needs to be a hard coded react component in your specified pages folder, or it needs to be created in this Gatsby config file. So one of the ways you would do this is on the build time, you might run a graph qL query that says, hey, go fetch me every single markdown file from this API that exists, right the Gatsby API, the Go fetch me every single markdown file. And then you can use the frontmatter to construct your URL, say, whatever, you could have totally custom URL forward slash whatever forward slash the slug of any of the dynamic. And then you can run this essentially a create pages function that is going to create a page and it's going to create a page with some context. So you're going to tell it what template to use as in what react component file to use, as well as any sort of context that you're going to pass into that query that eventually gets run, maybe it's the slug from the markdown file. And then in the actual page creation, you can use that slug to run another query to generate that page statically. So Gatsby offers a ton of dynamic functionality in terms of creating pages, because it's just a function that runs that creates the page. So if you want to do, you could create a whole bunch of pages based off an array that you just hard coded yourself, or you could have it based on the results of a query from an API. Or you could just run it once with a random random page or file. So it's really super flexible in that regard. And once you sort of unlock the secrets of the node config file, Gatsby really opens its doors.

42
00:28:56,100 --> 00:29:41,820
Wes Bos: Yeah. And that's the beauty of Gatsby. And that's why it's so fast. Because if you think about forward slash item forward, slash really cool shoes in next year is what needs to happen is it needs to accept the request. And then it needs to take the slug and look it up in the database, and then pull that info out of the database, maybe run some markdown against it, then put it into the React component. And then that rack component needs to be rendered, and then it gets sent to the thing. Whereas with Gatsby that was already done at build time. So when somebody visits for slash item forward slash cool shoes, that's probably already a folder in your file system. And it's going to be instantly delivered to your end user. So that's really where I think Gatsby shines in this case where the it's going to be so nice and quick.

43
00:29:41,910 --> 00:30:05,670
Unknown: Yeah, absolutely. No, since both of these are allowing the framework to sort of control the routing system, you can't just use normal anchor tags, because again, at the end of the day, this is sort of like a react thing. And I know Gatsby uses the reach router under the hood. Reach router is an excellent routing solution by Ryan Florence. I really Really, really liking retreaders? myself? What does next JS use under the hood is just its own thing?

44
00:30:05,850 --> 00:30:20,820
Wes Bos: Yeah, next has its own. But there's been some rumblings that the internals will be swapped out, which is not anything to sweat just because, yeah, it'll just, it just does it for you, right? There's no config, it's not like you have to reconfigure router, it will just work, they're not going to take the pages directory away from you.

45
00:30:21,030 --> 00:31:30,240
Unknown: Yeah. So what this means is basically, you have to use a link component, just like you would with any other react routing solution, but you you have to use a link component to route between. And you know, otherwise, you're not going to get any that good dynamic page switching fast sort of stuff that you get from these things. So that's just one little little note to do. If you're doing internal links, use the link component for both of those, sort of the way things are with these front end frameworks. Next we're going to get into is plugins. And, you know, I talked about my favorite features of Gatsby. This is one of the sections where Gatsby shines the brightest. Because these plugins make Gatsby from what it turns the Gatsby into is it takes what is already an excellent fast platform. And it turns it into a an excellent, fast platform that can do so many things. It can do so many things for you, it can do them well, and some of the stuff is gonna like literally, I'm using literally hilariously here, but it might literally knock your socks off. I think the first time I used the Gatsby image component, my socks literally shut off. I'm absolutely loving a lot of the stuff in Gatsby.

46
00:31:30,480 --> 00:32:23,820
Wes Bos: Yeah, I think that this is the secret sauce of Gatsby in because of the way that Gatsby makes you run everything through Gatsby. There's no going around Gatsby when you build a Gatsby website. Because of that Gatsby is aware of every single style sheet, image tag ServiceWorker, all of this stuff, anything that you have in Gatsby will be able to help you in that regard. And I saw this on Twitter the other day, they said Gatsby is not a static site generator. It's a progressive website generator, which I thought was genius, because it takes just your your simple skills of templating out a website. And then you just set this powerful Gatsby on top. And it does all of the things like compression, pagination, sass, or style components or less, or whatever you want to use compilation, service workers, all of these things are just almost effortless to get up and running by just installing a plugin.

47
00:32:24,270 --> 00:34:07,410
Unknown: Yeah. So let's talk about maybe some of these plugins that that are that exist, essentially, you know, the one I want to talk about, specifically, I mentioned my socks coming off was the Gatsby image plugin. And like, you might be wondering what this thing do, right? Well, it offers both a component as well as a way to query and transform your images, which means that you don't have to worry about all of the hard things that make images cumbersome and large on the web, right. And Gatsby is all about speed. And so one of the cool things that Gatsby does is that you can say, Okay, I need a fluid image, that's going to automatically generate an image that is the max width of the container, okay, so therefore, the image is only going to be as large as the container, I need an image that's the max width of the container. And you know what, maybe for slower connections, I'm going to show a traced SVG of the image that loads instantly, and then fades in the actual image after it loads. And keep in mind, this image is going to be whatever format Gatsby determines is correct. It might be a web p, for those of you who can use web p, it might be a PNG, for those of you who can't use web p, you should look into that because web P is awesome. So this image plugin allows you to do that in a way that is so insanely effortless, you just run the query, pass the query results into an image component. And then you get this image fade in transition, you get the traced SVG, you get an image that's only as large as it needs to be in mobile desktop, literally whatever you want. And it is so darn cool. I it's like I'm gonna pick one thing to rave about. And Gatsby This is it, this is my favorite feature, I think,

48
00:34:07,500 --> 00:34:42,510
Wes Bos: yeah, I use it on my own website with the fade in it resizes a your image down to like 25 by 25 pixel blurred. And then it stretches that up to cover the image. So when you load the page, it a it already knows the width and height of your image which is great because then you you don't get that like weirdness of when the image loads your content shifts. So the the place of the images already there and then as soon as the image is loaded from the actual JPEG which compressed also for you, then it will just fade it in from the the blurred or pixelated version that they previously had, which is cool.

49
00:34:42,690 --> 00:34:58,080
Unknown: Yeah, it's so much stuff that would be a giant pain, if you were trying to do yourself and I mean, it says you could obviously do yourself but it's not something that anybody wants to do themselves. And it just makes everything super duper duper fast in that regard. So get the image, just two giant thumbs up.

50
00:34:58,260 --> 00:35:40,050
Wes Bos: I think that these kinds of plugins are going to take the sort of things where you go to like a conference and you see like a massive company who's like, here's how we spent one year compressing our images. And this is our system for it. And then someone like me, I'm like, I can't necessarily do that myself. Like, I don't have that kind of resources or time. And then now I just have to throw a plug in on and it makes, like, my favorite things in development are both when you have dx, which is developer experience, and you x, which is your user experience, and your user gets a better experience, and your developers has a better experience. And I think that's why we gush about Gatsby a lot on this podcast, but I think that it is because it is the next big thing. Word.

51
00:35:40,230 --> 00:35:41,480
Unknown: Yeah, big fan.

52
00:35:42,570 --> 00:36:42,090
Wes Bos: So what about plugins for next, there are next plugins out there. And generally what they are are plugins that will surface the data fetching for you. So my my react in a graph qL course I use a Apollo with next adapter. And what that will do is it will crawl the component tree for any query components that are built in Apollo and it will bring those to the top so that your query knows so that your page knows to wait upon those other than that next doesn't really have a whole lot of plugins, because that's not the scope that is looking to cover because really what next is is routing a linking prefetching. So that's another cool thing that next will do is if you put a prefetch attribute on a link, it will just go ahead and pre load that page for you. So that when you click next, it will have already been rendered in the background and will be an instant cutover dynamic importing just a couple little things that that next does, it doesn't have nearly the scope of what Gatsby is trying to do.

53
00:36:42,359 --> 00:39:59,690
Unknown: Yeah, cool. And all of these things are excellent ways to extend the functionality of these given frameworks and make your applications at websites so much better. One of our sponsors today will do that for any type of project you're working on. And that is going to be Log Rocket. Now Log Rocket is such an amazing product, because what it does is it gives you complete visibility into your books. And you've probably heard us talk about Log Rocket, if you've watched this show before. But one of these things that Log Rocket is is just so insanely cool is that the proof with this is really just using it because it gives you this really awesome session replay that allows you to see your bugs as they're happening, and allows you to watch essentially a video of what triggered the bug giving you full visibility. I love this because there's nothing worse than getting an error or being alerted of an error. And your client says, Hey, I was on the website. And I click this and it didn't work. Okay, what does it mean, it didn't work? What was the output of the network request? Was that a graph qL query issue was it was the what was my Redux state at the time of this query. This is the platform that solves all of these questions for you. Log Rocket gives you again, a video showing you what the user did where they clicked. It allows you to see the Redux store at the time, it allows you see all of the network activity, it allows you see the console and errors. It is super duper cool. So I'm gonna I'm gonna request that you try Log Rocket, because this is such one of those things that once you try it, you're gonna be like, Oh, where's this visibility been all my life. So head on over to Log rocket.com forward slash syntax, and you will get 14 days for free. That's more than enough days. Because when the first bug comes in, and you see how it happens, and you see how easy it is to go solve that bug, that's gonna save you so much time, it's gonna save you so much money. That's an easy, easy sell. So check it out Log rocket.com forward slash syntax, and you'll get 14 days free. Cool. So let's go ahead and talk about the last aspect here, which is going to be hosting, because, well, you have this app, you just built it. And now you got to deploy it somewhere. You got a hosted somewhere so people can see it. Because what's the point of making a website if it sits on your computer? Nothing, there's no point Unless, of course, a trial right? You're just trying to try to learn something. So let's talk about this because Gatsby's hosting sort of picture. It's both simple and complex at the same time, because when you run a Gatsby build, it generates HTML files and JavaScript files, right. And these are the same type of old school files that you might have worked with back in the day, you could FTP up to a GoDaddy server, if you for some reason wanted to use GoDaddy, which I don't recommend. You could FTP up to one of those servers and have this thing cooking on some sort of shared server in a couple of seconds. That is the easiest possible way to host a website. And Gatsby makes that possible. But in the same regard, if you're if you have data, right data coming in from new places, or data changing and you need rebuild, the Gatsby, the Gatsby hosting picture does look a little bit more complex, until along came Netlify, which basically you just give Netlify your repo of your Gatsby site, and Netlify takes care of the rest. You need a web hook to rebuild it. Netlify gives it to you again, this is not an ad. We're just working on.

54
00:40:00,000 --> 00:40:03,360
Wes Bos: Damn Netlify Guest shout outs even when they don't sponsor.

55
00:40:03,840 --> 00:40:17,460
Unknown: Yeah, right. No kidding, honestly not an add if I'm working on a Gatsby site, and it needs to be updated, like it needs to be updated via new data coming in. And it's not just a static brochure, nice Netlify 100% of the time, the story

56
00:40:17,460 --> 00:43:07,110
Wes Bos: with hosting, next j. s. ap is, it's it's fairly simple. Generally, you have with the next application, unless your back end is is done by totally somebody else. Generally, you have an app that runs your back end. And then you generally have a front end, which is your next JS application. And if that's the case, you often need to think about cookies if you're doing authentication. So you can get into cores if you want to, or you can host them on the same domain name, if that's the case. So generally, what I'll do for something like this is, I will host up the next JS application on something like now, and or I'll use like Heroku, or I'll talk about by digitalocean, in just a second, and then you hook up the back end on that. And then you alias them so that they're on like a front end.whatever.com and back end.whatever.com. And that way they share a root domain name, which by the way, let me tell you don't do this on.now.sh or dot Heroku, app.com. Because those domain names, even though you think that they're on the same sub domain, they're registered as tlds, meaning that you can't share cookies across them, because they're like a shared hosting environment. And that would be weird if you were sharing cookies with other people hosting their Heroku application. So just an FYI, I wasted a whole day of my life on that a couple of months ago. But that's generally how I do it. And then the downside to that is that Heroku, now they can get expensive, especially when you're hosting two applications. Next eight was just released, like 20 minutes ago, or half an hour ago. And they have very good support for running your next application in a serverless function, which is really cool. So that you don't, it won't be as expensive, because a serverless function will just boot up whenever someone visits the website. And if it's an application, that is just a demo or something like that, it's nice and quick, what I also like to do is boot up a Digital Ocean server for five bucks a month. And when you're in Digital Ocean, you can install nginx. And then you can run both the back end and the front end on different ports. And then you can use nginx to do what's called a reverse proxy. Meaning that you can say, even though like your front end app is running on port 7777, and your back end app is running on port 8888, you can proxy those through forward slash front end or forward slash back end. And I found that's probably the cheapest way other than maybe a serverless function to go about it. But then it does require the babysitting of nginx. And then I also been using this thing called pm two, which is sort of a replacement for forever, that will keep your application running and you can reboot them and look at your logs on there. So the hosting is not easy unless you use something like now on next jass. But it's not the not the end of the world. Not the hardest thing out there either.

57
00:43:07,380 --> 00:43:40,560
Unknown: Yeah, yeah. Hosting, is this such an a space that I think I think Netlify sort of blew the doors off of a lot of the hosting complexities that people end up having. And I think I wonder if there's going to be more and more like simple hosts, like now, like Netlify that just like take this sort of stuff off the table for you. I mean, Heroku was really a pioneer in that, like all the stuff they got for you for, you know, just made it nice and easy. So that's an interesting space to watch, I think, like simplified hosting and things like that. So I don't I don't have anything to add to what you just said, Yeah, I think I think

58
00:43:40,590 --> 00:44:23,220
Wes Bos: like site is the company and they built now and they built next. And it's really easy to put next on now. And they released now to a couple months ago, which attempts to serverless everything. And it's aggressive what they're doing, because if they can figure it out how to do it, it I think that's going to be one of the big winners for when you actually need a server, not just a static site generator. And I'm really excited for that. Because that's going to be then you're going to be paying like a couple bucks a month, 50 cents, whatever to run your website per month, it's going to be really, really cheap, because you don't need to have the server constantly running your application just in case somebody visits the website. It will boot up as soon as someone visits it. For sure.

59
00:44:23,310 --> 00:44:41,010
Unknown: Cool. So I have anything else to add here. I love these things. Again, just use them. These are two skills that are not going to go unused in your your skill book. So I would check out both Gatsby and both next. I would try them out build some fun stuff with them. Any final thoughts? This is like a Jerry Springer Final Thoughts moment. Yeah,

60
00:44:41,790 --> 00:45:35,760
Wes Bos: I'm gonna go out on a limb and I'm gonna say generally speaking, use necks for applications and use Gatsby for websites, because then there's obviously exceptions on both sides of those things. But generally with an application you need server rendered back ends maybe and you do need the immediate effect. dates for different pages. And for a website, it generally isn't a big deal to have that little little lead time. And I also wouldn't be surprised if Gatsby rolled out something where you could do like partial updates to your your live version of the website. Because when you're developing Gatsby locally, it's not like you make a change to a markdown file and you sit there for 20 minutes while it regenerates. If you make a change to one of your files, it will immediately reflect that via hot reloading in your development environment. So I wouldn't be surprised to see if that that one pain point in Gatsby will go away in the future.

61
00:45:35,970 --> 00:46:40,950
Unknown: Yeah, I'm going to go out on a limb and agree with you enough. Because, wow, anytime Yeah, I know, right? anytime I'm I'm looking to build a website, like a website, I got a client, they got a website, they got this many pages what I'm looking at Gatsby, I'm looking at it, and I'm not even thinking about it. You know, I'm looking at it. But I'm already looking at the Gatsby page. I've already started I haven't. I'm not like looking to see if I should be using it. And again, I don't use next JS a ton of stuff myself because I like Meteor, just because it's sort of like next gassy, but with a database. I think there is an awesome option for building apps. And it does a lot of those things that people find difficult. So I think I love both of these platforms. I think they're excellent, excellent choices either way. But yeah, cool. So sick pics, do you have any sick pics here? I should mention that sick pics, for those of you who may be listening for the first time is the section of the show, where we talk about things that we like that are sick, they don't have to be web dev related. They're typically maybe techie gadgety, just sort of stuff that we like podcasts, products, things. We're not trying to sell you on stuff here. This is just stuff that makes our life better. So I have a sick pick if you do not have one ready.

62
00:46:40,980 --> 00:46:42,000
Wes Bos: Yeah, I'm thinking of one, go

63
00:46:42,000 --> 00:48:05,580
Unknown: ahead. Sure. My sick pick is going to be a repeat sick pick for me, because I've gotten more joy out of this thing recently. And I think this was an old old sick pic here. Or recently, I found that I had bought some of these motion sensor 209 LED these motion sensor, two LED lights that charge just via USB cable, and they stick with a little magnet somewhere. I recently remember that I bought like a whole bunch of these at one point. And they were just sort of sitting in my closet even though I had used some of them in some places. And we have an old house, our closets don't have lights in them are we have some weird nooks and crannies that get really, really dark. And so what I did is I bought these little $12 Let me tell you $12 motion sensor, two LED lights with a magnetic strip. And I just stuck them in places. I found these ones in my closet that I hadn't used and I put one underneath part of our pantry, I put one in our bedroom closet. And every single time I go into the closets that have been dark since we moved into this house, and they light up, it instantly brings me joy that I can finally see in these places that I did not have light before. And now I have light and then there was light. So check these little lights out. It's 12 bucks for this thing. It charges via USB, it's led, it's motion safe, people use them for all sorts of stuff. And I have had an amazing experience with this. I've been using these for a couple years now. Big Big fan. So check them out.

64
00:48:05,820 --> 00:49:40,710
Wes Bos: I'm going to pick something that you instagrammed about a couple weeks ago and I dove into it. It's it's a podcast called the dream. And this is a podcast. Oh man, it's so good. I ate it right up. So this is a podcast that goes into MLM multi level marketing, specifically, and for I'm not sure if this is popular in Europe, but in Canada in the States, it's extremely popular for people who you went to high school with and haven't talked to in 10 years to try to sell you leggings are essential oils or makeup. Yeah. Basically like it's like direct marketing where you shake down your family and friends. And it's really frustrating for me to see it because they target people who are just looking to make a little bit of extra money and need the flexibility of a work hours because of of life situations. And they're often targeted in spending their own money. And just like almost going like a lot of people have to go bankrupt after these things. So it's just been so good, because it helps me see it on both sides. Like it's easy to like I often go on this subreddit called the anti MLM. And it's just like bashing people who are trying to like sell stuff on Facebook and shake down their friends and family. But like it also shows you like the other side of things as well where these these are like genuinely good people trying to make a better life for themselves and get a little bit of extra cash and how these like really scammy companies prey on these types of people. So it's like nine episodes and then it's over. So I listened to them all in like two days or something like that. It was super good. called the dream at the dream.fm Yeah, I

65
00:49:40,710 --> 00:50:49,080
Unknown: from the history of this stuff to be fascinating. I found it I mean a lot of aspects of the series to be fascinating. But yeah, you ever I feel like everyone probably knows someone who's trying to sell you something that is like very clearly like, Man, it's a pyramid scheme. So yeah, I found it to be just like really, really sort of interesting and like a car crash sort of way. There was a lot of details. I didn't realize a lot of scamming going on. So a good look into this. That was really well done. Yeah, plugs. I'm going to be shamelessly plugging a relevant courses mind to this podcast episode, which is my pro Gatsby two course. It's called pro Gatsby two. I get a lot of questions about this because it is for version two of Gatsby, the naming might be changing at some point here to just pro Gatsby after, you know, after the updated version, but this will teach you Gatsby inside and out if you want to learn about everything we talked about in this episode, in terms of using the image component, creating pages, even doing some little animation stuff, hosting all that good stuff. Page query verse static query, check it out, pro Gatsby two at level up tutorials.com forward slash store, or become a pro at level up tutorials.com forward slash pro and subscribe for the whole year save, save 25% so check it out.

66
00:50:49,200 --> 00:51:21,990
Wes Bos: I'm going to shamelessly plug my new sales opportunity for motivated individuals who want to work from home. Oh, for a couple members who want to get into selling courses for me and are really interested in earning, like just swimming in cash and signing up others beyond you. If you sell over $10,000 a month I will give you a Mercedes that you can drive around in and okay. That'd be funny to do like a MLM for selling courses. Like what was

67
00:51:23,370 --> 00:51:27,870
Unknown: that? Yeah, you, you, you. Yeah, I can't even that hurts my brain.

68
00:51:29,340 --> 00:51:54,690
Wes Bos: Anyways, I'm just gonna pick or shamelessly plug my courses if you want to go to West boss comm forward slash courses, you can see a list of all the different courses I have, including my advanced react and graph qL which dives deep into using next jazz to create a server rendered in server authenticated react application with graph QL. Nice sec. Alright, I think that's it. Thanks for tuning in. We will catch you next week.

69
00:51:54,900 --> 00:51:57,300
Unknown: Catch you next week when I'm hopefully not so sick. So

70
00:51:58,620 --> 00:51:59,040
please

71
00:52:01,020 --> 00:52:10,740
head on over to syntax.fm for your full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

