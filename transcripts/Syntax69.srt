1
00:00:00,359 --> 00:00:24,480
Announcer: Monday, Monday, Monday, open wide dev fans yet ready to stuff your face with JavaScript CSS node modules, barbecue tip workflow breakdancing, soft skill web development hasty as crazy as tasty as web development treats coming in hot here is Sarah CUDA, Bob and Scott Tolinksi ski.

2
00:00:25,950 --> 00:00:53,370
Scott Tolinski: Oh, welcome to syntax today, we have a tasty treat for you. We are talking about framer x, and prototyping applications, design applications, the interaction of those applications and our development space, and sort of where that's going to be going and where it is, and some cool cool stuff coming down the pipeline. Now, my name is Scott Tolinksi key, this is a tasty treat. This is the syntax of FM with me, as always, is Wes Bos.

3
00:00:53,430 --> 00:00:56,430
Wes Bos: Hello, everybody. Good to be with you again, I guess.

4
00:00:56,940 --> 00:03:30,900
Scott Tolinski: Yes, good to be with you. Again. This episode is the nicest episode of syntax and it is sponsored by century century is amazing century is a play surface that both Wes and I both use to track our errors. And it really what it is, is it's a sort of a hub for getting all of your errors in a place where you can track, resolve them, and really approach any sort of error system in your website with confidence. Honestly, the service is invaluable to me, I use it 24 seven. So some of the cool things that that Sentry does, it can cut your app, your error resolution down from five hours to five minutes with all of the relevant information it gives you, right? It lets you know the operating system, the user, the even the relevant source code using source maps, so you can see exactly where the error occurred in your source code. I mean, that kind of tool is just amazing. They have SDKs for every single platform you could possibly think for. I mean, seriously everything. So if you're using code to make things a century has your back there. Yeah, there's even some really cool stuff like noise free notifications tied to the commit, right. So if you made a commit, and it's causing some errors, you're going to get notified yourself. And it's going to be again at noise free, letting you know exactly what's happening without a bunch of fluff, okay. And again, there's tight integrations with things like GitHub, Bitbucket, get lab, any of your version control systems. There's also tight integrations with services like slack and JIRA, and whatever you're using to communicate with your team. And if you sign up for century using the promo code, tasty treat all one word, you could get two months for free of century small plan. Now here is the kicker of this coupon code. The tasty treat coupon code even works for already Sentry customers. If you're a current Sentry customer, and you want to get two months free of their small service plan, please sign up or use the promo code tasty treat, and you get a little extra incentive there to try century at a little bit larger scale. Also, for people that might be on the fence about getting to try this in general, the free tier of Sentry is perfect for getting started and just checking out the features and seeing the value. Again, I use this tool nonstop. And I'm pretty sure my team could not function without it. So check it out@sentry.io use the promo code tasty treat to get to two months off of their small plan there. So check it out. It's it's again, awesome, awesome tool, and we're so happy to have them as the sponsor.

5
00:03:31,019 --> 00:04:01,200
Wes Bos: Awesome. So today we're gonna be talking about, we're gonna I guess we'll start talking about framer x, which is the new hotness, Scott, explain kind of what it is. And we're gonna parlay that into the idea of prototyping tools, what they are and why you might want to use one and where the benefits are. And then finally, we'll talk about sort of like our dream for prototyping tools. So this is more of Scott's wheelhouse. So I'm gonna let him drive most of the conversation. And I'll chime in with whatever I have to say about it.

6
00:04:01,260 --> 00:09:50,190
Scott Tolinski: Yeah. So I know, we all use a lot of apps to do design nowadays. And workflow has shifted. I mean, when I was first working at an agency, everything was done in Photoshop, you just did all your designs in Photoshop, whether or not that was like, the right idea or the wrong idea. You know, Illustrator was probably more appropriate than anyways. But eventually, you know, people came along and enhanced some better ideas to make some more modern applications for how we work in developing things today. So look, things like sketch popped out. And when sketch came out, I blew a lot of people's minds because it was a design tool that was now focusing on the stuff that we use in our actual code. There's reusable components, there's styles, there's things like that there's, you can pin things to areas and have some responsive designs. Again, these are ended up being tools that needed to exist did not exist at the time because everyone is using sort of these older archaic sort of ways of design. Finding a website, right? And then from that came new tools like figma. And envision studio and Adobe XD it's XD, right? I think it is. Yeah. And then now, well, previously framer, and now framer x, which is sort of the latest in this sort of design application. Now framer x is a Mac only application, although I hear they are working on a Windows release as well, I have no idea about any sort of timeframe for that, who knows when that could come out. But it's in the pipeline, right? So framer x is at its most basic, it's a design tool, it's sketch, it's figma. It's one of these, it's a competitor to that sort of space. And it very much works in fields like that, you have your artboards, you have your vector tools, you have your component stuff. Now, the stuff that people have been getting really hyped about in framer x is its usage of react components. And this one's really interesting to me because framer X has these two separate concepts, it has a design component, right, which is something like similar to assemble and sketch or component in figma. It has a design component, and then there's a development or a code component and the code component is written in react. Now, I think there's a little confusion that people were thinking you could go back and forth. And you could export design components as react or use this tool as like a prototyping for code tool that would spit out some code. It's not that it's it's just a design tool that allows you to make more complex components with react. What's cool about that is you can build these components that have like, it actually pops up in the interface in the toolbar. So instead of just being a, here's the background, Shadow, and whatever, you can have your own custom parameters, and sliders and whatever that you can control in the app to control these individual components. And then there's an app store, where you can share these components and download other components. Like for instance, I downloaded a YouTube component. And one of the custom properties it has in the toolbar is just a URL, you paste in a YouTube URL into that. And then in your design comp, it actually loads up that YouTube. That's cool. Yeah. And here's the coolest part is that there is prototype, or there's like a prototyping mode, where you click in and opens up like an interactive prototype window. And that YouTube embed isn't just a photo of the thumbnail in the YouTube player, it's a full on working YouTube player. So in the prototype mode, I can click that and actually see it function as if it is a YouTube player in my design, and it's playing the actual video. So it is a little bit of design application. It's a little bit of interactive prototyping application, it is not some sort of code Explorer, or exporter, or whatever you're not, it's not a dream weaver or something like that. It's not a visual code builder. That's not what it is. So one of the cooler functions about this thing I know, you'll really appreciate this aspect is the there's this layout style called a stack. And this stack uses Flexbox rules. So instead of the like, app, like instead of positioning things on a canvas, you select some things, and you put them in a stack, and then that stack automatically determines their spacing, their location and their distribution. And then using exact Flexbox things like space between and whatever, you can have it be automatic, ah, it's I know, I, I've designed enough lists in my life, that there's like nothing worse than working with a list and having to like move an item around or like reshuffle and use your align tools and distribute tools and whatever this like really, like makes it into like a it's sort of a different thing. I it's a feature that I didn't expect to think is that amazing. And now I'm like, wow, this is like maybe one of the cooler aspects of this application. In addition, there's also things like scrolling areas and animations. When you click on things, we can click on a menu and see it fly in from the left. So I highly recommend checking least out there they're a little their videos there. They're sort of what's going on, I have a video on level up tutorials, YouTube, that's like a live stream of me using it 40 minutes if you want to see this thing in action. Again, this video is not sponsored by framer x. This is just my initial opinions. And mostly I wanted to talk a little bit about design tools and prototyping tools in the context of something like this, something that really inter inter gates, interactivity, and code with design. So again, this is like sort of like one step closer to the intersection of design tools, development tools, and maybe like a code builder, because it's not, like I said, it's not a code builder. But it definitely has some like really interesting features with code in your design. So in like, what ways do you think if you were working with a client, could you see this kind of thing to be useful? And like do you think that interactive features instead of your design comps, do you think that like is something that your clients would want to see?

7
00:09:50,370 --> 00:10:15,900
Wes Bos: Yeah, I actually have a question before I get into that is like the React part is very intriguing to me, but don't totally get it. So yeah, is the idea that you take an existing react component that you use and just pop it into your you pop it into your design, and then you're able to use that as part of your design, or is the idea that you build something in this and export it as code? I don't think so. Right? You don't do any exporting as code.

8
00:10:15,900 --> 00:11:02,430
Scott Tolinski: Okay, yeah, so the you import as code specifically, or you can copy code from a code component that someone else already created. But for instance, yeah, like, I could throw in a react component that I've already created. When you click Create component, it gives you an option for design component or code component. And if you have a code component, it'll pop open a window in your text editor as the TypeScript file. And the from there, you can copy and paste. And when you save and update, it'll pop into your thing. There's, again, some additional little features, because you can set parameters that you can modify within the interface. So again, like even if you were to write your code in this thing, you wouldn't necessarily want to copy your code out of it and use it in real life. Maybe, yeah, I can

9
00:11:02,430 --> 00:11:41,460
Wes Bos: see that being really helpful, because there's a bit of a problem where you have designers that are designing components, and then you have your developers are implementing these things. And slowly over time, they start to drift away from each other, and they start to look a little bit different and things get changed. And, and then it's kind of a pain, where your your actual thing that you're using, let's take the syntax player on syntax, FM, that's a component. If I were to take that and put it into this thing, I don't have to worry about keeping the design up to date with what it actually looks like on the website, and vice versa. Right, you could actually just pop the existing component right into it. So I think that that's very interesting to me. Yeah, there's

10
00:11:41,460 --> 00:13:23,970
Scott Tolinski: definitely some some interesting things there. And I think, again, that would be cool. Because you could pop open in your design comp, and actually press play on the button and get it to play audio. So I mean, there's there's some cool things, your your clients actually get to, like, feel how the application works. And now granted, framer isn't like the first framer x isn't the first design tool to do like figma has a prototyping mode where you click play, you can click here designs, you can have scroll areas, you can have pinnable areas, you can do this stuff. So the interactivity stuff isn't necessarily a new thing. But I don't know if you remember, like, back when like the very first prototyping tools, they look like, you know, they look like they were hand sketched. And then the big feature was that you could actually click on things in them was like, I remember showing off design comps at Ford. And then we would have the design comp, which is beautiful. And then we'd pull up this like wireframe in one of the prototyping abs, just so they could click through it and be like, Oh, I'm clicking on this thing, even though it's an ugly wireframe. Yeah, yeah. So we've definitely come a long way since then. And again, I think it's, it's, it's one of these things that is just gonna, it's gonna get better and better. I don't know, if they have any sort of device export, I should look at this. I know like figma and sketch have some pretty slick device export stuff, like you can fire opened a figma design on your phone and click through it. Like you could send clients to a URL and have them like, actually interact with it and feel nice in a real design comp. So yeah, I don't know. Yeah. What are your thoughts on the space in general? Like, where do you think that it can go? Where do you think that it should go? Well, like, I don't know, the convergence of these tools to these types of tools.

11
00:13:24,120 --> 00:14:59,220
Wes Bos: I think that this is really important, because I think it's gonna solve not everybody's problem. I don't think everybody needs to use a prototyping tool like this. But I think that a lot of times, when you're building stuff, the issues that arise when people start to use it arise too late, the client starts to say, Oh, I don't like the way that this feels, or I didn't, I didn't expect that when, when you were to reorder items on the page, it would, it would work like that, right. And I think if you can, can get those things out of the way of how it's going to work. Because I remember back when I first started with Photoshop, it was simple to show the user one file, the normal state, and then we had another layer that simply just showed the hover state. And that was it. But it's so much more complex, there's so much more interaction and interface and how things work together, that is impossible to communicate to a client or even to communicate to a developer. This is how it needs to work when someone clicks on it, or when someone reorders an element or when the screen goes from smaller to bigger. So I think that that's going to really help people that that's find themselves running into issues like that. And I think also it's it's going to allow you to just to dream up new possible layouts and new possible interactions without actually having to spend the time on building what could be some very complex interfaces, a lot of these drag and drop and, and custom interaction stuff that's very hard to write in code. And if you were to spend a week building something and only to figure out this is not the way we want to go, that's very expensive. It's very expensive.

12
00:14:59,640 --> 00:16:59,610
Scott Tolinski: And I think Back to a for those of you don't know, I worked at on like a team for forbes.com. We were doing some like experimental design interfaces. And we worked in a team of like 30 people where we had some, like really influential and excellent designers on the team, and a few devs. And the whole thing was like, we're gonna come up with these incredible interfaces. And we're going to have the devs put them together so that we can do user testing on these things to see how viable using some more interesting interfaces actually is at a scale like Ford, right. And I just think, Wow, nowadays, I mean, this was only a few years ago. But nowadays, you could do a lot of the stuff that we were doing in those prototyping comps, you could do a lot of that stuff in these prototyping app apps now, especially, I mean, you would still maybe need a developer on hand to code up these interactive components, right? Because I don't think a designer is going to be able to go in there and write a react component from scratch without knowing react or anything and have it be super successful. But if you would have a developer coating up these interactive prototypes, it might be a way better way to try out some of these things in user testing, then coating up a whole application itself. This, to me, there's this like, really cool future that we're approaching. And every single new iterative tool that comes out, I think, has a little bit more and more of that special sauce that's going to just I think, progress in that in that term. I'm just like I said, I'm excited for the future of this sort of stuff is so long, the regards to the future, that sort of stuff. There's a space where you have, like I said, we have this design tool that's designing and prototyping is not doing necessarily the code stuff, really. I mean, you can write code in it, and it can work. But it's not giving you code. It's not prototyping code for you. Do you think that the next step is something that gives you prototyping code? And do you think that prototyping code would actually be useful and helpful for developers moving forward?

13
00:16:59,790 --> 00:18:09,720
Wes Bos: Man, that's the that's the dream, right? I remember first opening up Dreamweaver thinking that that's what it was, it was just like a GUI that would allow us to make a website. And that's as much as us developers want to sort of turn our nose up as up at these things that help us write code, I do think that's an inevitable that at some point, I don't know that it will be for your entire application. But for some point, the interface of these things is going to be a bit of a code generator or a helper or something that allows you to both see what you're building, and to have some of these dials and settings and whatnot, as well as actually write the code. It's, I don't know exactly what that looks like. But I would say that in the next five or so years, there's been a lot of like, we're gonna lose our jobs. Remember, it was I think, grid.io, which was gonna like, websites for us, and yeah, freaking out, that they're gonna lose your job. And that went absolutely nowhere. I don't think we'll ever be out of a job. We're just going to be adapting to how we use different amounts of tools. So if you've got thoughts on what you think the future of that looks like, make sure you tweet us out syntax FM. What do you think Scott?

14
00:18:09,750 --> 00:18:51,860
Scott Tolinski: Yeah, yeah, I mean, I think if you're dead on it, it's really interesting, because I doubt that, you know, final product code is going to get pushed out of a design application anytime soon. But I could see there being great benefit to like me dragging a rectangle and styling it and setting up some responsive rules for it, and alignment sort of stuff, and then copying that code out there and pasting it directly into my application, or even getting like a design per code prototype that I could then use, that would save me some time, like, do I really love typing? CSS? Well, I would like it if a robot could type it for me, that would be pretty sweet.

15
00:18:51,990 --> 00:19:26,300
Wes Bos: We're already seeing that a little little bit like in sketch, when I have a complex gradient in sketch, I'll right click Copy SCSS. Yeah, and I'll take that gradient and paste it. And we've previously on the show, we've had sponsor coffee cup has their CSS Grid builder, and the output of it is actually really good. So maybe for like specific things like layout and whatnot, we are starting to see tools like that. And the dream is that one day you will have some sort of GUI that will be a dream to use, and that will output code that is very readable. And I don't know if that will ever get there. But that's the that's the hope, right?

16
00:19:26,430 --> 00:21:39,960
Scott Tolinski: Yeah, it would be really cool to have like a styled component system that stays one to one in sync with your design comps. If you use a design comp, then or if you use a component in your design comp, then you're guaranteed to be the exact same as what's in your code base. And if you modify in the code base that modifies that in the design comp, and if you modify the design comp, it modifies in the codebase like for specifically styling things and really like layout sort of stuff. I see this Yeah, just like that's such a cool idea. I think it's a it's a cool idea and I Not too cool for it, you know, I think some people are gonna be like, well, I they decode everything by hand on a stone chisel and a typewriter and then feed that into, you know, a robot that, you know, converts it to punch card, and then I put in, you know, it's like, I'm not too cool for for a robot doing some of my work for me in that regard. So yeah, I'm excited. I think, again, framer x, sort of, when I first saw it, I was like, Oh, sweet, I'm gonna have like code that just gets output from my components. And it's like, going to be like, just copy and paste your design into a react component. And sure enough, it doesn't do that at all. But it's still I think, like one step closer to that, that sort of goal. And it definitely pushes the bar forward a little bit in terms of what these design applications are going to be doing in the future. So yeah, in that regard, I'm pretty psyched for this thing. It's still in beta. So if you want to get a beta access, you can go to their website, we can make a link available in the show notes to you. and sign up for the beta If not, is probably out soon enough where you can try it. Again, my experiences with it are available on level up tutorials. At a, I think I did a live stream, and I did a what is video. So I've been doing a little bit of frameworks content, this is I have access to it. I've been using it. I'm definitely one to try out all of this stuff whenever it comes up. So yeah, I've had my hands on a little bit. And I'm excited for the future of this design stuff. Again, it keeps getting cooler and cooler. I don't think this is the application that's going to teach you how to be a react developer. I don't think it's the application that's going to merge that gap between design and development and stuff like that. But I do think it is a step forward in design and prototyping in all sorts of like, really, really interesting ways. So do you have any any, like Final thoughts on this sort of,

17
00:21:40,170 --> 00:22:15,960
Wes Bos: I think just to just to keep an open mind, whenever anything comes out like this, it's easy to poopoo it and be like, no, it's these things are always garbage. But at some point, there's a very smart people working on these things. And at some point, I think the the boundaries between what we've had, like if we use a very cut and dried designer, developer designer builds it hands it off to a developer. And those things are very much blurring right now. And I think that we were due for another blur of what your job actually entails. So keep an open mind to the stuff and check it out. Whenever you see anything like this making waves.

18
00:22:15,990 --> 00:22:17,070
Scott Tolinski: Yeah, absolutely.

19
00:22:17,130 --> 00:22:17,700
Unknown: Yeah, I'd

20
00:22:17,700 --> 00:23:03,990
Scott Tolinski: say that that's a great advice for literally anything. Keep an open mind about it. There's still people I read an article I this is totally unrelated. But I read an article the other day, like saying styled component users think this about CSS and they think that there is the cascade is evil. And it's like, this sounds like some like propaganda rhetoric for like somebody who's insecure about their use of CSS, like, just keep an open mind. I think everyone has valid points. And like, Hey, man, if you like using CSS, and you don't want to use style components, that's cool. But I'm not necessarily going to say one thing about it. But I'm not going to make any grand gestures about a user who might think this or that, you know, yeah, whatever helps you get your job done.

21
00:23:04,260 --> 00:23:18,810
Wes Bos: Almost everything good in the history of the world has come from somebody challenging the norm. And not necessarily saying I know better, but why don't we Why don't we take a look at different approaches. Why are we doing it this way? And some of the best stuff has come out of that.

22
00:23:18,930 --> 00:23:30,120
Scott Tolinski: Yeah, absolutely. That's a excellent point. Cool. So I think that's just about it for this hasty tree. We're pulling up on our 25 minutes or so. Do you have anything additional to add like, at all?

23
00:23:30,180 --> 00:23:33,450
Wes Bos: Nope, I think that's it for today. I think we'll wrap it up here.

24
00:23:33,570 --> 00:23:52,860
Scott Tolinski: Sick. Yeah, I think this was a sick hasty tree here. So we got our next episode coming up. It's a potluck where we answer a ton of your question. So we're going to be doing one potluck episode a month and this coming Wednesday is going to be the potluck so keep your ears open for that on the Wednesday edition of syntax.

25
00:23:53,010 --> 00:23:54,600
Wes Bos: See you then peace.

26
00:23:57,090 --> 00:24:06,870
Scott Tolinski: Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

