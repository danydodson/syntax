1
00:00:00,359 --> 00:00:00,870
Scott Tolinski: Monday,

2
00:00:00,899 --> 00:00:02,580
Unknown: Monday Monday open wide

3
00:00:02,580 --> 00:00:19,980
dev fans yet ready to stuff your face with JavaScript CSS node module BBQ Tip Get workflow breakdancing soft skill web development hasty as crazy as tasty as web development treats coming in hot here is Sarah CUDA,

4
00:00:20,009 --> 00:00:21,660
Bob and Scott Taylor.

5
00:00:23,610 --> 00:00:24,480
Totally at ski.

6
00:00:25,890 --> 00:00:49,920
Scott Tolinski: Oh, welcome to syntax in this Monday tasty treat. We're going to be talking about workshops. This is something that you can do if you are a developer and you want to teach other people maybe it's just a small little thing with you and a couple employees. Maybe it's a roomful of bunch of people and you're teaching them or maybe you are at a conference and you're giving a workshop, something like that. My name is Scott Lenski, and with me as always is West boss.

7
00:00:50,040 --> 00:00:52,500
Wes Bos: Hey, everybody. How's it going today, Scott?

8
00:00:52,710 --> 00:02:29,780
Scott Tolinski: Hey, hey, hey, hey, doing good. I'm awake. It's a it's a Monday as we're recording this actually in Monday as you're listening to this maybe as Oh, yeah. Monday, Monday, Monday. Yeah, I'm ready to get going on this one. This episode is sponsored by Sentry. Now, Sentry is the error and bug tracking software that we live here at syntax. If you want to know what's happening with your website, errors, bugs, track them all with century@century.io century is the open source error tracking software that helps developers monitor and fix crashes in real time. And trust me, I use century on level up tutorials, and I absolutely love it. It's an essential part of my business. Cut your time on error tracking resolution from five hours to just five minutes. It works with any language and integrates with dozens of services, syntax, listeners can get two free months by visiting sentry.io. And using the coupon code at hasty treat all lowercase all one word. And trust me, you're going to want to get those two months free. And you're going to want to try it because I use century and I love it and I cannot live without it. So check it out@sentry.io coupon code tasty treat. Now, Wes, I know you give a ton of workshops, I have never given a workshop. So I'm going to be taking notes here, I'm going to be using the notes that we got. I'm interested in knowing this. Because I mean, I technically you could say I've probably given hundreds of workshops on the internet, but none in person. So I'm interested in hearing all about what you have to say about how to give a killer workshop.

9
00:02:29,910 --> 00:06:22,980
Wes Bos: Yeah, I actually that's how I got into teaching and to doing online stuff was I initially did a workshop in person. And it turned out I really like doing it. And it's fun, trying to explain things to people and sort of do it off the cuff. And I feel like it's probably my biggest skill that I've improved on over the past eight years of my career is being able to take something and just kind of riff on it and explain it to to an audience. So let's just kind of get into it. And we'll talk about different types. I like giving workshops, I don't give as many as I possibly could I, I probably get emails every week of somebody who wants me to come do a workshop either inside their company that's like, that's like a very lucrative business that you can get get into. And there's certainly people that just fly around, like, probably never home and just go from company to company giving workshops on specific technologies. And there's also public workshops, which I do quite a bit of, I probably do a 5050 split between the two, you can make more money doing private workshops, in my experience, at least. But the public workshops are also really fun. Because you can do them at a at a conference, it's usually you speak there as well, you get to go out with dinner and meet a bunch of really cool people. So those are fun as well. With the public workshops, I usually pair up with someone who's going to sort of organize it all for you. So if that's the case, you you pair up with a conference or somebody who knows how to run a workshop. They take care of selling tickets, getting the space making sure there's plugs, there's all kinds of logistics that goes into throwing a workshop that I do not care about, which is are there more plugs, what's for lunch, I bought a ticket but need to transfer and all that kind of stuff is not really what I want to do. So you have somebody else do it renting the space, etc, etc. and teach you just show up and teach for private generally as an office manager that's taking care of that type of thing. So you sort of pick which one you want to go with, then it comes to choosing a topic. So the upside to doing these sort of public workshops, is that like I have a bit of a repertoire of is that a word repertoire of courses or? Yeah, workshops. So yeah, like a beginner workshop. I've got an ESX workshop, I have an intermediate react workshop. I've got a Gatsby workshop that I just gave a couple of weeks ago as the first time ever, and then you you sort of like spend, we'll talk about building it but you spend two or three weeks building a workshop. And then you have it and it's locked and loaded and you can go on tour. With this sort of thing, and deliver it over and over, just you obviously have to update it as it goes. But it's not nearly as much work as the initial development of the content. So I like doing those some other times a company will sort of say, like, Hey, we're about to do a new stack. And this is our stack, and we need you to come in and, and teach us that stack. So it'll be very specific as to what tech they've specifically chosen. And then you have to develop customer content for them, which takes quite a long time as well. And you sort of go through it and figure out how you're going to approach it. So that's choosing a topic. I generally like to like I said, I like to do choose my own topics ahead of time, but I'm not opposed to also making custom content for for the private clients. Sure. Then when it comes to building content, there's sort of two approaches that I've taken. And it depends on what topic you're trying to teach. So there's, there's one, which is you can choose seven or eight different little things. So you're looking at a workshop, generally, I do day long workshops. And you say like, okay, like, what can I get across in this six to eight hours, that's not totally going to zap everybody's energy? Because it's a it's a long day to sit into a workshop and to be learning all this new stuff.

10
00:06:23,190 --> 00:06:40,170
Scott Tolinski: Do you practice it ahead of time to know that the timings going to work out? Or do you have like alternate plans to say like, oh, if this audience is struggling at this thing, maybe I'll just cut this part out? Or is everything essential? And you can't veer from the script? Essentially?

11
00:06:40,200 --> 00:08:02,700
Wes Bos: No, I have like a pretty good idea of what you can get done in a day. And it's, I've gotten that over the years, you I used to think I could get double the amount I could because you think like eight hours, you could teach tons in that right? Yeah, yeah. But it's, it's much slower than then you think it would be just because there's lots of questions that come up. And then you have to teach and wait for people to actually write the code. So I just have kind of a feeling for it. And then I'll usually have like two or three little modules at the end, if we have time to go through it. And usually at those at those times, I'll say, look, we're done the workshop, if you want to go home, by all means, I understand you're probably absolutely fried by now, because it's a long day. But I'm just gonna go through these extra little little parts, if you want to stick around and get it and usually about half the people stick around for that. Because they're like, Oh, yeah, I'd like to get as much as possible. And the other half of the people are like, I'm so tired. I've learned so much today, and I can't possibly do it. So yeah, that's kind of how I do it just have a little bit extra at the end. But also, the thing about a talk in a workshop is no one is ever upset that it ends early. So don't feel afraid that like, Oh, I have this eight hour workshop, and it was actually six. And these poor employees got to go home at three o'clock. Nobody is upset about that. If it goes smoothly, you've got across everything that you wanted to teach them. That's totally fine. Sure.

12
00:08:03,150 --> 00:08:35,130
Scott Tolinski: Yeah. I don't know. One thing I'm interested about is like, what happens if somebody is totally failing at your, your initial setup? Like, I want to get started, like, what can you do at the very beginning of your workshop to make sure that onboarding and getting people to the point where they're even writing code is smooth? I went to a workshop once where the initial setup of everything took so long that Yeah, the workshop was over by the time people had their API credentials in and they?

13
00:08:36,000 --> 00:09:32,150
Wes Bos: Yeah, yeah, usually, I'll give people like a little bit of a boiler plate and sort of tell them to npm install and to test things out before they get there. And that way, if anything, is broken with their machine, or they have some weird VPN issue that's going on, we've run into it all. And I make sure that we're at least at the point where you can start writing code and it's up and running by the time we start the thing. So I say like, do this the night before come in a little bit early, if you sort of hit that. Mm hmm. That that's certainly something you try to script it as much as possible. I remember back when I used to do WordPress, when Windows XP was a big thing. We will get the nightmare trying to get Wham started. Yeah, I just, I just remember this one lady. I'll never forget her. She said like, Honey, you're great. This is great. my computer's not working. I'm going shopping. Later. Yeah. I at least

14
00:09:33,050 --> 00:09:54,090
Scott Tolinski: quit. You know, that person could say like, this is isn't for me, it's not working. And instead of like, I've been in workshops, where where people were just like, I can't get this going. I'm gonna just make it you know, instead of letting everybody move on and just watching I'm going to make it my mission to get this work. Yeah, you can progress. So

15
00:09:55,079 --> 00:14:25,920
Wes Bos: do get those people every now and then where sometimes they just haven't read like the qualifications or something like that, or they're just just his way out to lunch, he had to be like, Look, I need to move forward with this workshop, we can't hold up the other 29 people on this workshop for your specific thing. And that's why I like to keep the workshops to about, I don't know, 20 to 30 people at most, it depends on the skill level of of the class. And any more than that you generally like to have like a mentor in place, or Yeah, sometimes even you'll get like it often, you'll get like really helpful people in the workshop, who are just good at debugging. And who can just like, while I'm helping somebody else, they'll just jump on and be like, Oh, this is what the problem was, and be able to figure it out, which is awesome to see. So building content, you can choose to build like one application. So I built the Gatsby website, we build a beginner react application that works with an API, build a Notes app with a back end. That's generally what I'll do, although I do have a couple other workshops where we'll tackle seven or eight different topics. So we'll tackle serviceworkers and image compression and bundling things with parcel and just like a whole bunch of different little things that are just handy to know, as a JavaScript developer, or something like when I was teaching ESX, I say like, okay, like, now we're gonna learn about this. Now we're gonna learn about this. And it's kind of hard to build that into an overarching application. So we'll build a bunch of like little examples instead of an entire app throughout the day. Interesting. So my process for for building an application is generally all think of like, Okay, what should we build in this website in this thing, and if for me, my Gatsby one does that we're gonna build a Gatsby website. And it's going to include image compression, lazy loading, page transitions, like I just come up with everything that I want to teach. And then I'll build up an application that includes all of that, then I'll sort of rewind it to the starter files, and like, what's the bare bones to get up and running with people. And usually, that's just a package JSON and a bunch of empty folders, because one huge thing that happens all the time is if you tell people to create folders, they will put them in the wrong spot, and you'll be debugging for half an hour. But if you give them an empty folder with a dot Git keep file in it a dot Git keep file, make sure that an empty folder gets put into into git, then you don't have to like fumble over something absolutely silly, like putting their folder in the wrong spot. Which is always happens. I don't know if it's because of VS code, sidebar, or whatever. But you always see people editing the wrong file. It's like the most common thing that that happens. Once I've reversed it back to the starter files, I'll build it up again a second time, but I'll write the notes as we go along. So I don't have like slides or anything like that I just have marked down notes with code in it. And that way, I'm able to sort of just teach off of that and give a give people a spot where they can copy paste it should they have not be able to write it themselves. Sure. And then the third time, I'll go through my own notes and try to build it myself to make sure that it flows smoothly. I also put all the get the notes up on GitHub, because there's bound to be little errors. And what happens is the attendees will send little pull requests, as I'm teaching, whether it's a spelling mistake, or something where I misspoke about something or a clarification that that people got tripped up on. That's really cool. Because that makes the notes better for the next time that it gives the workshop. How long should a workshop be definitely at least a day, or or I think a day is the perfect amount for a workshop six hours or like an eight hour with a lunch and a couple breaks in there is the most I don't think I'd be able to do anything significant in a half day workshop. I've certainly been to conferences where they have like 200 people in the room, and someone's giving like a three hour workshop. And that's kind of just a talk, you know, like, there's no way that you're actually going to be able to get good value. And people pay a lot of money. Like, if you look at what you pay for a workshop, they're generally two to $700 per workshop, whereas my course is like, I don't know it 90 bucks, 130 bucks. It's like way more than actually buying a course it's because you're paying for the in person experience of being able to go through it and ask questions and stuff like that. So you definitely have to make sure that people get real value out of it. At the end of the day. They look back at and say like, yeah, that was expensive, but definitely well worth it.

16
00:14:26,459 --> 00:14:51,660
Scott Tolinski: Yeah, I think providing value seems to be the I mean, obviously, providing value is the biggest thing here. But I mean, if you're going to be up there and teaching people, you want it to be a good use of their time because in addition to spending possibly money, they're spending their time and energy, which as we know is also money. So they're there and you want to make sure that value is exactly what they are getting out of it.

17
00:14:51,660 --> 00:17:34,800
Wes Bos: I agree. I agree. How much to charge for a workshop. How do you figure that out? Generally it if it's a private workshop, I'll quote it based on on travel time, amount, probably the biggest one is how long will it take me to actually build the content, especially if it if it's custom content, I can't pull content from anything I've done before and bring it into that workshop, that's going to be much longer if it's a prebuilt workshop, it's going to be a lot cheaper because I already have the content. So it travel, plane tickets, rental car hotel, sometimes I'll just bundle that all into my own expenses. Sometimes I'll say, the fixed price here. And then you also have to pay for my flight and hotel and things like that just really depends on where it's going. With that type of thing. When you do it with a conference, sometimes the conference will give you a fixed amount. Other times, they'll give you a cut. Generally, I'll just, I'll do what I think is better. Like if I think I you know what, I could probably sell out 30 of these spots, especially because I have the ability to market this thing as well, like, I have, like, I don't know, many, many thousands of people on my email list. And I know where a lot of those people live based on countries and cities and things like that. So I am able to send off emails, say, Hey, I'm coming to your city, here's a workshop. So there's that as well. So if I can like push that a little bit further and fill up the workshop, then sometimes it works a little bit better. on my end, how much to split it, it really depends. Some cities are very cheap. Sometimes people will have workshop space that is free because the conference is throwing their or they're throwing it at a company in their boardroom or something like that. Other times people have to like I've done conferences where the Wi Fi was $6,000, just just for like one day of Wi Fi, they had to pay $1,000 crazy. So there's all kinds of things that go in there, you need to take into account. Other tips, I will wrap it up here, this is just other tips that I have for giving a successful workshop, break away from your app and show other apps. So part of where I see people the most engaged in my workshops is when I say like, here's the topic, here's how we do it in the app or building Oh, but I also use this in my own app. And then I'll just open the code for my own personal website and start up the app and show how it works and show like, Oh, I used it here or here's some like really cool ways other people have used it. And that gives that gives much better context for how these things work. Rather than this one isolated example that we're doing. You show like I use it this way in like context is a good example. Here. I use context for this example. And here, I use context for another example. And then people can Okay, I'm starting to get the idea of how all this works. Yeah,

18
00:17:34,820 --> 00:18:00,860
Scott Tolinski: I think context is actually a really good use case for that. Because text is you can look at context in the Docs or in how they suggest it. And you're like, Okay, I can see how it's used there. But I don't see how that translates into to my and I think that's a that's a good one. But no, definitely, to get that context is something that I always like to bring into when I'm teaching or talk about, maybe other ways that things could be used or how I'm using them. definitely important.

19
00:18:01,530 --> 00:18:57,030
Wes Bos: Amazing. One other tips I have here Stop often ask if anyone needs help. So I'll always just take breaks, specifically, after you do like a hard part, you stop and say like, Is everyone okay? Is anyone need help is anyone struggling with anything, call me over if you need help, or I'll do a show of hands, like who's ready to move forward. And that way, you always have a second for people to catch their breath. And you're not just sort of keep going because as soon as someone's two or three steps behind, then you've lost them. And you have to wait till the next break to catch them up. And it's not really good experience. So lots of breaks for that. Also, lots of exercise time, people don't just want you to stand in front of them and talk for eight hours straight. They want you to talk about a topic, show a couple examples. And then you want to give them some exercises they like can you figure this out, I'm going to give you half an hour just to go nuts, here's a list of 10 things, I need you to go ahead and implement. And then that's where I think the real learning actually happens. Or they implement it themselves.

20
00:18:57,150 --> 00:19:06,660
Scott Tolinski: How many of those would you do in a workshop? Because I feel like if you do too many of those people are gonna feel like, Oh, this person is just having me do assignments the whole time. And they're not updating.

21
00:19:06,750 --> 00:20:16,100
Wes Bos: I'm probably like, for my last Gatsby workshop, I think I had let me let me pull it up here. I had nine, nine sort of topics, getting set up layout and routing styles, images, sourcing data, dynamically creating pages, sourcing your own data, building and deploying, and then next step, so that's nine in probably five of those had anywhere from five to 20 minute little exercises at the end of those topics. And most of them are just put right before breaks. So you can say like, go ahead and do this and then and then we'll have a 10 minute break. Go ahead and grab a copy coffee vape do whatever it is that you need to do, and you'll be you'll be good to go. So yeah, I don't I think people really like having time to cut their teeth on their own, because it's a chance for them to try stuff and Have the teacher within an arm's reach. And that's really what you're paying for when you go to a workshop. Whereas, of course, I could try to do this at home. But if I get stuck, or if got questions about it, I don't have you right beside me where I can get this explained to me as it would work.

22
00:20:16,500 --> 00:20:45,830
Scott Tolinski: Yeah, yeah, I like it. It's funny. I've been doing even more of that in my video tutorials, even though it's not the same, because no, they can ask questions, but just being like, Alright, here's a challenge for you pause this video and try to take this on and understand if you can't like, figure it out in the time come back, we'll we'll get the solution. If you unpause that. I think that kind of thing helps. Because it does, it gives people an opportunity to like really struggle with something and through that struggles, usually where the best learning opportunities come from.

23
00:20:46,230 --> 00:20:57,350
Wes Bos: Yeah, absolutely. I always have those pauses in my videos as well pause here, actually do it, and then come back. And I'll show you how I could do it. Because, again, I think that's where the real learning is going to happen.

24
00:20:57,590 --> 00:20:58,710
Scott Tolinski: Yeah, absolutely.

25
00:20:59,040 --> 00:22:01,200
Wes Bos: last little tip I have here is give challenges to those who want to do more. So sometimes you get people who are really good developers, and they'll just blaze through it. And they'll just be sitting there looking for the next thing. So if you can have a list of like bonus, I always call it or you you just go like way out like a try to try to do this again. But for an XML feed, or try to figure out how to do page transitions, but with not moving the nav at the top. So all kinds of like different things like that, where you can say like, give it in context, we're not going to cover it in this this in this thing today. But you've got time, why don't you try and go ahead and implement that yourself. So that's, that's what I got here. Today, workshops are pretty fun to give. It's a whole bunch of work upfront, but once you have it, you can start to tour around with it, you can make pretty good money on it. And I always find the very rewarding because you actually see people go through the workshop with you. And at the end of the day, they say like, wow, that was that was a lot of content. And I learned a lot here today. And thank you so much.

26
00:22:01,710 --> 00:22:37,200
Scott Tolinski: Nice. Yeah, I think it's important. I think it's also important to know that you can give a workshop for like two other people to, you know, if you were Yeah, your, your your job, and you have a skill that your other employees don't have some really like really well done workshops. I've had just been by coworkers who are like, Hey, I know this thing you guys don't know, let's let's take five hours and have me teach you this thing. Six hours, let me teach it to you. So that's definitely an option too. If you're if you're maybe a little shy of getting in front of all those people might be a good thing to practice on some some coworkers and get that experience as well.

27
00:22:37,650 --> 00:23:02,940
Wes Bos: Totally, I think that'd be that'd be really cool. I often hear of like, bigger companies have their own internal curriculum, because again, it's probably cheaper just to pay one developer full time than it is to fly somebody in or buy a whole bunch of courses or something like that. And they could just have their own internal curriculum, especially if your company is very like picky about how you do things, because then you could just tweak the curriculum to do it. Exactly how you build your apps.

28
00:23:03,300 --> 00:23:05,370
Scott Tolinski: Yeah, your way. Yeah, absolutely.

29
00:23:06,840 --> 00:23:15,390
Wes Bos: Awesome. So that's it for today. Hopefully you enjoyed that. And we'll catch you next week. Cool calculator, who's who's

30
00:23:17,370 --> 00:23:27,150
Scott Tolinski: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

