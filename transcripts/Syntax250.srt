1
00:00:01,319 --> 00:00:10,830
Announcer: You're listening to syntax, the podcast with the tastiest web development treats out there. strap yourself in and get ready to live ski and Wes Bis 

2
00:00:10,830 --> 00:00:20,790
Wes Bos: Welcome to syntax. This is the podcast with the tastiest web development treats out there. My name is Wes Bos and with me as always is Mr. Scott Tolinksi. How you doing today, Scott? 

3
00:00:21,180 --> 00:03:00,030
Scott Tolinski: Hey, yeah, I'm doing good, you know, living that life that we're all in right now. And just doing the best we can. That's the slogan. But yeah, how are you doing? I'm doing pretty good. A little frustrated at my internet right now. It's being very slow. We've got actually, I think a an update to the Rural Internet, rural rural rule, how they say that Rural Internet, which usually I get about 12 megabits down, which is more than enough for nice and fast internet. But right now it's it's choke out about like, yeah, I'm getting three right now, which is okay for for recording this podcast, and I can see your video, but latency is too bad. And if my kids start watching a show or something like that, then the whole thing just comes crashing down. So I'm doing a little bit of research on the Can I just get a secondary setup of what I currently have just like my own my own line? Yeah, I know. See, now is not the time for me to brag about my internet, but I'm like wired via Ethernet? No, man. It's like, My office is the main connection here. And everybody else can get the slower internet in the house. Cool. Yeah, I'm actually going to set up like some sort of policy or something that says Like, my computer, gets it for, like, prioritization. And then the iPad is good static IP setup. I don't know, I don't, I was gonna say, cuz that'd be really easy to do. If you did, I don't know what that entails personally, because I've never done that. It's in the, somewhere in the ubiquity UI of the thing that I can log into. I did it with my amplifier at home, which I gave priority to my own computer and the TV, which is just very simple. And now with the ubiquity setup that I have up here, I've got to figure out how to do that just yet. Nice. But anyways, let's uh, let's talk about our sponsors, which is Sanity and Stackbit Have you noticed all of our sponsors start with s? I kind of have noticed that Sanity Sentry Stackbit Yes, it is. It is interesting. Yeah. Netlify you got to change Netlify has got to change their their company name to Sarah Ravel. vair was doing a play on verso. So today we are talking about spelt and sapper, which I know nothing about. So this is gonna be another Scott teaches West episode, where Scott lays down the info about spelt and sapper. And I'm gonna be asking him questions and sort of saying, Hmm, that's really neat. That's really cool. And things like that. Yeah,

4
00:03:00,330 --> 00:04:13,050
I think we might be getting a boatload of those in these in this episode. Because there's a lot of cool stuff in spelt, that like directly takes care of a lot of pain points that you experience in other frameworks. So let's dive into it. For those of you who don't know what spelt is. It's a JavaScript framework, Allah react Angular view, it takes care of the view layer for you. And the value proposition of spelt, which is really opens the door to all the unique things that spelt can do is really the fact that it compiles away. So the compiler, when it builds the site, it entirely removes the framework from your code, basically allowing you to have much smaller bundle sizes, it takes it down to just JavaScript, and therefore you're not shipping the entire framework, you get to ship this version of the framework that's been compiled into your code. So it's really fantastic. Which means they get to include a ton of things into the base framework that other frameworks can have due to fear of bloat without having to worry about bloat because you're not shipping any of it. So it compiles the way I've always

5
00:04:13,050 --> 00:04:44,280
Wes Bos: wondered about that, like how it like compiles away. So like, are the features just not needed in the browser? Or, like, how does that work? If you need to do any of this in the browser, or is it is it just static and you you can't do any of that stuff? Obviously, it's not just static, because it's a it's a JavaScript framework, right? It just turns it into straight up JavaScript. But isn't that what like react is under the hood? Like react? If you just view source on react? It's it's just JavaScript as well, right? So like, what's the difference there?

6
00:04:44,580 --> 00:05:24,330
Scott Tolinski: Yeah, but think about it. You have to think about when you minify or compress things. You have your react code, which is already minified, compressed, whatever it exists as its thing. Your code exists as its thing when it wants something it calls something else that does some other stuff. It does some other stuff. With this, it allows the the framework to be baked into your code in those aspects and minimize it all together. Somebody just recently did me pull this up, web dev dot Reddit, I just saw this the other day where they did a comparison between Angular and spelt of this exact same project. And it was like, Yeah, 1% of the size.

7
00:05:24,450 --> 00:06:22,980
It's tiny. Like, the bundle of your website is, like 23 K, which is, like, miniscule, that's, that's smaller than you could ever hope to get an image. And I'm just like, wondering, like, how does it actually under Yeah, like, like, let's look at the bundle of my own website, which probably be a little bit different, obviously, like minds, how did they compile it away when you still need the features in the browser, like from like navigating from page to page or doing an animation or doing virtual Dom? Because it compiles down to vanilla, essentially, like, the code that you're working no longer needs to require a framework where like, however big react is, oh, like, it doesn't need the React API? It just will just use that vanilla API under the hood? Correct? Yeah. Oh, yeah. So liens on the stuff that's already in the browser versus leaning on an existing library that's assumed to be loaded on the page.

8
00:06:23,310 --> 00:09:19,710
That's my understanding. And I'll link to that post here. How does the spelt compiler actually work that we can link here as well. So that way, people who want to do a little bit deeper dive there can. So that's the basic selling point, but it allows it to do some really cool stuff, of which we'll get into its component and prop base to just like view, and react. So you have components that our function largely the exact same way as react, you have props that function very similarly, there are some differences, but they're positive differences in my mind, gives you easy reactivity. So you don't need to create state to set state and worry about the state versions of things, you have a variable, whether that's like lead count, and then if you do count is equal to count plus one, then that just updates in the UI. So reactivity is built in, because we mentioned the whole thing compiles away, there's a lot of built in tools like animations that are built in, as well as things like easy binding dimensions to things. There's a lot of really cool stuff we'll talk about later. And the whole thing, the whole view layer is template based. So unlike JSX, which is how they try to say it JSX isn't template based. But this is pretty much template based, where you're accessing variables and that sort of standard way that we've seen before. In older version. Well, I don't know about current Angular, to be honest, current Angular is like, I don't know, it's a mystery to me right now, because I haven't looked into it lately. But you access your variables, basically, based on bracket variable name within your template file. Yeah. So all of your templates are dot spelt files. And each of these template files can include script tags, right? So you guys script at the top, where you do all of your JavaScript, you have your style tag, which is just straight up CSS, which is scoped by default. And everything else below that is just straight up HTML and your template language. And so this makes it really easy to just write a component if you've used view, which I know you have just done. So in a minor capacity view is the same way. So people coming from view are going to feel very comfortable with this. Yeah, I really like that aspect of view. That's the funny thing about it spelt is that, again, just like view did, it takes a lot of lessons from a lot of different things, and really just does the best version of them, I think. So one cool thing is the template tag, the way that it accesses values is just a bracket the value right for you the variable. Yeah, but unlike JSX, you can do some really neat things. Because it's compiled, you can just say image bracket, SRC, and you don't have to do SRC is equal to bracket SRC, which is like totally redundant and unnecessary. Oh, I hate that. Yeah. Because this isn't trying to be an extension of HTML. It's just trying to be a template language. It's trying to make your life a little bit easier. And as far as components go, you just import them and use them just like anything else. Wow.

9
00:09:19,800 --> 00:10:07,110
So before you keep going, I just took a look at your website. Yes. Which your main bundle there is 23. k. Yes. And my website, which my I've got two main bundles, one is a framework bundle, which includes the react and all the Gatsby and the routing and stuff like that, that is hundred 25 K, MB, and then I have my application bundle, which that includes probably all my custom functionality, and that's 214. So mine is probably 10 times obviously my site is much more complex than yours. So right should be much bigger, but still like the Wow, that's quite a big difference for how small even just like baseline like basically Line framework for me is 123. And yours was 23. Right? Like, you can just see there's 100 k difference there.

10
00:10:07,380 --> 00:10:25,440
And I think that's the big value proposition, besides the fact that it's just plain easier to work in. And so I think it's just exciting. It's exciting to see that because it is it's, it's free, free perf you don't have to worry about anything and all of a sudden you get some of that sweet reduction in K B's. You know, we're about that. So

11
00:10:25,470 --> 00:10:45,060
free real estate. It is free real estate you man, you nailed it. meme steady here. Hi, Decker coming in. I think we've had a meme in every show. For the last like two weeks, we spent a minute meaning we've been meaning. Man, the means have reached us. older folks. So we're starting to lamb noun and syntax.

12
00:10:45,120 --> 00:11:50,190
Oh, yes. geezers over here. Yeah. Okay. Styles, you'll be excited to know that all CSS is scoped by default. And you basically put a wrapper around something to say it's global. That's it. Makes sense. So easy. Sounds so easy. I found it like a Dell components type of flow really simple. It's really interesting. You can pass a variable as a class name, and then instantly accept, like, you can basically use class names as sort of like props on variables that have a style components like sort of setup, it's pretty neat. So basically, you just have to tell the config that you're using a preprocessor. And then anytime you want to use a sass, you have to in the style tag, say type is equal to text forward slash CSS. But for the most part, I don't even find myself using sass. And if I do, it's like only for the nesting. But because everything is scoped by default, and you're within a component, it's almost like I don't find myself needing that ever. So as much as like, I would typically reach for sass in this I don't I don't reach forward at all.

13
00:11:50,700 --> 00:12:20,250
One of the biggest benefits of using nesting is the fact that you get that scoping baked in. Exactly. I certainly still do scoping in my style components, but you needed a lot less, which is kind of neat that you know, and like that should be coming to CSS pretty soon anyways, hopefully. And once we have like scoping, and nesting, and variables in CSS, like we're gonna be in good shape.

14
00:12:20,610 --> 00:12:21,480
Yeah. All right.

15
00:12:22,200 --> 00:13:42,240
So let's talk about reactivity. reactivity is is baked in, right? Obviously, we mentioned that, if you change a variable, the basic example is, let's say, in your script, in your template tag, you say, let count is equal to zero. And then later on, you either do some sort of a function or you call count is equal to count plus one, it automatically updates in the template without you having to tell anything to update without you having to do a set state without you having to do a use effect without having to do anything, right. Yeah, just updates. And that's actually funny. It's like same sort of data binding that we're, well, it's not data binding, but it's the same sort of reactivity that made aspects of Angular one so popular, that everybody knows and loves. Yeah. And what's interesting too, is they also have a reactive variable. Now reactive variable is basically you can define it just with $1 sign colon, and like, a reactive variable automatically will update anytime the variable that's used within it changes. So in this particular instance, if you have a reactive variable that you say is like double the count, and it's dollar sign, colon, double Yeah, and that's equal to count plus two, anytime count changes, it just fires, again, no use effect, no dependencies, none of that stuff. And same thing with statements, which is where it gets really interesting.

16
00:13:42,750 --> 00:14:22,200
It's funny, because when I teach JavaScript to beginners, this is how they think how script works. You put a variable in a span, change the variable, the span should update, no, like, That's right, that that makes so much sense. And then and then you get into like, no, and then you get into react, they say, you can't update a variable directly. That's a mutation, you should never do that. And they're sitting there like, Well, wait, but why not? Yeah, like, if you want to update your variable, you must do it this very weird way. Like, I understand that mutations are bad, but like, why can't I just increment a variable and have it be okay, right? Like, that's seems to be what

17
00:14:22,200 --> 00:16:46,770
this is. Exactly. And then even when you get into the like, the reactive definitions where you're like, Okay, well, now I got to do a use effect, I got to wrap the whole thing, I got to set the stage and the use effect. And then I got to watch the dependency to see if the dependency change like this is like, oh, they're just it's all transparent. It's all right there. And the same thing goes for statements, which is such a huge thing. Because you can now do like the the basic example they have is just $1 sign colon console dot log count. And console dot log count will only run when count has changed, not when the component refreshes, or re renders or whatever it runs wouldn't count changed. And what's cool about this is this Same thing works for if statements and any sort of expression. So that's really neat, it opens up the possibilities for a lot of stuff that you would typically use use effect for. Right within react, it's just dollar sign colon is their shorthand for it. In addition, data binding also as easy as Angular one made it where you have an input in in your input, regardless of the type of input. Regardless, if it's just a div with content editable, you just say bind, colon value equals and then the variable name, and then that propagates through to the variable every single time without you having to do anything without you having to write a specific set state function, you know, do update a variable in a form forms that are obviously I mentioned this frequently, in my least favorite thing in react. And this just makes work working with forms very, very different. Very easy. Very nice. So that's reactivity. It's fantastic. Very nice. Next talk about props, props, basically, the the same way that we know and love props from react, exist in spelt, where you can pass a prop from one thing to another thing with some interesting additions to how props work, to use a prop in a component, you need to export it. And this is like one of the weirdest things in spelt in my mind. And it's not even that weird. So to use a prop within a component in the side of the script, you need to export it first. And the idea there is is that the prop is a variable being defined within your component. And by exploiting it, you're allowing the parent component to assign a value to it, if that makes sense. It's one of those things that when you first see it, you're like, Okay, this is weird, but you just do it and become second nature. And all of a sudden, it's no big deal.

18
00:16:47,100 --> 00:17:04,530
Wait. So say that, again, I just want to totally understand that in order to use a variable in were in the child component. Okay, you have to export it From now on, instead of passing it down, will you do pass it down still? Oh, but you still have to explicitly export it,

19
00:17:04,800 --> 00:18:33,030
you still have to explicitly export it, let me add something to the Okay, the show notes here, where you say, basically, within a parent component, you would import the child like normal, then you use the child just like you would in react where you have a component, and then you have a prop is equal to a value, right? Well, then in that child component, you have to do export, let the prop name and then it actually lets you define a default there. Because the way spelt thinks about it is the the profit center essentially is defined in the child as like a variable and it's almost being passed up, which is very counterintuitive to how we think about these things. But you're essentially have a value, and you're allowing it to be used within the parent component and assign a value to a reactive variable that's within the parent component. So it sounds much more complicated than it is. It's basically exactly how react props work. Except for instead of needing to D structure a prop from a prop object coming in from a function, you just export it from the that that says, Ah, yes, it makes sense. Yeah, it makes sense. And it's one of those things when you see it in practice, you're a little bit like, Huh, so a little different. But the moment user for any given time, it's not a big deal. In fact, the syntax is a little bit cleaner than destructuring. Something from props in my mind. Yeah, yeah, that's true, because it can just be its own line. If all of your code is laid out so explicitly like that, it's a great way to keep you sane, like our sponsor, which is sanity@sanity.io.

20
00:18:34,440 --> 00:20:06,360
So I funnily enough, just spent the entire morning working with Sanity, because I'm testing it out as a headless CMS that I'll use an upcoming course. And I'm just kind of gonna go in and make my content types and like, like, I've used it a couple times before, but this is I'm doing it all from scratch this time, and it was pretty cool. So one thing I really liked about it is when you do the sanity in it, you can choose from a couple of different options. And then when you have those options, you can also choose if you want to fill them with a bunch of data, they got like a movie example and a blog example. And then you can run that puppy locally. Or you can deploy it and you can deploy your back end up to sin. It's called Sanity Studio. So it's kind of interesting take at doing a headless CMS because I would say Sanity is a service. But the actual admin UI for working with it is a react application that you can either host yourself or hosted on Sanity dot studio, which is pretty nifty. And then of course, they've got integrations for react and Vue and everything you'd expect probably spelt actually be kind of an interesting use cases. If you're trying to learn spelt and sapper and maybe pick Sanity for your back end. Check it out@sanity.io forward slash syntax, that's gonna get you double the free usage tier. Thanks so much just entity for sponsoring you.

21
00:20:06,360 --> 00:20:25,110
Thank you. Okay, so let's get into it. We got template logic next, which is one of those things that, you know has always been sort of a sour point in react as well, it's not the most clear thing, because you have to do the ampersand ampersand, basically conditionals to do everything and as you can, it's just JavaScript. So at the end of the day, it is clear enough, but

22
00:20:25,380 --> 00:20:36,780
no, I don't like it. I don't like it either. But, you know, I'm just here. Just give me an if statement. Yeah. Right. No, no, there we can be sore about it. Why is there no if statements and JSX?

23
00:20:36,900 --> 00:22:20,910
Yeah, if we're being entirely honest, JSX really needs a JSX to that's like a template totally like that is much more template II, because I think there is some of the things that are trying to be just too much straight up JavaScript. And once you're like, well, it needs to be 100% straight up JavaScript. So therefore, we can't do a lot of these things. I think some of that needs to get thrown out. But yeah, you know, that's an educated perspective on the matter. So template logic is the standard bracket, pound, if that you've seen in other things, maybe a lot handlebars or something, pound if user ID and then to exit, you do forward slash if to end something rather than like an endif or something. Each statements are the same way. So doing loops is much better than your dot map stuff where you do pound each cat as kittens. And then you get the access to each cat as a kitten, or each cat as a cat. Depending on however you want to say this, here's a template tag that I think is going to blow your noggin a little bit. And this is the promise template tags, which allow you to await a promise within the template. So you can say, oh, lb await and then you have the promise itself. And then you have a colon then where you didn't get access to the value, and then you have a colon catch. So therefore you can have essentially your states of a promise for a year waiting, oh, the value is blank. And then oh, there's a problem, you can have all of those directly in your template without having to do if error or whatever coming in from an async await statement. So you can access the promise directly in the template, which is just very nice.

24
00:22:21,360 --> 00:22:22,020
Unknown: That's cool.

25
00:22:22,110 --> 00:22:57,840
Scott Tolinski: Sometimes you're in the middle, I have a template. And you say, Okay, well, I need to this is now a synchronous code. So I have to go to the top of that template and pop a promise in there and then get the result or something like that. And then oh, I have to have a loading state. So then you have to give yourself a new hook and things like that. So that is pretty nifty. Because Yeah, there's there's nothing in react template tags that allows you to show something if a promise has fired off, but it's not yet resolved. If that's the case, then you have to like set state,

26
00:22:57,930 --> 00:24:58,140
what ends up happening is you have to abstract it all into another function coming in Yeah, like a hook or whatever. And this is just how you get access to the promise itself. And it's that easy. So really nice. Next year is events, which events are a big thing, right? So events, we have button is in the use the word directive like you're used to with Angular or view, and you use the on directive. So you do on colon click, and then your function gets passed in there. I found this sassy little note within the spelt tutorial that I wanted to share with you because I thought this was some strength. This is in the official speld documentation. It says in some frameworks, you may see recommendations to avoid inline event handlers for performance reasons, particularly inside loops. That advice doesn't apply to spelt, the compiler always will always do the right thing, whichever you choose, which is it's so nice that they're like it's somewhat it, I would say that it's very targeted and somewhat aggressive. Because people really get on that about reactive micro performance optimizations where they're like won the alpha function, you shouldn't happen here, you should do this, you should do that. Like, who cares? This is just literally who cares, you do the function, whatever, you don't worry about it. In addition to these directives, I thought this was a really neat thing. There's also directive modifiers, especially for the unclick business here. I thought these directive modifiers were really neat. For instance, if we have a click event, right, and we want it to prevent default, or maybe it's a form submit, and you want it to prevent default, you do on colon, click, and then you do a vertical pipe, and then prevent a default and it just automatically prevents default. And there's a whole bunch of these event modifiers this isn't the only one. There's other ones like once that it's only going to run once. Let me see if I can find these other ones really quick here. The other event modifiers

27
00:24:58,410 --> 00:25:39,300
Yeah. So let me tell you what I use that all the time is I'll often have a function that goes off and does something. And then I'll either need to modify that function to do the prevent default, even though like the handling of the event is not really part of the business logic of the function, or you have to do like an inline function or create a separate function that just prevents default, and then passes along the piece of information over to the the handler of the function that you're running. So if that's the only thing you need to do, then you're often find yourself modifying or creating a secondary function for it. And this just does it for you, which is pretty nifty,

28
00:25:39,570 --> 00:27:49,410
right? So you can put all these things in line, and then you have the the modifiers, right. So like, the modifiers that are available to you are prevent default stop propagation, passive capture once and self. And so I think these are amazing, they can even be changed. So you can do once and prevent default. It's so cool. It's nice. I would love to use some of that stuff. Sometimes. I just think about it, how much nicer some aspects of the things that I'm doing to work around the platform if they didn't exist, right, totally. So let's talk about the baked in goodies like spelt baked you a cake, right, and then they were like, you know what we when you cut open this cake, there's gonna be some melted sprinkles in there, we made you a birthday cake like this is what is I funfetti we made your funfetti cake. So there's all sorts of goodies that have been baked in. And by that, I mean there's like animation. So the animation stuff within svelte that's baked in is as good as animation libraries and other platforms. They've thought about everything here because within spelt motion, you can get tween or spring animations out of the box by default built into spelled tween two or spring animations, you can get transitions that are super duper easy, where you can just define it in or out. So in addition to being able to write your own, obviously, they've built a ton of baked in transitions, if you want to do crossfade, you want to do a fade a fly a slide a scale a draw, you just want to drop something like that in there, it's as easy as importing it and assigning it onto a component by saying, in out or transition, colon fade. So if you were to say in colon fade, it's just going to fade when the component comes in, and it does so based on you know, default, rate and modify. And that works even with mounting and unmounting with inside of a template. So if you have like an if statement, and you wrap that around a div transition, the colon fade, that divs gonna fade in and out. No ifs, ands, or buts That to me is the slickest version of any sort of animation library on any of these platforms. There's even a flip animation version where you can do flip animations built in to smelt. so dope. It's so cool. I love it.

29
00:27:49,620 --> 00:28:08,010
This is the jQuery of new generation of frameworks, because jQuery just had fade in fade out. Exactly. It's the jQuery with no bloat. And here is my favorite part about this animation stuff. Guess what comes in? By default, animating height, zero to height auto comes in no problem.

30
00:28:08,070 --> 00:28:09,540
Unknown: Oh, ah,

31
00:28:09,900 --> 00:28:42,210
Scott Tolinski: yeah, I'm doing that that's level upside, or I mean, on the Scott Tolinksi site, right now I'm animating hideout, I wouldn't. It's like, whoo, this is okay, cool. So also baked in and you can bind quickly and easily, you can bind dimensions. So if you wanted to get a divs dimensions, you can just do bind a colon at client width, equals a value, bind colon client height, or any of those things given to you from the dimensions. And that will spit back out into a variable of what you can do lots of cool stuff with it, including using it throughout elsewhere in your component

32
00:28:43,530 --> 00:29:41,970
reactivity in showing your or showing or hiding your components based on browser width or something like that. There's a lot there. So this is really cool, because it's really cool. This is a no, it's like a prop on on a component or on an element and it gives you a variable of the width and the height. So if this was react, we would need to create a custom hook inside that hook, you would need to create state that would hold the value. And then you'd also need a use effect, which inside would listen for a resize which resize observer, you'd probably have to go polyfill that so for Safari, you'd have to use a ref as well. Yeah. And then when it changes, you'd have to set state. Oh yeah, you need a ref to track the actual thing. And then finally, return it from your custom hook and then that your custom hook will give you a variable and then you can go ahead and display it. So, so much easier in swetland it is

33
00:29:41,970 --> 00:31:41,940
something that you would like want to do you know if it was that easy. Sometimes I look look at this stuff. And I'm like, Oh, I don't want to implement my own use measure hook, whatever, which I do have but like, be nice if you just bind the value of the dimensions to a variable at one point in the like a one liner. That sounds pretty dope right? Yeah. There's Also lifecycle methods if you need on disk, I don't know that all of them off the top of my head, but it's the this, you know the what, what you could be expected on Mount those kind of things. Okay, here are the lifecycle methods unmount, before update after update on destroy, and then there's a one called tick, which is kind of interesting tick returns a promise that resolves, once any pending state changes have been applied. So it's like really granular control. If you want to use tick, I have not used tick personally, but I'd be interested to see some more advanced use cases they use it. So either way those lifecycle stuff exists within speltz, nice and easy, same sort of this stuff you'd apply or expected for them to exist. There's also advanced state, because if you think about it, local states all being done via reactive variables. But global state can be done via what's called stores, which are also built into spelt. And again, you don't ship them if you don't use them. So man, so cool. So advanced state with stores. Basically, a store is an object with a subscribe method that allows you to basically update or write to it. And there's even some fancy subscribe stuff going on too. But either way to create a global store, you just import writable from spelt store, then you export the variable as export const count is equal to writable, and then the default value and then anytime you need to update it, just like you kind of would with set state, you do count dot update, and then the new value and then throughout your entire application. It's now update. So congratulations. It's pretty dope. That's great. No more pontificating about, you know which abstraction of which state library is going to do it for you.

34
00:31:43,230 --> 00:33:20,460
And if you want to stop pontificating about the best way to do your jam stack, well, then you're just gonna head over to stackbit.com. All right, we are sponsored today by Stackbit. They sponsored a whole bunch last year. And I know a lot of you tried it out, and they got some new things coming down the pipe for you to try out. So Stackbit offers developer tools that enable things like inline and live editing, live previews, content changing, sharing real time previews of your jamstack website, which is pretty nifty. So you sign in, you select your static site generator, whether that's a Hugo or Gatsby, whatever you select your CMS whether that's Sanity. Hi, there's our other sponsor for today. contentful, forestry, things like that dado, CMS. And this will give you the ability to do things like live previews, sharing real time content editing with somebody else, things like that. Pretty nifty, you want to try and check it out, head on over to stackbit.com and try it out with your current stack or select one of their little starters that they have just to try it out yourself. Again, that's stackbit.com Thanks so much to Stackbit for sponsoring. One more note we have here is last time, when Stackbit sponsored, we talked about their, their site builder that they had, where it'll allow you to connect everything up yourself, that is definitely still there. And they've got some really neat stuff rolling out with both Gatsby and next shass in the next couple months. So stay tuned for that. Thanks so much to Stackbit for sponsoring.

35
00:33:20,850 --> 00:36:01,980
Cool. So let's keep this moving here. moving and grooving. So we talked about these baked in goodies, in addition to that stuff we had the stores the lifecycle, whatever. There's also the concept of slots. Now I don't know, React doesn't really have slots, it kind of does with the way they do children. But slots are a concept of like, basically, here's some content. It's basically a placeholder for a component or another template to come in is the best way I can describe this. It's used both within view as well as svelte. So if you are used to view you'll be happy that a slot exists. Let me see. The concept does exist in react. So I don't want to it's just different. The So basically, here's how the spelt documentation describes it. components can have child content that the same way elements can the content is exposed to the child component using the slot element. So instead of using children, it's basically slot right. Now the cool thing about slot is that you can give them names. So there's multiple slots, right? You could have a slot, that's a footer, or slot, that's a header and then you could pass in custom headers or footers based on the name. And so slots are an interesting thing. I don't use them a ton. I use them when I have to, but it's one of those ones since I'm not used to them specifically because I haven't been doing a lot of you that I don't probably utilize them the same way they could. It also includes the concept of like adding things to your like the dumb context essentially via ways that you might expect within Like we needed to do so within react helmet before, right? To add a title to a web page, the easiest way to do it would be the use react helmet. To add a title in spelt, you just wrap a title in spelt colon head. And then inside of there, you can add HTML. So basically all of the functionality that you want, that you're used to with the React helmet is available to you within just core spelt, you also have the options to you know, do things on the window or the body. So you could do spells colon, body, or spell to colon window, and even throw on event handlers and stuff on there. Or you can bind properties, you can do all sorts of stuff. So if you wanted to get the window, scroll Y variable, you could do spelt colon window, bind colon scroll, y is equal to the value of y and then all the sudden y is automatically binding the value the scroll value to a variable that you can use to do whatever you want with global state. Yeah, okay. There's all sorts of cool stuff.

36
00:36:02,310 --> 00:36:33,000
I'm just looking at the example of svelte slots just to sort of understand what it is. And like, I think probably the simplest example you can have is if you have a layout, yeah, and that layout then needs children, then you can pass them in, but you can, you could pass them in via name. So that's not that all that different than just like children dot footer, or children dot whatever. Or you can pass them in via props. So that's pretty nifty. I like how slot is the actual component itself, though, instead of just curly bracket children. Yeah,

37
00:36:33,150 --> 00:40:40,050
it again, those of you who have used view, that's gonna feel very, very normal to you. So let's talk about sapper for the time left that we have what is sapper separ sort of their app platform, it's their next JS equivalent where you get server side rendering out of the box, you get routing based on folders. So it has the same folder based route system, I found sappers to be a little bit more elegant in the execution of it. They do have like really nice basic server side routing that like, here's a here's a good example, you have your index dot speld file that would be inside of a route folder, right? Like index j. s. Yeah. And then if you wanted to do a server side code for that, it's just instead of a dot svelte file, it's a dot j s file, that's it. And then all of a sudden, you have an export function, export function, get under, you know, raise whatever it allows you to access the route Express like routes, just basically via having a JavaScript file of the same name in that folder. So that makes it like really super easy, you don't have to think too much about it. For instance, I have an index.json.js file that typically just goes and grabs all of the markdown files from a folder, and then publishes them as a JSON file. And then in my index dot svelte file, what I do is I read that data just by doing a basic fetch command for that JSON file that now exists at that route. And it just exists so then you can access it really easily. This code might be a little bit more visual, if you look at the Scott Toland ski repo for the my website, I think it's like Scott's 2020 or something, I will link this in the show notes. But it is a really simple, super simple code to get like basic server side routing pulled from a folder or whatever, even abstracted out into a couple of folders. One is used data and one's like published data or something. And they're just too abstracted functions that make it so I don't have to do anything and just pointed to a folder and then all sudden it goes off and gets all the markdown files. Beautiful. That's really neat. Yeah. In addition, sapper also gives you static export, aka static site generation for free. And that's what I'm using on Scotland ski comm basically, we we have a sapper site that's being hosted on Netlify. And I just tell Netlify to export the site on build that builds it, you get all the pre loading goodies, stuff that you get within other platforms, you don't get the fancy image stuff that you get with Gatsby, but that's really it. You get so much good stuff in terms of server side or static things if you need it. It's basically a full on next JS platform and those sort of ways. So much to the point that one of the first things in their site is comparisons to next j s they do note the differences in and there's a there's a healthy healthy dose of snark and sass within these documentations in a way that I kind of like this is a really funny in the comparisons with next day a section of sappers documentation. The very first bullet point in the comparison is sappers powered by spelt. So it's faster and your apps are smaller. That's great. I'm in right out and saying it so pretty neat. And for the most Oh, here's the thing I really like about sapper that I really hate about next. Yes. I'm going to tell you that right now, one of my least favorite features about next js is that they decided to handle links differently than not only HTML, or everything else in react, they were just like, well, we're gonna throw in a link. But you got to put an anchor inside of there. Why? I don't know, we just wanted to make your life different than every other routing platform, right? With sapper to do routing, you only use anchor tags, it's just straight up HTML, you just use an anchor tag. And since the everything's compiled away via the the platform, it just takes care of it. You don't even have to you don't have to bring in a link. You don't have to think about that link special syntax, you just use an anchor tag, just HTML. Really cool.

38
00:40:40,410 --> 00:40:42,390
Unknown: Wow. That's pretty neat. I'm

39
00:40:42,390 --> 00:40:48,120
Scott Tolinski: glad that we did this episode, because it really gives a rundown of how simple and clean it is.

40
00:40:48,330 --> 00:41:28,320
It is. I think the more people use it, the more they'll be blown away by all these things that a lot of times people say, well, it's not good for big projects, or what I don't necessarily think that's the case, I haven't found anything that would let me not do something installed that I could do in react. For the most part things just seem easier, less boilerplate II, and a lot of these sort of debates. Yeah, things that we we sort of argue over in the React community are the best way to get, you know, data from your API, render props, and mix ins, all those just go away all of those conversations in that sort of shuffling of the cards of your code, it just goes away. And I like that,

41
00:41:28,710 --> 00:42:04,290
I would like to see like a large website built in essence, I'm sure there are some that are out there already. I just like to see what they are and what the pain points are. Because like, like I see that as well was like, sometimes even we talk about these things. And then like Gatsby, and then you actually go ahead and build it a larger site in it and you start to feel the creeks of it, or you're not necessarily creeks, but just like trade offs in certain parts of the thing. So I'd love to hear if anyone out there has built something and and run into an issue here or there. Whether that's times or, or something like that.

42
00:42:04,590 --> 00:43:43,140
Yeah. And I know swix to a really great post about He's like, sort of I think he's augmenting sapper to write his own static generation platform for separ. I think I'm not entirely positive of that, if he's still working on that, or whatever. But from what I understood, it was a it was just saying, oh, he found a way that he could improve Zephyrs build times by doing a little bit differently if you are only focusing on static generation. But yeah, there's a lot of cool stuff out there. And I think it's just, it's getting cooler. I'm actually, I think I'm gonna be doing a free course on a meteor and spelt because Meteor is the king of backend reactivity, right? It's so easy to do back end reactivity, and RDB, who I'm sorry, RDB, I do not know your name, because it's listed as literally RDB everywhere. His art, his website is our DB dot name. His GitHub is our dB, his Meteor thing is our dB. So either way, he did a package on spelt Meteor data that allows you to connect meteors reactivity to speltz reactivity and like, really no time at all, is pretty really super cool. And you can use like Meteor subscribe statements within the templates using the promise template tags. So you could do a wait, subscribe for this data and then loading and then when that data is complete, it just comes in immediately. And since it's subscribed, it's always going to be reactive from the database and user accounts and stuff. Oh my gosh, I'm really excited about this. So I'll probably be doing a free series on that just because I'm excited about it and want to share share some of that beautiful

43
00:43:43,950 --> 00:45:57,900
Should we move into some sick pics or anything else to share? But strappy and sapper? No That's it. This has been this felt and sapper show brought to you by Sanity and Stackbit. Better s and the sleepy. Super sleepy Scott solinsky is so sick pigs do have a sick pick. I do I am going to sick pick a feature of Firefox. And this is the containers feature in Firefox. And this has, I didn't really totally understand it. And I've been using it a lot lately and it's way better than Chrome's profiles. So Chrome profile allow you to open up a couple instances of Chrome you can be logged into. Like you can have like all of your settings for one domain name and all of your settings for another domain name seem like that. And Firefox container takes it a little bit further and allows you to create kind of different you can create a work you can create a banking you can create I have a Facebook container. And what it does is allows you to be logged into that website in that container and then your visit when you're visiting other websites that have don't have access to you being logged in. to Facebook because you're not logged in on the same that it's, it's done in a container, right. And like that's great for privacy that's great for banking and all that stuff. But what I find it super helpful is just being logged into two different things at one time. So I have my own personal YouTube account. And then I was doing some work on like my wife's YouTube account or a couple other ones. And if I just have a container for that one, I can have all the cookies and everything's logged into that and I don't have to log out and login or, or use Google's awful account switcher, which never seems to work properly for me. And it's just been, it's just been real good for both privacy as well as having it's not like a separate browser, it's just a tab. And the tab is just colored in whatever when you're in. So Facebook, I turned to blue. And anytime I'm on Instagram or Facebook, it's its own little container and you can't reach outside of it sick.

44
00:45:58,140 --> 00:48:11,640
It's a sick Peck sick bag sec, my sick pick is going to be something kind of unique and interesting here. I recently purchased this solar fountain pump, it gives you a solar panel and a water pump and a little fountain and you put it in what could be like maybe a birdbath or something and it's always just gonna shoot water up in the air. Let me tell you, it shoots water like two and a half feet in the air. So the pump is actually surprisingly powerful. And here's what I'm doing. I found this neat little community of hackers. They maybe consider them to be hackers within the customer images and reviews of this product, talking about the various creative ways that they've used this miniature found because it is basically a lot of little pieces, you get essentially a solar powered water pump out of it in the water pump granted is not super powerful, it's not going to be the pump that powers your entire backyard, but it is solar powered. So you can put it literally anywhere if you want some trickle water. So what I've gone ahead is I've ordered some just standard straight up clear tubing to attach to the end of this pump. And then I'm going to get some landscaping rocks and I'm going to build a full custom fountain out of the $60 solar pump. And it's for the cost and for the ease of use it seems pretty darn amazing to me because like if you wouldn't have to do any sort of fountain in the past you've got to plug it into something or you gonna buy a premade solar powered one but I have this like little custom idea for a little pool and whatever and this pump is going to make it so easy and just to look at some of the stuff people have made with this is pretty impressive. The solar panel is great just plugging in it holds a charge with batteries. So yeah, we'll see what I did is I took one of my dishes on a large dishes and I filled it up with water and then I just put it in the yard and I've been testing solar positions just to test out positions to where the the panels going to get a good amount of light and everything. And so far it's been running for like yeah, four days now non stop found hasn't stopped so needless to say I'm pretty impressed with it. We'll see what happens when I get my tubing and get some landscape rocks eventually and build out a little mountain for this thing.

45
00:48:12,030 --> 00:49:02,070
There's so much cool little like you have tons of it and I got these little solar lights are so much cool little solar stuff on Amazon. We've got these little like step lights, I've talked about them before at our cottage because when you're coming up from the fire, there's in there you forgot to turn the light on. It just eliminates where the steps are. And one of them was starting to get flaky and I opened it up and I was surprised that like there's a little rechargeable battery in there which is replaceable It was supposed to be for outdoor and it started to get rusty so I'm not sure how good it was but it was just it was pretty it was sitting in a snowbank for six months so that's probably has something to do with it it not draining or whatever but I just got a little tin foil and some vinegar and scratched off the leads and it's working again and I was I opened it up and I was like I fully expected this to be a lot more low tech than

46
00:49:02,070 --> 00:49:05,160
Wes Bos: it actually was inside for for the price I paid yeah 

47
00:49:05,160 --> 00:49:06,600
Scott Tolinski: the price is really killer 

48
00:49:06,630 --> 00:49:10,080
Wes Bos: so big fan of this all of your solar sick picks

49
00:49:10,230 --> 00:49:39,990
Scott Tolinski: Yeah, I know I recently got some like those little like lanterns they look like little lanterns for the backyard. This is insane it's like 24 bucks for four of them or something you just plop them down throughout the yard and oh wow this is like pro landscaping I'm turning into pro landscaper man over here just wait till my phone comes in. Oh man, let me recommend to you right now go down the rabbit hole of lawn care YouTube channel dude. Oh, dude, what a satisfying well past that is to definitely

50
00:49:40,020 --> 00:49:40,560
yes.

51
00:49:43,050 --> 00:50:52,650
My grass looks adult. Oh man. It's still the snow still mountain though up here. So a couple more months before we have green grass. Yeah, we got long green grass over here. I've been taking care of it fertilized and all that stuff. So you know me Awesome. All right, well, shameless plugs. I'm going to shamelessly plug my new website again. Wes Bos comm check it out. It's a super fast new brand new website built in Gatsby, you can click over to the courses button and see all of the different courses that I have paid in free. Cool. I'm going to sic pick up my YouTube channel, which is level up tutorials on YouTube. I'm gonna be doing a free course on svelte and Meteor. So it's gonna be fun, it's gonna be free. It's gonna be fancy. And yeah, just check it out. Alright, thanks for tuning in and we will catch you on Wednesday at eight. Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

