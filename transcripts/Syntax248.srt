1
00:00:01,319 --> 00:00:02,820
Unknown: You're listening to syntax,

2
00:00:02,849 --> 00:00:10,530
the podcast with the tastiest web development treats out there, strap yourself in and get ready to live ski and Wes Bos.

3
00:00:10,979 --> 00:02:53,910
Wes Bos: Welcome to syntax. This is a podcast with the treats that are pretty tasty. Today we are going to be talking about what is new in JavaScript is a whole bunch of new API's that are coming to the browser to node to ACMA script, which is just the JavaScript language in general. We've got some really interesting stuff that is in proposal stage right now, knowledge coalescing, what does that even mean? Some words really, really lots of nuggets. These are things that you're like, be able to use now or within I bet the next six months or so. So let's get on into it. today. We are sponsored by Log Rocket, which is online session, replay network activity, all kinds of interesting stuff that will show you what is going wrong with your website as well as fresh books, which is online invoicing and accounting and expenses. All that good stuff. We'll talk about them partway through the episode with me as always is Mr. Scott to Lynskey. How you doing today, Scott? Hey, yo, yo, yo, I'm doing good. Just hanging out, you know, everything in life right now is sort of breaking my you know, the handle broke off my microwave, the my dishwashers not working, the icemaker is not working. Our dishwasher broke the other day, too. What happened to your dishwasher? It's just not cleaning. We've we've done quite a bit to check out why, you know, there's no clogs, we've run a lot of cleaning cycles, we've run run it with, you know, vinegar, we've done all sorts of things. And it's just not working very well. All of the appliances were purchased, like two owners ago in this house. So we know Yeah, they might be hitting that age where they're going to have some problems. And I'm gonna have to start taking some things apart and figuring it out. Or who knows, I don't know, I don't want to buy a new one. But yeah, might have to happen. They're old, we had ours flood, we didn't clean out the I don't know somebody in our house is thinking that you can just put a plate full of corn directly in the dishwasher. And that clog the like the drain and then it overflows and there's a sensor in the bottom, that's just two pins. And when that pins hit the water, it can tell that there's been a leak. And we just like left it for like two two days. And we're like put a heater on it. We're like it'll dry out. And it just didn't want to go no back. So I finally pulled it out and just tipped it over and drained it out. And it went back to being fine. But hey, clients repair is very frustrating. Given the how like, it's, it's definitely possible to fix these things. Like we've talked about that before. Yes, parts are often really expensive. And they require us reading

4
00:02:53,939 --> 00:06:55,380
a lot of like, like, you know, getting your hands in there. I mean, we had to fix this array to like change the seal on our dryer or washer one of the two. And yes, so impossible. It was like oh, the seals only $20. But the tool that they use to apply the tension band around the seal is like $90. And it's like, well, I'm not gonna buy the tool for this one time use. So I saw a video that showed you how to do it with screwdrivers, and I have several screwdrivers, and I'm like pulling them and trying to get the tension right on this thing. And oh my god, I think it was one of the only times where I've had to like, set everything down. Just step away and like take 10 minutes to cool myself off because I was getting so angry. It was so great. But yeah, that's how things are going over here, man. We're just chillin working on some co working on some fun svelte stuff, maybe we'll we'll have to do an episode on. But let's get into some of this JavaScript because there is a lot of cool stuff. They came in 2019 S, S 2019, and ies 20. And maybe some things beyond we're going to be talking about some of these basic features, but some more advanced stuff and some really interesting things. So I'm gonna kick it off with flat map. Flat map is basically map, but it allows you to return an array rather than a single value. And typically, if you use map and you return an array, it's going to have an array within an array. You could think of it as like, okay, we're mapping over this thing, we return an array, and then you end up having array inception, right, because it's returning an array. Well, with flat map with the cool thing is, is that it flattens that array just like it would sort of when you're returning an array from a function. And now in this example, let's say we had an array with four numbers in it right? And you returned an array with a number and a number times two. Instead of being array array array array inside of an array, you get, let's say it's like 1234, you would get one and then one One times two, and then two, and then two times two, and then three, and then three times two, and then four, and then four times two, all within one flattened array, rather than nested arrays. Pretty cool. Oh, yeah. So that's just kind of a little convenience method around just first mapping, and then taking your array of arrays and then running with the next one that we have here, which is just dot flat on the end. So there's a bunch of new methods are like object dot entries, object dot values, object keys, all of these new methods will return to an array of arrays. And if you want to get that into just a nice, clean array, so you can work with it, you need to flatten it. So the new dot flat method exists on all the arrays. And this is another reason why you don't have to load in a lodash or something like that utility library, because it just built in, there seems to be a pattern with this modern JavaScript stuff, even like all the way back to es six and onwards, like, we've just been seeing a lot of the features that have been in lodash being implemented in native JavaScript, it's funny, there's probably going to be like a, you don't need lodash at some point, because it is it's like the most used utility library in JavaScript. So at this point, probably no surprise that a lot of these things are being added to JavaScript itself. Did you see this infinity keyword? Have you seen this infinity keyword and anything else before? I'll talk about it in a minute here, but I have not seen this in anything else. Personally, if you do an array dot flat, and then you pass in the keyword capital I infinity, it does it every single nested layer deep, because if you just do dot flat, and you have multiple nested arrays, it only flattens the first level. So if you use the Infinity keyword, it flattens all of them. I didn't realize you could pass it infinity.

5
00:06:55,410 --> 00:06:55,920
Unknown: Yeah.

6
00:06:55,980 --> 00:10:48,690
Wes Bos: Isn't that weird? You can obviously pass it as many levels deep as you want. infinity is has been a keyword in JavaScript forever. There's also negative infinity. I've never used it interesting. Yeah, no, neither by I don't know what other why you would need. Like, if you need like the upper bound and the lower bound of something, they are true numbers. So you can say like 10 is greater than infinity, then it will be obviously false. So I guess if you if you want it to check if something was great, or I don't know, yeah, right. Yeah, a lots of good use cases for it. It just can't think of an interesting one right. Now, this will be the use case where I finally use it. So props. Good. Next one we have here is array dot from entries. And this is super interesting to me. I've used this one three times already, it came out. And it only came out just a little while ago. I'll link up some tweets where I have some code examples. And this is object from entries. And what this allows you to do is you take an array of values, and it will turn them into an object. So object keys, object values, and object entries, these will always return to you an array of values. And almost always when I'm trying to change something about an object, I'll quickly pop it into an array, loop over it and do what I need to do. And then I need to convert it back into an object. And object from entries is this most helpful one, I've got a bunch of links in the notes to some examples that we have here. But even even something as simple as, if you have a string with like, a comma and that you want to split that comma, and then you need to loop over it and turn it back into an object object from entries is coming in clutch. Previously, you've had to use reduce for something like that. And that's sort of another thing that I'm seeing with a lot of these new methods is that every time we come up with a new one of these methods, flat Flat map, from entries, they sort of the array dot reduce use cases that we we saw always go for, we don't go for them as often because like array dot reduce has always been this. Like, it's kind of alluded. It's a tool that we reach for Yeah, it's it's, it's convoluted, it's super helpful. And it's what we reach for when we need to do really anything and there's not that built into JavaScript, right? And now we have these custom built methods for it. And I much prefer those because the array dot reduce tricks and kick flips that we do are hard to read. It's hard to parse. Yeah, yeah, it is. It's hard to parse and, and I never like look like when I see reduce in my code, like I have to leave good comments on it cuz I come back to it. I'm like, Okay, what is this doing? Exactly. Okay, my next one is going to be this is fairly, I don't want to say benign, but this seems like pretty useful, which is trim start and trim end for strings. So you can never Run a method at trim start or trim end on strings and what that's going to do for you, it's going to remove the whitespace, either in front of the string or the end of the string, a nice little thing there, you're not going to have to remove it via, you know, whatever, find this, find the empty space and replace it with nothing kind of tricks that we've done in the past. Yeah, cuz we have had trim in JavaScript forever. It's just that if you only want to trim one side of it, for whatever reason, maybe you are looping over some stuff. And you need to include the space at the end of a word, but you want to trim any spaces that are at the front of a word, then there you go. It's not like that. That's really it's not that exciting, but I'm so stoked about trim. And let me

7
00:10:50,909 --> 00:10:58,260
Unknown: go to full YouTube mode. Hey, guys, today, we're gonna be talking about trim. And let's talk about this thing right here. Yeah, no. Okay.

8
00:10:58,740 --> 00:13:26,279
Wes Bos: blasting it out it Yeah. Unreal. So useful. You want to trim from the start trim from the end, you want to do both? You can do it together. Yeah, you could do it. No, make sure if you if you like that this kind of content, go ahead and just destroy that like button, just push it so far. Destroy it. Yeah. unction to string function to string. I don't know what this does. Does it just make your function a string? It does, just as it sounds. So if you have a function, and you would like to turn it into a string to do something with that string, maybe display it or something, I don't know why what the use cases for this, maybe it is displaying code, right, you want to show off some code, here's a function. Well, now you can take your function run it.to string, and it's going to give you a formatted string of your function exactly as it sounds, is it just the function name, or all the code inside of it, the code inside of it, the whole thing. Next one we have here and this is not new at all. But this is something I've said many times in the past, and many people have told me is that objects and their keys have no order. So if you've ever added items to an object, you'll look at them and they say, Oh, that looks like they're going in order, which I put them in. And then somebody comes around says objects cannot guarantee order. And I've said that many times probably on this podcast, and I learned that that is untrue. Object keys do have order and here is the order that they go in. First, they go based on ascending integers. So if you have a key on an object that is a number, which is weird, but you can do it in JavaScript, then they will go in whatever order from a sent ascending order. So 12345, then string keys, this is most likely what you're using. So anytime you add a new key, that is just a word. Or we can say property, if you add a property to your object, they will be guaranteed in insertion order, meaning that in the order that which you add the properties to an object, their order will always be maintained. And that is guaranteed as of Yes, sex, which is kind of interesting. And then symbols got at the end. So object order kinda is guaranteed, which is nifty. Maybe you can abuse it and stop using arrays. Yeah,

9
00:13:26,429 --> 00:13:31,770
Unknown: I never use arrays for very much. I mean, other than, like, collections, and whatever. No, I never used I

10
00:13:32,820 --> 00:15:01,919
Wes Bos: never used an array ever. No, of course not. So with all these features, you're gonna be able to blast off and write some really fancy code. And just like one of our sponsors today is Log Rocket also blasts off whenever your code is bad. And what I mean by that is what Log Rocket does is it captures video of your users making mistakes. Now it doesn't turn on their webcam and in show them, you know, freaking out about your website. But what it does is it gives you this session replay they call it the session replay is so cool, because it shows you in a scribble timeline, the user committing a bug, they click on something the site breaks, it turns purple, it turns upside down, it turns into a tomato, whatever happens. Well, Log Rocket is going to capture that in a scribble video with a network requests and all those console logs and errors and Redux store stuff that you don't get anywhere else. So if you want to stop guessing why your bugs happen, head on over to Log rocket.com forward slash syntax, and what you're gonna get is 14 days for free. So check it out. It's super easy to set up, just drop in some code. And next thing you know you're going to be seeing and watching in horror as users commit atrocities on your website. So let's get into ies 2020 Yes, 2020 and I think it started off with a big one and buy a big one. I mean, big and big. It was my rap name and university. That's pretty good. Good, Robbie, take it.

11
00:15:05,549 --> 00:15:06,929
Unknown: Good. Yeah.

12
00:15:09,840 --> 00:19:17,430
Wes Bos: Um, what is begin? Well, okay, so let me tell you, let me tell you about big end. Because this is not something I've ever really had a huge problem with. But I know people who deal with large numbers have been asking for big int for a long time. Now, typically, in JavaScript, the upper limit for a number is, what is it? It's something funny, it's, let me find it, let me find it. Thousands, it's in thousands. So the default number only goes up to two to the 53rd power minus one, which is a big old number. But sometimes people need to work with big old numbers. And I don't need to personally but maybe there's a time where I need a big old number. And so the two if you would need a numbers larger than that, which is a crazy large number, then you're going to get to go ahead and use the big int. Now big int is a function, or it's an object that allows you to represent very large numbers. So those of you who are working with big numbers, maybe you've hit that limit, and you've been like, wow, why, why? Why is this math not working? You're gonna want to go ahead and check out big int, because all it does is basically allows you to use numbers that are larger than that upper limit in JavaScript. You know, what I ran into the other day, I thought this was really funny as that I was using Twitter's API, and Twitter, he gives an ID to every single tweet. Like the first tweet was probably one, a second tweet was probably two. And for the longest time, that was fine. And at some point, the number of tweets exceeded the amount that this number that you were talking about. And Twitter's API sends you the ID of the tweet. And then if you try to take that number and display it as a string, it's wrong. It's not the right one. So Twitter's API solve that by just sending the ID as an A secondary property called ID underscore str. They send it as a string, as well. And that's what you need to use. If you want to link to a specific tweet. Cool. Yeah, I thought that was kind of that we had the same problem with syntax. I so so stupid numbers, a podcast that's like podcast 001. Like I thought it was like so cool. numbering our podcasts starting with double zero. And at a certain point, if you want to parse int, you want to parse like a string 001 into number one, then that's fine. But I think once we hit like, Episode 130, or 98, or something like that, like it's stopped, he has been based base 10, or something like that. I remember going through a down a rabbit hole, and I had to redo every single. All right, in real numbers. So don't use leading zeros or big numbers, if you know, you're gonna go over that. Interesting. Those are some lessons from the trenches here. Next, we have here is knowledge coalescing, which is a very interesting name, I thought this is pretty cool says, I like this, you can start to use. So if you want to use the or trick in JavaScript to fall back to a value. So let's say you want to store a variable called score. And you say the score is equal to the user dot score value, or 10. Like that's the default value. And what that will do is it will check if the user has a score value. And if they don't have a score value, it will fall back to 10. That's why we always use the the pipe like pipe pipe is the OR operator in JavaScript. The downside to that is that the pipe operator doesn't check for null or undefined values, it checks for falsy values, which the false values are Scott put you on the spot. What are all the false values? No. undefined? Zero, empty string. False. I think that's it. Wow, yours very cool about that I would have panicked.

13
00:19:18,810 --> 00:23:33,990
So those are all those values equate to false in JavaScript there. That's why we call them false see, they're good enough to be false. But if the user's score was zero, that would actually equate to being a falsie value and then it would just default the score to 10 which is not what you want, right right. Or if somebody is last name was nothing like share it my dad, of course, we use teller from Penn and Teller, yes, and share. We use that to define the difference between null and undefined because tellers last name is null because he explicitly got rid of his last name, and shares last name is undefined didn't have a last name. She's just there's just no, it's never been set she was born here. So if you want to check if something is either null or undefined, and not an empty string, not false and not zero, then you can use this new operator, which is question mark, question mark. And we can say, so the score is equal to the user dot score, question mark, question mark 10, or 10. So if the user score is no or the user score is undefined, then fall back to 10. And I think you should probably start using this in everything as I've certainly hit this bug before where Yeah, anywhere where you're not using numbers or whatever. Yeah, yeah. Yeah. So cool. Pretty cool. That is really cool. And it's funny, it's got a scary name, I think it throws people off. But we got some really nice question marks and new syntax in 2020. And another excellent question mark. syntax is optional chaining, which is something that I've been using for quite a bit through Babel and through whatever. And thankfully, TypeScript added it, because optional chaining is one of the greatest features for me, because typically, what it does is, is if you have a an object with objects inside of it, right, and maybe you're unsure of the data that's coming in. So let's say you have a user who has an address, who has a street name, and maybe that street name, you're not sure if that street name is or you're not sure if the address itself is even there. So if you were to write, user dot address that street name, and address did not exist, the whole thing would break, because you cannot use property of undefined. We've all seen that error, cannot find Street, or cannot use access street of undefined, whatever, we get that error all the time. And so typically, a solution to this would be like, if user and user dot address, then check that user does address that street, right? Whereas with optional chaining, you can just use a question mark here before the.so. It now is user question mark dot address, question mark.st or whatever. And you will no longer have those errors. Because if at any point, any of those properties does not exist, the whole thing is going to short circuit and return an undefined for you, therefore allowing you to do some really nice if statement checking to say like if this question mark dot this question mark dot that exists, then do this thing. And you don't have to worry about your code breaking. I use this constantly, especially with data that you're not sure if it's going to be existing or not. So this is this is a big one. For me. I love the optional chaining unreal, it's like this is probably like the best thing in this entire episode. Yes, this optional chaining, it makes so many places where I've had this, you check for the first property. And if that's there, then you check for the second property. And if that's there, you check for the third property. It's such a pain. And this is already added to Babel preset DNV, which is what Gatsby uses is what next Jes uses. It's what most things use. So you can already start to use this without having to do custom Babel. configs ended in in TypeScript to some Ts people. That's so good. I'm big fan of this. It's so good. What did you do before optional chaining? Because I used primarily lodash has, I don't know if you Yeah,

14
00:23:34,230 --> 00:28:18,540
I would use lodash has or I would just kind of bite and chew and write out the entire and and and and yeah, usually I would just do the secondary because I didn't feel like installing lodash I want to kill the build and install it and restart it. So it just kind of did it. And I'm so happy that this isn't the one thing that I want to save for this as it also works with arrays. And the syntax is a little bit funky. So if you want to check if something is in an array, like you want to check for the second item of an array, you do the array question mark dot square bracket and then the index of it which is weird because you usually don't have to put a dot before you you reference something in an array. But in this case you use both the dot and the square brackets to reference the array value. Yeah, that's interesting. You gave me a great idea by saying kill build I'm going to now write a new alias or something came up Kill Bill did that just just that just deletes the bill kill build a that's pretty down. Kill build should kill it. delete your package lock, delete your node modules, delete your yarn lock. Yeah, re npm install and then started again done. I'm gonna add that to my my code base. That sounds great. Next, we have promised all settled. We talked about this one. We did it entire episode on the new promise methods, there's a couple of new ones. This one is part of ies 2020. This will resolve when all of them are either resolved or rejected, which is different than promised all because promise dot all will resolve. If one of them is canceled or one of them was rejected, then the whole thing is over. If you want to like wait for everything to finish, then you can use promise that all settled. Yeah, that sounds fun. Just another option there for our promises. Next one is going to be dynamic import. Now dynamic import is something that is going to be super useful to a lot of people. What it does is it basically allows you to import a module and return a promise. So instead of importing the module at the top, we're able to do is to import this thing, and then wait for it to load. And then when it loads. All right, this is super useful. And things like code splitting, you can use dynamic imports to say, Alright, I'm going to import this section of my website, but only when it's needed. So when it's needed, then the import happens. Like let's say you have a, I'm gonna use this in a react content. So let's say you have a homepage, and then you have maybe a forward slash tutorials page. And on that forward slash tutorials page, there's a whole bunch of code here, you don't want all that stuff to import and load and whatever at that time. So you can dynamically import it that way, when they click the route, then it then imports that code. It's basically just a perfect improvement. And it can be used for things like tree shaking, and all sorts of nice stuff. So I use this in level up tutorials myself, I don't know if you use dynamic imports at all us. Yeah, I do, especially for like, even just something as simple as like loading in some data, like a list of countries, no need to put that list of countries in your build, just require it with the dynamic import syntax before you go ahead and render out a list of countries in that drop down. And then the second time you render it out that dynamic import, it's promised base, so it will just resolve immediately, because it's been cached and downloaded already. Yeah. Ah, Next up, we have string dot match all and there's another one where I don't see it in here, but it was string dot replace all it's right below it. What's odd. Is that replace all is still in stage three. Oh, is it? Yeah, I've I've already been using it in? Yeah, I actually I had to put a polyfill in node, just to get it. But I love it. Yeah, replace all this stage three, but natural is in. So I don't know why. But yeah. Related replace will replace multiple instances if you use a regex. And that's kind of annoying. Because Yeah, right. If you have like a variable that you want to replace, then you have to write an external regex and pass it in via reference, replace all will allow you just to pass a string of what you want to replace. And then the second value is what you want to replace it with. And then there's no getting into regex. And one last regex that I have to write is very welcomed by me. I know I was doing some regex and this weekend, and I always regret when I have to do it I use I always like almost every single time I don't know if you're familiar with regex 101, I

15
00:28:18,540 --> 00:33:10,290
believe is the site reg x 101 dot com. Let me check that out. Make sure that's the website I'm thinking of Yes, reg x 101 dot com, I always have to go to this site, I paste in my my test strings. And then I write my regular regular my regular my regular in here. Now the cool thing about this site shout out to this site is that they give you a quick little reference here. So if you need to, like look up and search for like, okay, I want to reverse this, or I want to do this or whatever it gives you all that nice little reference there. And of course, great JavaScript Python go Lang. Whatever. So this site is fantastic. I'm a big fan. I use red X or eg x r, it looks like exactly the same thing. It's from grant Skinner who was big in the flash world order script. Yeah, Skinner. But they're so helpful because you can look at like commonly used regex is, oh, this is cool. Yeah. And you can save your own. Because like it's like find everything but numbers or find phone numbers or match URLs, things like that. I like this. I like this. Cool. So next one is going to be a big one. And this is global. This now global this I know there was like a lot of talk around the naming of whatever they should name with global this. This was one that I kind of ignored, even though I shouldn't have ignored because I have so many perfect use cases for this. So global this comes in handy when you're working on code that's going to run in many different places. You could think of it as like, Alright in the browser, you know, the Global's are put on the window, right, but what about node, right? And if you're writing code needs to run on the browser and the window, or I mean, the sorry, the browser and the server, then all of a sudden, you have to do this whole business where you're checking to see if it's the window, or if it's the global or whatever. Now we have access to global this, which basically is a standard way of accessing the global object itself across environments. No more worrying about whether or not the window exists or whatever, you can just use global this rather than window or global or whatever you need to use based on your environment. Fantastic. I'm a, I'm super into this one. Yeah, you're super into this one. I like it. Oh, I'm super into global this one. Next one we have here is module namespace exports. So we've had the syntax, import star as whatever, from a specific utility, but we've never had the similarly named export value. So if you want to import and export something immediately, but you want to do that as like a sub object, you can use this new syntax, which is export star as utils. So basically, sorry, let me read the whole thing, first export star as utils, from utils dot j. s. So what that will do is you import everything from a module, and then you want to export it immediately. We've had that, but the AZ utils part is new, meaning that you can import everything from a module, and then export it out, but as a single named value, which is in this case, utils. Yeah, I don't know. I at first glance, I didn't know if I would use this, but I do use export asterisk from blank a lot. So maybe I would use this as well to sort of bundle up some of these into like, an object, right? Yeah. Interesting. Yeah. Like, I guess, if you want to, like put them in their own? Well, I will see, I will see in like six months if I've ever used it. I don't think I would, but it's there. There's a chance I'm gonna use it. There's there's a there is a definitive chance. All right. Next, we want to talk about something that there is a chance of you using as well. And that's not I'm talking about Freshbooks here is the freshest. Yeah, so it was more on Freshbooks is West Freshbooks is the small business accounting software that makes billing painless. If you want to spend less time on the books, this is a pretty common thing that I hear from people who are running their own business or running their own show for a while. And they say like, I got a job because I'm sick of doing the, like the business side of it. I just want to be a developer. And totally I hear you on that. And the one tool that makes me able to do that is fresh books, cloud accounting, all of your invoices, all of your expenses, all of your time tracking, everything that you need reports of how you're doing Profit and Loss tax summaries, how much do you owe on whatever local tax is in your area? You want to check it out? freshbooks.com for slash syntax 30 day unrestricted free trial, make sure you use syntax in the How did you hear about a section? Thanks so much to Freshbooks for sponsoring.

16
00:33:10,290 --> 00:35:46,440
Awesome. So now we're getting into some browser stuff. I am interested in some of these because I am a little bit less up on the browser things that I am on the JavaScript features. So this first one you have is share, dot share navigation dot share. Now what is what is this about? So like, all of the apps on your phone, they all have like that little arrow where you can share it, you can airdrop it, you can text message it, you can save it to your photos. And that for a specific piece of content is sometimes hard to do in a specific webpage. So navigator dot share is going to be a new API that will allow you to share different pieces of content. It's still experimental, it's still not totally implemented in all the browsers, which is a bit of a bummer. It looks like Safari and Chrome for Android. and iOS are the only ones that support it. And then there's another API, which is navigator can share, which is just a returns a Boolean, whether you can or cannot share it. So did these use the default browser or like that, like the mobile default share menu? Like Is that what it is? It's like popping up the Mobile Share menu? Yeah, like that's, that's the whole thing about navigators, navigators, how you tap into the environment that your website is running on. So navigator, dot get user media gives you access to the camera of your device. navigator. geolocation gives you access to the GPS of the device. So if you want to be able to access the devices, share features. That's what this API is for, and I'm gung ho on these because it means less apps and more fully featured websites that aren't as they're like. Not as good as the app, you know, we see that a lot. So let me another step towards that. I wonder what it does on desktop, I don't do much like desktop, click sharing things, especially in Windows Mac, I have no idea what that looks like To be honest, I actually use it quite a bit to send stuff air, I use airdrop a lot or send something to. There's also like, in sketch, you can share to cloud app. So it'll like automatically upload it and then you don't have to do the whole, like export it and then upload it. So like just basically, it's an open standard of sharing data between two things. And if that works, then though everything sort of just like weaved in a little bit more simply, yeah, so I use it in sketch quite a bit. It's built into OSX. So built in this way.

17
00:35:46,440 --> 00:35:51,600
Unknown: You know, you wouldn't have to do that if you use figma. Because it's all in the cloud by default. So

18
00:35:51,600 --> 00:40:44,150
Wes Bos: there you go, yes, I need to I need to get myself some figma do you got to check out doing a course on forgiveness month. So I'm like super into it right now. They have these like auto layout things where when you type in a button, the button automatically resizes it's all that's so cool. And they just added links into figma documents. So now you can link from one thing to another. So when you click on it links you somewhere else. So you could make links, and then that's going to be great, because it's like you can it's perfect for the design system stuff that I'm doing right now. So yeah, yeah, I've been saying next big design project I have. I'm doing it in figma. You're gonna love it, man. You're gonna love it. It's fantastic. Yeah, I can't wait. This next one is a node API. It's called a sink hooks. And it's it's just, it's an experimental API. So it might not even get anywhere. But as far as I can see, and understand what it is. It's sort of like event listeners for different points in a callbacks life. And so the example that they have is, if you use create server and node or use Fs dot open, that's to open a file these things, they start, they run, and they they close. And if you want to be able to listen for different points in that API's lifecycle, much like react has mount and unmount. And update, you'll be able to hook into those things. So when something connects you can do as far as from reading the docs, that's what I can understand it is. It's likely This is more of a library author thing, but I thought it was kind of interesting to mention as well, totally. And I can keep going with these. I'm interested. I don't know, I don't know any of these. Oh, that's fine. Oh, this is a really cool one is the pipeline operator. Oh, yeah, been around for a long time. So you've got three functions that all do something like you've got a capitalise function, you've got a yell function, and you've got a personalised function or something like that. And if you want to run all of those functions with a piece of content, you have to wrap them around each other. We've all done this before. So if you want to like add, then multiply, mm hmm, then format into into money, then you find yourself wrapping format, money in multiply in AD, right. And if you want to figure out what happens, you have to sort of start in the middle and work your way out to understand what order is happening. So the pipeline operator will allow you just to take a value and pipe that into this is very much like Gulp, remember, gulp piped everything that was the best Yeah, pipe, pipe pipe. So you just take a value, you pipe it into a function, and then you can just chain your piping values one after another. And the syntax for that is pipe, close angle bracket, which is pretty, pretty cool. I hope that this comes in. I don't use it all the time. But I think there's a lot of people that would Yeah, I guess with like map filter, reduce, we already sort of get this piping layout, but that's just because each of them return an array. And then we're able to do that because the prototype has the method on it. But as soon as you get into the situation where you have your own method that's not on the array prototype, then you have to like save it in a variable and then throw it into your own function. So this will allow you to have that nice chaining, map, filter, reduce and then also throw in your own functions, which would be pretty nifty to net D. I want to see where is that? It's stay. I don't know if it is even stages in stage. One proposal. Yeah, I think this has been around for a while. Yeah, two years ago. So I don't know if it'll ever make it but it'd be pretty cool to get it. Yeah, it could just be in limbo like decorators forever and ever. Never is top level await which I think a lot of people are awaiting Top Level await? Oh, yeah, I know, I know. I know, I know. Now, typically, so like, if we want to use a sink await right, then we would have to do so in a function, we have to create an asynchronous function. But like, let's say you have some code that's just running in a module. And you're like, Oh, well, I need this code to be a synchronous, you'd have to use promises you'd have to use. I know, async. Using promises under the hood, you'd have to use callbacks, whatever, it's a little bit different. But now we be able to use await in a file without having it be wrapped in a function simply by declaring. How do you actually declare? Is it just, you just do it? Yeah, you could just use it. And you can use at the top of or anywhere in a

19
00:40:44,150 --> 00:42:08,150
module? Yeah, it's just any like, anywhere, anywhere. I thought you had to declare something to make this happen this way. But it looks like no, it looks like it just does it. Which you could Yes, for things like imports, you could just await an import at the top of file. That's pretty cool. Yeah, that people always said for a long time, like isn't that a foot gun, something you can can hurt yourself for. And their response to this is that top level away, will doesn't block sibling files. So if you are awaiting something inside of a module, other modules that are running are not blocked by that. So you're not actually blocking anything, you're just awaiting that that specific module. Hmm. And there's a couple other things, I will link to the blog post here, I don't think it's totally our wheelhouse to totally explain it all. But check it out. There's a really good post on va dot Dev, that explains why we now have access to even just something like Like I said, like a list of countries, if you need a list of countries before that module runs previously, you'd have to like, export a function that says get countries and then you'd have to await that inside of your loading functions. Now, you can just await it at the top of your module. And obviously, that will take a little bit longer, the first time your module loads, but for a lot of people, that's totally fine to do.

20
00:42:08,630 --> 00:42:10,440
Unknown: Yeah, cool. Hey,

21
00:42:10,440 --> 00:43:14,730
Wes Bos: I like this. So I don't have anything else do you have? Do you have any more? last one I have here is that Safari has finally introduced resize observer. And that's a big one, like I had to pull in a polyfill the other day for Safari. But now that so far, as resize observer, everyone has resize observer. And that's huge for all the cool stuff that we want to do with resize observer. And then also, we talked about this before, but edge now runs on chromium. So that is good for JavaScript, we think, did you see Do you see somebody from Microsoft close, like a super old chromium bug that's like existed for some time? So no, I think ago, everybody was rejoicing about that. I didn't actually know what the bug was. But like, yeah, hey, if that makes everything better than that's, I'm cool with that. Yeah. At least for like me as like the JavaScript developer who wants to use new things. That's good. Yeah. Whether that's good or not for the diversity of the browser landscape, that's a whole nother whole nother thing, but I'm pretty, pretty stoked on it.

22
00:43:15,000 --> 00:43:16,190
Unknown: Yeah, absolutely.

23
00:43:16,670 --> 00:47:49,560
Wes Bos: Should we get into some sick pics, let's get into so sick picks. Do you have any sick picks for us today with I'm gonna pick pick I said pick this a couple years ago. But I often like coming back to things after having them for however long and seeing how they go. And this is the wall oscillating multi tool, otherwise known as a tool that I talked to my wife, I'm like, we need to get the room in here. Yeah, and this is a little tool, you slap a battery in it. And you put like these little blades on the end. And it's the perfect tool for cutting out little pieces of wood or trim or cutting off a nail or flush cutting something. My friend referred to it as the get out of jail free tool mean that when you can't get a tool in a specific place or you need to cut something in a weird angle or I just trimmed a bunch of Spray Foam Insulation in my office. That's fun. And like it was so so handy. For this the little tool that it is you can buy it like hundreds of different kinds of little blades for it on Amazon. I bought like a little blade kit and some of they have like sanding ones and they have metal cutting ones and they have really thin ones for cutting just little pieces of trim off. So check it out. It's called the that you don't have to get the DeWalt one that's just like you buy whatever color batteries you have. All brands have this multi tool, and they all take the same size of blades, which is really good. Oh, that is good. Yeah. All right. I'm going to pick something fun here. It's going to be a code project. That's fun, right? Usually we do all sorts of like actual things, but this is going to be a Code project and that's sapper. I'm sick picking separ. Because I've been using it to do my new website, which is like it's just slapdash just thrown together. By the time you see this, there might even be a little bit better. But I just figured, you know, my previous site was from like, 2013 or something, it still said, I worked in Dearborn, Michigan, it was very out of date. So I was like, You know what, screw this, I'm gonna, I'm just gonna do something new here. I'm just gonna start throwing things together and not care if it really runs, you know, or it looks great or whatever. And sure enough, I decided to pick sapper because I thought it was interesting to try now sapper is sort of the next .js analogous for spelt. And it is really super cool my, my entire site, let's see what my entire site is because, like, you could load this as a note app, or you can do static generation for these things. So my entire site is, let's see, 60 kB total transferred, it loaded in 100 milliseconds. So it's pretty dang quick, pretty small. There's like no framework, the thing functions really nicely. And you get all of the awesome stuff from spelt. Like I'm using the built in spelled animation library to do these really neat transitions on on my pages, which let me tell you, it's such a breath of fresh air do have the animation library baked in, because it's opinionated, it does everything correctly. You don't have to struggle with a whole bunch of different knowledge or interface. everything just works really well. So I'm going to shout out to sapper statically generated me a gorgeous site. And it was a lot of fun to work in. So check it out. If you are interested in building something fast, you need to be fast, and you need to be easy. sappers pretty cool. Awesome. We're going to shamelessly plug our courses now mine are available at Wes bos.com forward slash courses, which hopefully by the time you listen to this, I should have my my new website live. And that's my new course page as well. So check it out. Use coupon code syntax for 10 bucks off any of my courses and they were likely also still be on sale due to the current pandemic situation. Holler Yes. And my courses are at level up tutorials.com forward slash pro sign up to become a pro today and you'll get access to well, just a ton of premium content that I've been releasing over the years. And what I do is I release a new video series every single month, the video series that's coming this month is on design systems within figma. So if you're interested in learning about design systems, if you're a developer and you want to pick up some design knowledge, or check it out, it's going to be really cool. A lot of fun. All right, thanks so much for tuning in and we will catch you on Monday. Please

24
00:47:52,560 --> 00:47:53,340
Unknown: head on over to syntax.fm

25
00:47:53,340 --> 00:48:02,280
for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you liked this show.

