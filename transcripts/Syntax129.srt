1
00:00:00,359 --> 00:00:01,350
Unknown: Monday, Monday,

2
00:00:01,350 --> 00:00:02,580
Monday, open wide

3
00:00:02,580 --> 00:00:06,060
dev fans yet ready to stuff your face with

4
00:00:06,060 --> 00:00:07,590
JavaScript CSS node

5
00:00:07,590 --> 00:00:10,410
module, BBQ Tip Get workflow breakdancing,

6
00:00:10,410 --> 00:00:11,310
soft skill web

7
00:00:11,310 --> 00:00:21,300
development hasty, as crazy as tasty as web development treats coming in hot here is Sarah CUDA, Bob and Scott

8
00:00:23,610 --> 00:00:24,480
Tolinksi ski.

9
00:00:25,950 --> 00:00:41,940
Welcome to syntax and this Monday hasty treat, we are going to be talking all about front end frameworks, and specifically, why the heck you might need one? That's a question that comes up somewhat frequently is, Hey, I don't even understand the purpose of front end frameworks. I

10
00:00:41,940 --> 00:01:04,110
Wes Bos: don't understand why I would absolutely ever need to use this, when I'm perfectly happy in my current workflow. So we're gonna be talking about sort of what they are when you need one when you don't need one. And well, maybe why just using something like jQuery isn't always a great option. So my name is Scott Tolinksi. I'm a full stack developer from Denver, Colorado, and with me, as always, is West boss,

11
00:01:04,170 --> 00:01:04,950
Unknown: everybody.

12
00:01:04,950 --> 00:01:06,090
How's it going? wise?

13
00:01:06,200 --> 00:01:14,640
Wes Bos: I'm doing good. Just got over a huge week of sickness, which is never fun, but I'm feeling much better. And I'm excited to get into today's episode.

14
00:01:14,670 --> 00:01:19,560
Unknown: Yeah, me too. And speaking of that, today's episode is sponsored by Stackbit.

15
00:01:19,620 --> 00:05:53,520
Wes Bos: Yeah, so Stackbit sponsored one of the past episodes, and they're back for a couple more episodes. And Stackbit fits into a kind of a interesting place. That is the jam stack. aural jam stack is the JavaScript API's and markup. And it's this idea that you can make a sort of statically generated website, but still make it interactive via JavaScript, right. And Stackbit is attempting to solve the problem that is themes for all of these different things. So there's lots of site generators out there, Gatsby, Hugo Jekyll, we've got all these different headless CMS is contentful, Sanity, forestry, Netlify, CMS, and Stackbit is attempting to make themes that will work with all of them, which is kind of cool, because usually you think, okay, I'm using WordPress, I need a WordPress theme. But you can pretty much use these with all of the different options that are out there. They are currently in closed beta, but they are inviting syntax listeners to come in, try out the beta, which is pretty cool. I also saw on Twitter the other day, they were I'm not sure if they're doing this again. But they gave away like a gift card to some of the listeners. And some of our syntax listeners got one, which is pretty cool. So some more things about Stackbit. Here, they offer themes with modern web design, the integrated into all the popular tools, generators, headless, headless CMS is build deploy path platforms, they are adding support for more tools on every sprint. And if you're currently using WordPress, or you're new to jam stack, you can build modern best practice websites without having to open the command line. So this is maybe a good spot to sort of get your feet wet with what the jam stack is. So check it out at Stackbit sta ck bi t.com forward slash syntax FM, if you use that URL, you're going to be able to get into the beta. Thanks so much to Stackbit for sponsoring. Cool. So let's get into it a little bit here with the first thing we want to cover is sort of what is a framework, a front end framework, I should say exactly. Anyways, I mean, what the heck are these things. And really what it is is some sort of JavaScript platform that takes care of some of the things that you would typically do server side for you all in the hopes of making your code more organized. So for instance, a front end framework is typically going to do several things, or at least help you along with some of them, such as potentially routing, and maybe not the framework itself, but maybe libraries around the framework, but routing page rendering data fetching and these kind of things that an application especially like a modern application is going to need. So it takes care of all of those things than it does it all within JavaScript. And it does. So on the client side, not the server side. Well, not the server side out of the box, I should say. Yeah, so some examples of these are the big ones right now react Angular view, Ember backbone, there's plenty of them out there. They all cover different scopes of what the cover react doesn't cover a whole lot. They don't have routing, they are kind of getting data fetching as suspense. We talked about that in a previous episode. React is more focused on just rendering. And you sort of have to bring your own libraries that come along with it. Whereas something like Angular has a little bit more batteries included as the word we often say. And then they're a little bit more opinionated as to how you handle these different things. So it's kind of like a weird area where they don't necessarily cover everything, but our hope today is to just explain to you, why would you use one of these instead of just opening up a blank dot html and dot j s file and go from scratch yourself? Yeah. And I should say there is going to be coming As throughout this entirely because all of these frameworks are not the same. You can't compare all of them. Because like you mentioned a minute ago, what they handle and the scope of what they do is all going to be different enough that you could say, Okay, well, you can say they all do routing, they all do rendering, whatever, they all do different things a little bit differently. And in some are less opinionated than others. But at the end of the day, we're interacting with the DOM, and we're doing so with JavaScript. So when do you need one? And when do you not need one? Because, well, I don't think this is going to be controversial, but I tend to overreach for front end frameworks personally. And that might just be because it's where I'm comfortable, and other people may overreach on the other side. So it's certainly definitely a personal preference thing. But I think there's very real benefits be made by using a front end framework most of the time. And of course, there's definitely going to be people who totally disagree with that.

16
00:05:53,640 --> 00:10:51,990
So first thing, when do you need one, I think probably the one of the biggest benefits that you get out of a JavaScript framework is the fact that the link between your JavaScript data, so your variables, and when you put them into the DOM, when you put them inside of a span, or a button or a div or something like that, that link isn't live by default. And one of the things I've taught many beginner JavaScript courses, when people take it, they update a variable and they go, but why didn't the HTML update? Mm hmm. It's interesting seeing people who don't have any experience in that, because they just assume that you update a value and the it should just update on the screen. By default, JavaScript doesn't do that, of course, you can build things that can do this for you. And before you know it, you've built up your own framework. But if a variable updates, you need to re update the DOM. And making a using a framework makes us easy. I always remember just my first time ever using Angular Me too, oh, my going, Oh, because you have like a variable. And then you format that variable. And then maybe you you add something to that variable, and you have that variable, like in like eight different spots throughout your page. And as soon as you update the variable once, everywhere that variable was used, whether directly or indirectly, that piece of the page will rerender. And that is amazing that that that works that way in Angular and react and all of these different frameworks. Yeah. And you could say what you want about, you know, global scope variables, but throwing things on the global scope to see the two way data binding in Angular was maybe like the most influential thing for me in terms of picking up a front end for Mr. Because when I saw that you put you put this on the scope, and it just magically updates everywhere. Oh, you click a toggle box, and you don't have to do anything. And everything just does this for you. Wow. Like, I remember being so impressed by that. And of course, like as you go on, you realize that that's a terrible practice. But I think the initial wow factor of that example, that that Angular set out on their their homepage was really one of the coolest things and most influential in terms of people being impressed by a front end framework when coming from something like jQuery. Another thing I really love about front end frameworks is that they allow for seamless routing and page transitions, things like that, where you are, you click a link, and it doesn't have to go off and fetch a whole nother page, do a full page refresh to grab that new thing, when like half of your page might not be updating anyways, I remember there was this thing called p jacks. Do you remember p Jacks? Yes, yeah. So P Jax was like an AJAX request where it replaced aspects of your site and didn't touch certain other aspects. And I remember the first time I use p, Jax, and my header stayed the same. And only the body of my website changed. I remember being like, Oh, I can do that holy cow. The whole website doesn't need to reload every page link. So front end frameworks, they can take care of your routing and page loading. So that now you don't have a full on new full page refresh every single time you grab a new page. And that allows for things like animated transitions between pages, and it opens up your application to not feel like a website anymore, but actually feel like an application or something that you're used to using on your mobile phones where you click a thing. And you know, the whole mobile app doesn't refresh every time you go to a new page. That would be weird. So this definitely opens the door for having your things feel more APA, like another reason you might need a framework is that you need an opinionated way to handle complexity. And I think this is probably why you like to reach for frameworks and an even more like framework frameworks like things like Meteor where it's even a step further. Yep. Because it's opinionated. And it says do it this way. And a lot of people want that. Because otherwise, you're just going to make a spaghetti mess out of all of the code that you write. And certainly I would do that as well, if if you gave me just an HTML page and a JavaScript file, I sure would write some awful JavaScript trying to make it work. So just like an example of something like this, like let's say you've got a shopping cart, and you add an item to your shopping cart, and then you send an event to the back end and then you update like the number of items that are in your shopping cart like on in a div And then you update the Add to Cart button. Or maybe you switch it to a remove from Cart button. And there's a whole lot going on here, there's like this like data fetching to the back end. And then there's the display level. And often it's it's really easy to write code where like how it updates in the DOM. And this was a problem with a lot of jQuery is that the UI was so tightly bound to the functionality. And then as soon as you wanted to, like change the UI, or maybe like necessarily, like, take a piece of that note, it became very brittle. And you find yourself just writing the same sort of function over again, but for a different part of the UI. Same thing with like event handlers, if you add an item to the cart, and you need to switch it to the Remove, they need to unbind the add to cart function, and then rebind, that button, and that stuff comes for free. And it's very simple with a framework, whereas doing it yourself in just vanilla JavaScript can be a little bit difficult.

17
00:10:52,020 --> 00:15:19,440
Yeah, and there's definitely a certain subset of developers who are going to hear the spaghetti code argument. And they're going to say, I don't understand what that even means, like, I don't understand spaghetti code. And to me, it feels like the same as the the callback first promises sort of thing, where once you're in it, you know it. Because if you haven't experienced the spaghetti code thing of writing an application that needs to do a whole lot, and the next thing, you know, you have a billion JavaScript functions, and you're trying to maintain scope and your files, and you're trying to maintain access between all of your different things, it becomes very real very quickly, why you might need one of these things. And you might say, Ah, I had no idea it would get this bad. But if you've never written code like that, that is that complex, or needing to be that complex, then you might say, Well, I don't have spaghetti code. So I don't see the benefit of preventing spaghetti code. But it's definitely one of those things that once you're in it, you're going to feel it, and you're going to understand it. Now, this is going to be somewhat, I don't think this is going to be that controversial. This is going to be a little spicy bit here. But but the the spicy bit is that I have not built a site without a front end framework since learning Angular. And if that gives me enemies, then so be it. Because honestly, if you say you need a static site, I'm faster at building a Gatsby site than I am building just a straight up HTML site. Because once you account for things like CSS preprocessors, and supporting old functionality, I'm just straight up faster with Gatsby and the site that I produce is faster. And the experience for the user is better. Because I get things like pre loading, I get things like front end client side routing, rather than just straight up page refreshes. And the sites are better. So yeah, so be it, I pretty much picking up a front end framework almost all the time. Now, interesting. I've definitely built, I would say 70% of my stuff. 80% of my stuff is done with frameworks. And then the other 20% is just with vanilla JavaScript. I'm certainly don't shy away, I usually I will approach something with can I build this with with vanilla first? And then I'll say, okay, no, I'm gonna run into these issues with whether it's data fetching or binding or whatever. And then I'll reach for a framework. But if I am, we talked about just side projects a couple of weeks ago, if I'm doing that, I've got a couple, I've got a couple hours to kill, definitely reaching for next jazz, or Gatsby or something like that. Because of the the Quick, quick prototyping, the access to all of the different libraries that are out there, making your life easier, you're just faster I think I am, at least when I'm able to reach for a framework, you reach for all these different battle tested libraries that are done. They've been checked for security. They're in use and thousands of different web sites, they're done for they've been checked for perf. They have all the little edge case bugs, you don't have to find those bugs over and over again, because they've already been found out, hopefully, yeah, and there's that there's an old joke that's like you either build or you either use a front end framework, or you end up building one yourself, by the time you're done. For the people who are totally anti front end framework. I think all of these things, they start to fade away, you have some front end frameworks, one that we didn't mention at the beginning, which we probably should have, which is spelt, spelt actually disappears as you use it when like it disappears at compile time. So there's definitely options there. For those of you who are thinking, well, I don't want that burden of all of that JavaScript coming down the line with the application, because there's certainly downsides to using front end framework. So let's get into when you don't need to use a front end framework. Now, I think you don't always need to use the front end framework. If you're on a CMS based site like WordPress, Drupal, those sort of things. I've done a few WordPress headless sites know where I've used Gatsby on the front end and WordPress on the back end for clients. And let me tell you, it's not the smoothest experience and it's at no fault of Gatsby react or any of that stuff. It's just that you, you know have this disconnect where WordPress sort of has all the plugins. It makes it really easy to throw these plugins in here for benefits or detriments of the website. But the experience is a little bit different, where everything just becomes a little harder hosting, you got to have two hosting providers or set up the hosting in a more custom way. So there might be, it might be beneficial for you to just pick up straight up WordPress or Drupal That said, the site's probably going to be slower and feel slower as a result of it.

18
00:15:19,800 --> 00:17:31,290
I think you also don't need a framework, if you just need a small to medium amount of JavaScript. So whether maybe the website has a couple models on it, maybe just a slide show, maybe a form Submit. So whether you're just coding those all from scratch, or you're just reaching for a vanilla JavaScript library, I think that's totally fine. It might be unnecessary to load the entire framework over the line when you're just doing some very, very simple stuff where you're opening and closing, especially on like a hard refresh based websites where you go from one page to another. In that case, you almost never have to actually listen for for events, because when you go to another page, all those events are lost. And you don't have to clean up that's just very much like the the jQuery days. So I think that there still are lots of lots of good websites like that. And honestly, if I was doing this, I would just write it in vanilla JavaScript. And then at a certain point, you probably realize, okay, this feature is getting a little bit out of hand, I think I'll probably now convert it. If you've written your your functions in such a nice way, you should be able to take your functions and move them into one of these frameworks as at the end of the day, it's trademarked just JavaScript, right? Yeah, just JavaScript, tm. So another one of these is going to be updating a new product or an older project, right? So if you have a project that you've been given, and let's say that this thing is using jQuery already, or maybe it's just some code, I wouldn't necessarily unless you have a decent budget for this, I wouldn't touch it to do a major rewrite into front end framework or anything like that. Unless, of course, if you have a large budget, your client is asking for that kind of functionality or asking for that kind of thing, then you might want to look at something. But again, if it's just a WordPress site, you've been given the task of adding some new CSS layer to it or something like that. Don't rewrite that in the front end framework. There's absolutely no reason to do that. All right, last slide we have here is something that we've we've covered this before. And I actually saw it on Reddit yesterday. And it's kind of this done to death. But the question is, why can't I just use jQuery? We have a whole episode on is jQuery dead? Yeah. And the answer is no. But it's, it's retired, and it's on vacation. It's down in Florida right now for March Break.

19
00:17:32,760 --> 00:17:35,810
Unknown: It's avoiding the spring berry beaches over there. Yeah,

20
00:17:35,910 --> 00:19:13,800
Wes Bos: yes. So why can't you just use jQuery, the browser has pretty much caught up with everything that jQuery can do. So it's not that jQuery got old, it's that the browser said, Hmm, that's a good idea, we should just do that in in vanilla JavaScript. So the DOM API's that jQuery provided are pretty much all available, there is a way to do everything that you could do in jQuery in vanilla JavaScript these days. So it's just not necessary to load it. If if you if you aren't reaching for a framework, I would just reach for vanilla JavaScript. And that way, you're going to get the quickest site load that you could possibly have. Yeah, and at the end of the day is a big reason. But you know, frameworks provide really a framework, it provides a way to do things, it provides just structure to your application. And like we said, with the spaghetti code thing, once you're in it, and you have an application that becomes brittle and unmaintainable. Because of all the layers that have involved, the framework is going to provide you layers of things that you just don't have, if you unless you're essentially writing your own way of doing a framework and organizes your code. And as your project grows and grows and grows, you're probably going to need that level of organization. Yeah, I agree. Like I said this before, but I'll say it again, I don't think that I could write a really clean, there are people out there that have the very, like approach to a project that they can do it in such a way that it's all clean. And you it's well thought out. And it's designed beautifully. And I just don't think that I'm that good of a developer, I'd much rather just do it the React way or just be told, what is the convention for approaching and in writing this type of code?

21
00:19:13,830 --> 00:19:19,770
Unknown: Yeah, I don't really want to invent that stuff myself. I'd rather just somebody told me how to do it. Let me do it that way.

22
00:19:19,920 --> 00:20:06,480
Wes Bos: All right. I think that's it for today. You have anything else to add? I don't have anything else to add. Again, I think your opinions of this in terms of if you want to use a front end framework or not. It's all up to you, whatever your faston, whatever you can build sites in whatever you can produce something that is fulfills the needs of your client, and makes everybody happy is what you want to use. And again, like I said, I am really fast with Gatsby now I can build really fast efficient sites with Gatsby. But if you can't, and you're better with something else, you know, pick up what you're good at, but maybe experiment with some of the stuff and see what maybe works for you in a different way. But this is why you might want to use a front end framework and why You need one in the first place. Awesome. Thanks for tuning in. We will catch you on Wednesday, whose face

23
00:20:08,330 --> 00:20:18,150
Unknown: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

