1
00:00:01,319 --> 00:00:03,660
Announcer: You're listening to syntax the podcast with

2
00:00:03,660 --> 00:00:04,590
Unknown: the tastiest web

3
00:00:04,590 --> 00:00:10,530
development treats out there. strap yourself in and get ready. Here is Scott, ski and West boss.

4
00:00:10,559 --> 00:01:33,150
Wes Bos: Hello everybody and welcome to a syntax. This is the podcast with the tastiest web development treats. Today we're gonna be talking all about accessibility. This has been a highly requested topic. And I think it's probably one topic people have actually come up to me in person at conferences most and asked us to do a podcast on so I'm really excited about it. We're going to cover all the ins and outs of accessibility and I think most importantly, how you can make your apps and websites more accessible. Starting today with me as always is Scott to Lynskey. Hey, what's up, what's up, what's up, I'm doing good. And now you just came back from vacation. So we're gonna see how this goes. Usually when we come back from vacations, we have to have lots of cuts in the hobby. So I think this one should be pretty good. I'm feeling good. I was telling Wes, I just brewed a batch of cold brew. And this is like my first time doing it. And I so I just kind of eyeballed the ratios, I just said, screw it, and just throw some coffee in a cup. And then so I don't really know how I would it's like four to one concentrated so it's concentrated. But I have no idea how concentrated so I am solely sipping a glass of concentrated cold here. So Scott starts going off the rails and starts shelling. It starts yelling, accessibility, accessibility, accessibility, let you know why.

5
00:01:33,629 --> 00:01:44,880
Unknown: Exactly. So we're gonna see how this goes I, I couldn't progressively get more intense as this episode goes. That's exciting. That's all part of the process here. So

6
00:01:44,909 --> 00:06:33,360
Wes Bos: this episode is sponsored by cloudinary, who makes they make image hosting, video hosting, transforming, and all sorts of just amazing stuff, super duper easy. As well as dq systems, dq systems is the perfect, they're the perfect sponsor for this episode, because they are all about accessibility, you go to dq.com, that's dqe.com can get a brief little overview of what they do. But we're gonna be diving into both of these sponsors, as this episode goes on. There's a lot of great stuff that we're gonna we're going to dive into and want to thank dq and cloudinary, for sponsoring this episode on accessibility. Awesome. So I also want to give a huge thanks to everybody on Twitter who sort of helped shape up this episode. Because I'm not an expert. When it comes to accessibility, I think I know quite a bit, I've done a couple websites that are legally required to be accessible by the government. Because in Ontario, now, by law, if you make a new or significantly refreshed public website is the words, and you have a company of 50 or more employees, or you are a public sector organization, I think that includes banks as well, which are clearly more than 50 employees, your website must be accessible to anyone who is visiting it so nice. But yeah, it's kind of interesting to see that I'm not an expert. But I put out a call on Twitter, as I often will do before an episode like this. And it was just a trove of amazing information. So if you while you're listening to us, after you listen to this, make sure you check out the link to that Twitter thread just because there's tons of good information and also, like, follow some of the people that reply to it, because it's helpful to be following some of the experts in this. Yeah. Which I think is a good note to start this on is that Wes and I are not experts in the stability. So we're gonna we're gonna do our best here to convey everything as I don't know, as accurate as possible here, but neither of us. I think we we both have training, we both use accessibility features. But you're not you're not a accessibility or now AI expert are us. No, but I think that that's important, because I don't think that you have to be an accessibility expert, because all of us are making websites at the end of the day. And all of us should know enough about accessibility in order to make them accessible to anyone who wants to come and use it right. So obviously, there's always going to be experts in these areas that really know the nitty gritty of it. But I think that it's not something you should sort of stand back from and let the experts take over because it's all of our jobs at the end of the day to make websites accessible for absolutely every single one. And I think like I have this kind of feeling in our industry around accessibility and testing. Both of those areas I think people are a little bit afraid of because you don't want to come off as somebody who's like giving the middle finger to people with someone with a disability. And you also it testing is people are a little bit scared of it because like the repercussions of not having an accessible website or the repercussions of not having a well tested applications are they're very real and they could they could lead to I don't know big downside you can get sued in it in Ontario. If you If you don't have it, right, so it's a big, a big thing to have. But so that's kind of what we're going at today. One little tweet that I got from Amy Carney she tweeted out, I like to encourage people to make changes today doesn't have to be 100% make it more accessible than yesterday, I think that's the perfect idea to encapsulate This episode is that we're all just going to be learning a whole bunch of stuff in this episode. And we just want to make our websites more accessible than it is yesterday. And it doesn't absolutely need to be perfect. Before you push anything live. Yeah, and hopefully, these tools, tips, sort of little things we give you here will inspire you to go make those changes, because a lot of this stuff is is pretty easy to implement in it. And it doesn't take enough of your time where you're going to have to like groan about you know, taking the time to do it. This is stuff that you can add incrementally. Like we said, this stuff you can add and all at once, but at the end of the day, it's not hard. It's just something that takes effort, you know, it takes a little bit of your time. Alright, so let's start off with the way that this episode is going to go is we're going to talk about the basics of accessibility. And then we're going to go through what I like to call easy wins. These are just things that you can do to your website to make sure that you're not accidentally or on purpose, making your application hard to use for anyone. But there's a whole bunch of tools we can use are good for testing accessibility, whatnot. And then we have some resources. And we're going to end it off on just some some ideas. So what is accessibility? I think I was on the W three.org. website. And there's a quote from Tim berners Lee, who is like literally the guy who made the internet.

7
00:06:34,770 --> 00:10:43,289
And I like this quote a lot. It says the web is fundamentally designed to work for all people, whatever their hardware, software, language, location or ability. When the web meets this goal it is it is accessible to people with a diverse range of hearing, movement, sight and cognitive ability. Thus, the impact of a disability is radically changed on the web. Because the web removes barriers. It's so true, right? Like, because there's a lot of things, just the rest of the world that are a huge barrier, whether it's a physical barrier, or whether it's any other type of barrier that someone would have. And those are totally blown down by the internet. So it removes those barriers to communication interaction that many people face in the physical world. However, when websites, applications, technologies, or tools are badly designed, they can create barriers that exclude people from using the web. So I think I love that that's a kind of a nice little. Yeah, thing. It's not It's not about people think like, Oh, you know, make sure that your website is accessible by buying people. It's just that absolutely everybody should be able to use your website or your web application. Yeah. I mean, who wants to exclude anyone from their audience intentionally? And whether or not you are doing it intentionally by you know, not doing these things, when you know, you should or, you know, just ignoring this entirely or whatever, I think you want everyone who wants to view your content to be able to view it. And that at the end of the day is, you know, really what's important. You know, I actually funny, I was looking at the Li, like, Where did ally come from? Because he had a one one y. And I, for some reason, I don't know, like, I don't know the exact history, or if the word Li was come up with first I guess it probably didn't. But either way, like so the a 11. Y stands for accessibility, where the a and then the next 11 letters, and then the Y so I always just thought it was like, Oh, well, it's like leet leet speak or something for ally. Yeah, I thought that too. For years. Yeah. So it really has that meaning where it's a Hey, accessibility is a long word. It's easier to write a 11. Why? And then you can call it ally two is a nice little catchy thing. So really, ally is just the term for assist ability, right? Yeah, I love that sort of like shorthand Andreessen Horowitz, which is a venture capital firm, they use a 16 Z, because it's Andreessen Horowitz. And there's 16 letters between the A and the C. Yeah, take something like that. And just make it like super duper easy and nice and shareable. I mean, allies a great little, little thing for that. So you've probably seen that a 11. Why around anytime anyone's talking about accessibility. And that's really what it comes down to is that it just means accessibility. And so, you know, we've been talking a little bit about this disability itself, you know, allowing anyone to use your stuff. And particularly, it has to do with like people who have disabilities really, right, because people with disabilities are mainly going to be the people who are having trouble using your site if you're not focused on these accessibility features. So let's talk a little bit about what are the types of disabilities there are? And maybe this gives some examples because sometimes, some of them are obvious, but some of them are maybe less obvious. Yeah. So there's this really great website from valtech design. It's actually medium article, and it's called inclusive design. And they took a little screenshot from Microsoft's inclusive design toolkit. They actually Line the three different types of disabilities, there's permanent disabilities, which is you could have one arm or you could be blind, right? There's a temporary disabilities, which is you could have an arm injury or cataract, which I guess will be solved and their situational disabilities where you could be a new parent, or a distracted driver, right? So there's, you got to think about, it's not just about I think a lot of the examples that we use are our blind users. And I think that's a really important part to, to pay attention to. But there's a whole other aspect of different types of people in different situations, whether it's permanent, temporary, situational, that need to be paid attention to. Yeah, yeah.

8
00:10:43,289 --> 00:14:22,679
I mean, a lot of these, you know, the the situation, or temporary ones are probably stuff that most people in their lives have experienced at some point. So they're very easy to understand. I mean, now, a lot of people aren't ever going to have one arm or be blind or deaf, but, you know, I tore a ligament in my thumb, and I was in a cast for, you know, six months, and I couldn't use my left hand and being left handed I you know, that's one of those things that you go through in life, and you figure out how to do it. And that certainly is like a little minor thing there is even a situational West. I know, you know, with your your two kids when I when Landon was born, I was trying to get some work done on the on the late night, yeah, whenever you could. And here he is sleeping in your arms, and you got your left hand typing, and swiping and doing all that stuff. And you learn how how different it is to try to navigate these things when you're trying to harness a sleeping baby. Some of these good examples, I like this A distracted driver. As an example here for situational two. I didn't I didn't even think about that. But you can think of something like I don't know, if iOS has this. There's the like in Council entertainment systems in cars. And you can get it with iOS or Android Auto. Well, Android, the phone has an Android Auto app that is the exact same as that in Council thing. So if you have your phone on a, like a clip or something, and you have Android Auto up, everything is huge. The buttons are huge. The text is huge. It makes it really easy. Like if you want to just go to a map or click the microphone to talk into your phone, it makes everything at a glance. So you don't have to go and use your phone. And you can even set it. So every time you're in your phone, Android Auto automatically pops up. And that way you have those features that are right in there easy to use. I think that's a great example of a stability that I've never even thought of to be honest. Yeah, like I have a really good example of that. So with iOS, there's CarPlay. But I have a 2015 BMW, and it's not in that. And it costs like three grand to upgrade the whole system. So you can't put CarPlay on your phone. I don't think that there is no it's it's something that hooks up and it mirrors your display. Yeah, from your phone to the car, they should do that. And then they're really helped. There's a bunch of apps. Yeah, I wish I had that. Because like one example is overcast, the podcast app that I have used to be able to tap a podcast and it would start playing. And that was great. Because when you have it on the dock, and you're driving, and you want to just tap it and start playing. But now what they did is they when you tap it, it brings you to the information and then you have to find the little play button, and then and then scroll down and then tap that. And I thought like that's kind of negligent because people everybody's using this in their car. Yeah, not everyone has CarPlay. And it was really frustrating that he would not the Marco arment he would not introduce a like a setting to play it when you tap it right, because I found that to be distracting when I was trying to drive and flip on a new podcast. Yeah, there's nothing worse than trying to find a new podcast while you're driving. You're like, like, I should not be doing this right now. I'm just gonna hit play on something I don't want to listen to right now. Anyways, just just to have something on. Okay, so those are, those are some good examples of different types of disabilities, obviously, you know, we spent some time on the situational and temporary but permanent ones. I mean, there's all sorts of them, you know, like color blindness, Deaf blindness, all that sort of stuff, right? Yeah, yeah. So so those are, those are the types of things that we're going to be needing to make our sites accessible for. And so I like how you wrote in our notes, who is this for question mark, and then everyone? Yeah, it's for everyone. Everyone, at some point will have some sort of temporary or situational disability, and many people will have permanent disabilities. And we want to we will do we don't want to exclude those people from our web experiences.

9
00:14:22,740 --> 00:18:41,940
Yeah. Especially because almost all of this stuff with the exception of I think some of the audio and video transcription stuff, although we'll talk about that in just a second is free like minutes to implement and it's not like a huge thing that you need to undertake and spend weeks and sprints and Sprint's on it's especially if you if you think about the stuff beforehand, it should just be an extra, oh, what was the ARIA attribute for this? Or, oh, what's the best way to approach a pop up to make it accessible, it should be an extra couple minutes here and there to make sure that this stuff works. And I think that going those extra couple of minutes is is really, really important for making sure that your website accessible for everyone. So let's go into like the how, how do you code up a website that is accessible. And I think like the very basic, most easy win that you can have is to write good code and use semantic elements and clean HTML. So when you start to mock up your document, it's important that you use obviously paragraph tags for text, it's important that you use images for actual images of things. I know a lot of people like to use background images instead. And they'll have like a div and they'll put a background image on that. And they'll think that that's, that's, you can call it a day. But at the end of the day, background images are not for actual images, that background images are for things like patterns and design, right, decorate an actual content on the page. Yeah, which is an image tag right and using all of your heading tags, so for you likely will have one h1 tag on the page and a couple h2 tags, like if you think back to when you learn Microsoft Word, you would make sure that you use appropriate headings, paragraph tags, and all of the different things that Microsoft Word gave you. That's the same on the web, you need to whenever you put some content on the page, you must think to yourself, what is the most semantic element that I can use to represent this content on the screen. And not only is that going to make it more accessible, but it's also going to be really good for SEO. And it's also going to make your job of writing CSS to style your content much better, as well. Yeah. So on that same note, too, you're gonna want to respect the hierarchy of these headings, too. Because that hierarchy is directly like translated via screen readers, I was listening to something that was saying, Let basically, if it approaches a heading like a screen reader approaches a heading, you'll give the user the option to skip that content entirely. So imagine you add an incorrect use of headings and your heading wasn't like encapsulating the content there. And then the user who's using a screen reader might think it is and they want to skip that content, maybe they're skipping a whole bunch of extra stuff, just because you didn't have the proper hierarchy of head like heading tags, which is, it's a pretty easy thing to just plan out. Right, take a second to point it out. Another thing on that on that regard, because we mentioned images, and so the distinction there is like decorative verse, actual content, images, right. So you're going to want to not use background images for content images, because you cannot give them all tags. And alt tag is really how these screen readers let these users know what the image is and whether or not they should care about the content, right. But what happens if like, people use an image and it's decorative, maybe you have like a position absolute or something and you're using an image tag for a decorative item, if you have an alt tag with an empty string in it, just like no space, empty string, it'll let the screen reader know that that's purely decorative, and it's going to ignore that entirely. So again, you don't you probably like, if you have like a wallpaper background or something, and it's a div, you probably don't want this screen reader to be like wallpaper background, you know, because that is just like extraneous, they just don't need to know about that. Another thing with images is obviously you need to have alt text on all of your images. So the two things on every image that are absolutely required are obviously the source and the alt, one thing I learned recently is that alt doesn't need, like, if you have a image of a dog, your alt tag doesn't need to say picture of a dog. It just needs to say dog because the screen reader knows that it is a picture. So it's unnecessary to put that in there. And that's I flipped on the React es lint, a 11 why rules? Yes. And that's one thing that it told me it's unnecessary to put picture of, in front of the actual description of it.

10
00:18:42,180 --> 00:23:34,950
Yeah, I'm gonna I'm gonna say that that's, that's a super easy when I have that down here is is to use the ESLint rules for accessibility, the Li SP es lint rules, if you're using react or whatever, because, hey, it just lets you know of any potential issues. Like I was using links as buttons occasionally and and every single time would be like, what are you doing with these button links, like you'd this needs to be a button and stuff like that I almost didn't even think about while I was coding. And so like, it's just really, it's an easy win to turn those things on. It's not like that the you can't just do that and call it a day. Those aren't like the end all be all, but it's it really makes it a lot easier if you have those es lint rules yelling at you about stuff. Totally, let's explain the button versus link thing real quick. Because this is something myself I've done for years and doing it incorrectly where you'll do like a link that goes to a ref pound it goes to nothing. And then and then when you use JavaScript to listen for a click on that, and then when someone clicks that you you do your action, right. And the rule is, is if it goes somewhere, if it has a URL, then it's an anchor link, it's in a tag. And if it doesn't go anywhere, but it just performs an action on the page, then you should use a button and the reason why people often reach for the link that does nothing is because the button has default styles and at the pain to, to unstyled it right? So what most people will do is you'll just get like a class of text button. And just make sure that your button that has that class looks exactly the same way as your anchor links. That's something I did my upcoming react course, the entire navigation is anchor links, except for the button to open the cart, but they need to look exactly the same. So you need to make sure that we're styling the anchor links and the buttons in the nav the exact same way. Yeah, absolutely. Along that we also make sure you're using your html5 input. So don't just use a div on absolutely everything. We have more semantic elements, articles, section header footer aside, all of these tags that we have, they don't do anything special for your HTML, but they are more descriptive as to what the content is inside of them. And as the benefit, you get a enter, you write better CSS and you get an SEO boost on that as well. Yeah, free easy wins on the same regard is proper inputs, right, we have Long gone are the days where we just have a text input and a text area and a submit input. Like we have lots of inputs now from email, to password, to phone to any of that sort of stuff, we have inputs that will match what you're trying to do. And not only those inputs are going to give a more native a visual experience to folks who aren't disabled. But it's also going to be of a better experience for anyone who has these disabilities because your operating system knows how to handle those in those proper situations. Right. these are these are default built in things. So make sure you are using the proper input type for whatever you're using. And again, this is a usability thing that you should have in your your app. Anyways. Next one we have here is the CSS order property. So Flexbox and CSS Grid allow you to rearrange elements on the page. But one downside to that is that it will not like let's say you have a sentence. And then you have another sentence underneath that you want to switch them visually to you, it will show you those sentences in the order and you will read them in that order. However, if you were to either use your select, they tried to select the text with your cursor, or you're using a screen reader, the order is not respected. So only use Flexbox. And grid order property when you want to visually change something and it doesn't affect the actual source order of the content. So you don't want to confuse people. Because at the end of the day, if you were to strip all of the CSS off the page, the content should still stand by itself and still be readable and accessible. Yeah, another good one here is color usage. And this is one that some designers have some problems with, because they like they're like rays on whites and stuff like that. But a color usage for a whole host of reasons. b we have people that are colorblind, I actually worked with a, I worked with a dev at Ford, who was colorblind. And oddly enough, his like, I don't know, I never got around to asking him exactly how he did this. But his colors were always 100% accurate to how they should be, even though he was working with colors that he was blind to. I know, he's just pulling values and stuff like that. But it was still like there was never any weird issues, because he was always on point about it. But I never had any issues where he was, like using the wrong color for something or something I know, it's all it's all hex values and whatever he's pulling from the document, but I was really impressed with his ability to translate the colors, you know, that maybe you had a harder time seeing the difference between but because of color blindness, you don't want to use things that could be potentially ambiguous. I think there's different types of color blindness, right? Do you know the different types? Or do you have that offhand?

11
00:23:35,160 --> 00:27:28,500
I don't I just All I know is my dad can't see purple or something like that. It's probably something worth looking into. Because I ran a test on the syntax website. And it didn't give me any I'm not sure if it checks color blindness or not. But it does check contrast, which is a huge one. Because if you look on the syntax website, all the episode numbers are in a light gray overtop of a lighter gray, and it looks sweet but it called me out on that because it's not enough contrast for for people to be able to see it. There was a like there was a period in time before people were really caring about disability as much as they are now. When like light rays on white or light graze on gray. We're so in and everyone is Yeah, what are you doing like this is this is impossible to read for low contrast. So yeah, you want to do a contrast checker on your colors. There's a billion contrast checkers online so you can check your colors for contrast, a lot of some of the tools that we give you later on are also going to let you know whether or not your colors are able to eat work well together and that regard. So color usage, whether it's for colorblindness or people who have sight issues in general again, this contrast are going to make this way way way way better. Yeah, there's that in OSX I only know this because a friend of the shy I was thinking we should start saying friend of the show a little bit more. Let's do it friend of the show. He goes online Henry have it He said, I don't know if he does this anymore. But he I think he used to go like one day a week on grayscale mode. Because there's a lot of people whether they get headaches or for whatever reason, they don't want color on their screen. So they turn their Mac onto grayscale mode, and then just run it. And I think that's really cool. If you could spend like one day even just like doing it one day and once and trying to see what is the web like in grayscale motor and what is the world like the I think you you would be tuned to a lot more little little things that bug you. And then when you're building your next website, you can take those into account. Yeah, I actually had my phone on grayscale for a little while when I was trying to use it less because people say that's a great way to use your phone, let's see return on grayscale. And it was really interesting. I got really used to it after a little while. But uh, that's an easy thing to do. It's easy to turn it on and just turn off any sort of saturation whatsoever on your display. But you know, what else is really super easy is using cloudinary to host your images. But Wes and I both use cloudinary. And it is a brilliant service. I think it's one of those. It's one of those things that when people try after listening to syntax, it's like Netlify, when people tried it, everyone wants to tweet us and tell us how much they love it if they've never used it. And cloudinary is exactly like one of those things, because everyone who tries cloudinary is just blown away by how easy it is. Yeah, so you can use cloudinary to host all of your images, and actually all of your videos as well. So if you have an application, and you want to host all of your images somewhere else, like go back to the CDN episode, I think that's actually how cloudinary stumbled upon us was we had an episode on using CD ends. And Scott said he uses this thing called Cloud Neri. I had never heard of it. And I actually switched over my websites to using cloudinary. Because obviously, they have a whole API where you can upload images, they have a whole entire client side API, which you can just upload, you don't need to have a back end to actually upload these images, they have this like really cool URL, where you can just put the URL in front of your existing images. And it will sort of suck them up and then host them on their own CDN. So you're not paying for the bandwidth yourself, you can still keep the images in your like repo, if you'd like to do that. One of my favorite features of cloudinary is the you can set the quality and the format of your images when you upload them. And you can set the quality and the format to auto and what it will do is it will automatically like it'll like kind of like compress it as much as it possibly can. It'll do its best job. And then the format is really cool. Because on Chrome, you can use web p, which is this new format.

12
00:27:28,950 --> 00:27:30,570
Unknown: Small to Yeah, it's so

13
00:27:30,570 --> 00:27:56,400
Wes Bos: it's it's a significant savings. And if a huge portion of your website users are using Chrome, then you can web P and it will detect the user agent of the browser and then send back either a web p or PNG and I just love that because like you know, you get into that weird space where like should this be a PNG or a JPEG and you're like it should be a PNG but it's oddly smaller if I save it as a JPEG and I don't know figure it out for

14
00:27:56,400 --> 00:28:03,180
Unknown: me right? Now for me, I haven't figured it out for me is one of my favorite things. I guess I don't care. I don't just figure it out for me, please.

15
00:28:03,270 --> 00:31:53,970
Wes Bos: One other thing. And this is actually why cloudinary is sponsoring this episode, we usually schedule our episodes months ahead of time for sponsors, we don't know what they're going to be. But for some reason, Scott and I totally forgot to schedule sponsors for this, this episode. And cloudinary said, Hey, we are actually putting out a blog post on accessibility, it'd be really cool to be able to sponsor that episode. And it just so worked out. So they just published this blog post called Making media accessible how to automatically generate alt text for images, which is amazing, because we just talked about all text and using machine learning now you can upload your images to cloud Neri and then it will look at the photo and decide what it is. And so they have an example here the upload photo of some people biking and it will spit back and alt text bicycles racing on a city street, which is so cool. There's some code examples on Yeah, I can't believe it. Like, I'm also gonna be talking about the YouTube auto transcripts in just a second. And this stuff is getting really good. And it's just like you really have less and less excuses at the end of the day. this blog post here has examples in Ruby, PHP, Python node, and Java is pretty pretty nifty. You should check it out at cloudinary comm we'll put the link to their blog posts in the show notes. So thanks so much to them for sponsoring. Alright, next up, we're gonna talk about something called Aria dash roles. And in general, you will be able to write your entire website in good clean semantic HTML, that's the absolute best thing you can do is just to code your website up in and clean paragraph tags and heading tags and image tags and unordered and ordered lists. And the idea is if you use clean HTML and use the proper elements, you're automatically accessible to anyone who wants to actually use it. However, that's not the in a perfect world. That would work but there's a lot of like, situations where mantic HTML sort of falls flat And you don't have specific elements for it's generally when you want to build a custom interface. So, of course, each HTML has an input with a type of slider or range, and you get like a little slider, right? But it just has one little dot, it's hard to style. And it's not a it's not as flexible as you would wish. You look at something like the jQuery UI slider, right. So often you find yourself writing these custom inputs, whether it's custom checkboxes, or, or pop up dialogues, or any non standard controls that come along. And if you're using like divs, and spans and allies, and all just a whole bunch of stuff to make a custom interface, there's no way a screen reader is going to be able to understand what's going on is the pop up currently open. What's the lower limit and the upper limit of the slider like if someone's searching for a flight, it's just not able to understand these things. And this is where you need to really make sure that your your interfaces are accessible. So that's where Aria roles come in. There's a whole bunch of ARIA dash roles that you can put on. So there is one specific one that I like to use a lot is Aria dash expanded. So if you're using like if you're building like a navigation for someone, and you want to show that this navigation is currently open, it's like a maybe a drop down menu, or maybe a mobile nebbia that like accordions open and close, you need to tell the user that it's currently open or close. So you can use the ARIA dash expanded is true or false. And myself, I like to use these Aria roles as my selectors in CSS. So instead of giving it a class of nav dash opened, just give it an aria attribute of ARIA Aria expanded equals true. And then in CSS, you can use an attribute selector to select it when it's open. And then and then style it and open it. And that's kind of like accessibility first. I'm a big fan of that.

16
00:31:54,000 --> 00:31:58,140
Unknown: Yeah. And that's one less thing you have to type, then you don't have to have a class on that thing.

17
00:31:58,140 --> 00:36:50,310
Wes Bos: Yeah, like, that's kind of how I think about it. Like, I don't want to have to like manage both the class and Aria. So if I have to put an aria on it, then I'll just use that to do all my CSS, there's a really nice article from the Google Developers website that shows like, sometimes if you don't do a custom checkbox, you can use the ARIA dash checked. Another one that I use fairly often is the ARIA label. And that is, if you by default, a screen reader is just going to read to the person the text inside of inside of an element. So if you have a button, it says developer tools, or you have a link, and it says developer tools, it'll say developer tools. But sometimes you need to give the user more context for what's going on. Or sometimes it's going to be just a visual, like, for example, the slider, the user doesn't know, if they can't see the slider, they don't know what the range is going to be. So if you put Aria label that will override what the screen reader is going to read back to you. And one good example is I was using a screen reader just before this podcast and there was a link that said developer tools, but it read it read it back to me as category developer tools like Oh, that makes so much sense because it's like, giving me a little bit more context to where this link will go, probably will bring me to a category page that shows me all of the developer tools in it. Yeah, another like, really common example would be like a hamburger menu, which you seen those everywhere. And there's typically just like a button with an icon in it, right? And obviously, like just having a label of menu on that a hamburger is going to let the user know that that's like the menu button. Totally. I have a link to develop Mozilla Aria techniques where you can you can take a look at all of them. Usually what i what i do is when I hit a situation, where I don't know what to best put on the ARIA, I'll either Google it and you'll find someone who's asked a StackOverflow question and 300 people have uploaded it, or you post it on Twitter, maybe tag a couple of people that are in the in the accessibility thread that we have there. And they'll be able to say, oh, when when I'm dealing with a navigation that is open, I often like to use Aria expanded. Or if I'm dealing with a div that is clicked, it should be a button. But if you're in some weird situation where it's not a button and you're you're listening for someone to click, you have to give it an aria dash role equals button so that the user knows that it's actually a button and it is something that can be clicked or tapped over to. Yeah, this next one is a really interesting one, because it actually has something to do with one of the questions that we're asking our Monday hasty treat. Yeah, where was the focus? Right, right. And so when you are browsing the website via like a tab key, right, this is this is such an easy one that like this is such an easy one to test is go to a website and just start hitting the tab key and see where the focus goes. And a good website is going to have that focus ring that's going to certainly take you place by place and show you what it's selecting left and right and the way you do this is with something called tabs. index right? In a tab index allows you to specify the index of what is selected whenever you hit the Tab key. And this is going to make your site usable for people who can't use a mouse, right? It's way easier to click a tab key than to use a mouse for anyone with disability. So just being able to tab, tab, tab tab and go through your site is a great way to find out how you stack up using that sort of thing. What if somebody can't use a mouse? How does their website feel? Well go ahead and just start tabbing through it. And that's how it feels. I think this one is especially important because even if you don't have I don't have any disabilities, and I use the keyboard all the time, because I'm a badass, and I don't want to use the mouse, right, wherever I can use a keyboard, I would like to. And if a website has like poor keyboard tabbing, it's really frustrating to have to reach for the mouse and use that, indeed, let's just go over this tab index real quick. Because by default, all of your links, your buttons, your inputs, they will automatically be tagged to in the order that they show up in the document. However, if you want to give something, you can give something a tab index, so you can manually order them yourselves. But it's generally a bad idea. Because like you think I always think back to the there's a house down the street. And they sold half of their property to someone else. So now there's like 12, there's like a 12. And then there's like a 12 and a half because the neighbor is is a 14, or is a 10. Right? It's and that's the problem that you run into is that if you're manually numbering these things, then all of a sudden, you're like, Oh, it's like z index, right? You always get into trouble with that. So if you give someone a tab index of zero, it will allow it to be tab two, and that will just take the order. And then you can it with JavaScript, you can give something a tab index of negative one, which will programmatically bring focus to that element.

18
00:36:50,760 --> 00:40:32,940
Yeah, again, a lot. It's so it's so funny. So many of these, head back to the good clean semantic HTML. Because if you're using the right elements, the right things the right times, then you're not going to have to worry about some of these things as much, right? Because if all your buttons are buttons, and all your headings are properly organized, and everything like that, your tab index is sort of naturally going to traverse the page and in this sort of right way, but sometimes, visually, there are demands that require a bit of customization there. So having those abilities to customize the tab index is a big deal. Yeah, I was just going through the syntax.fm website with the keyboard. And for everything on the player, I've used native elements, meaning the play button is a button, the fastness which is the speed is a I think it's a radio buttons. And then the the volume is also I think it's a I forget what it is under the hood, but they're all just inputs under the hood. And then I've used CSS to style them, the one thing I didn't use an input for was the actual, the progress bar, where it will show you how far you are. And if you want to scrub to faster or slower, if you want to scrub to the end or to the middle or whatever, then you can just click in it. And that is not currently accessible via keyboard. So that's one thing that will be put on the GitHub list, because after trying to use the entire website with a keyboard, I'm actually pretty happy with with how it works. except for that one little piece. Yeah, I feel like after recording this episode, I'm going to open a lot of GitHub issues, you know, there's just a lot of stuff, it's hard to think about all this stuff is there's so many things. And it's it's good to have just a little checklist to go down to or something like that. It's, again, it's stuff you want to be working on all the time. Next up is the skip to Content button. And this is actually pretty simple. It's just that anchor link that is at the very top of your website that links to an ID where the content lives. So if you have a blog post, and you've got your typical blog posts, where you have a header, and you have a navigation with 14 links in it, and then you've got your actual blog posts, what is often a good idea is that, like even on the syntax website, what we should have is that we should have an anchor link at the very top of the website that links directly to the first episode or to the list of episodes. Why? Because most people don't want to spend six minutes tabbing through like the 700 menu items that are in your menu, they want to be able to just skip past the menu, right. And most websites will just put a ref equals pound content. And then that will and then look at an ID of their like main div that wraps around their content and ID of content that will just jump it down. The reason probably you don't have see this is because by default, they are invisible. You hide them with CSS unless they have a focus. And then that will that will give you it'll actually show it and the really good example is if you go to our sponsor today, dq D qu e.com and just load the page and hit tab and as soon as you hit Tab a is huge. Skip the content button will show up in its focus state is you can use CSS to say, when this thing is focused display block or, or visibility shown or opacity, or whatever it is that you're going to use. And then you can just you hit your enter key. And that will actually skip down to the content and pass their their navigation. So that's that's such an easy win and definitely going to be putting that on the syntax website. Because right now you have to tab through the iTunes overcast Google podcast Stitcher, you have to tap through all of the different ways that you can subscribe to the podcast before you get to a list of actual podcasts.

19
00:40:32,960 --> 00:40:38,850
Unknown: Yeah, and what could be the easiest segue of all time is speaking of dq, there are one of our classes.

20
00:40:40,020 --> 00:42:41,520
Wes Bos: And speaking of dq, dq, right, exactly. dq is everything you need to know about accessibility. I mean, if you need training, if you need, if you need resources, you need testers and things like that. All sorts of tools for accessibility. This dq, it's D qu e.com is just the top resource for this sort of stuff. I mean, it is awesome. And again, yeah, if you want to talk to an expert or anything like that, you can you can do so through directly through dq. I mean, you're not alone in this journey here. So with a little bit more about dq is worth Yeah, so dq also emailed me when they saw me tweeting about this accessibility and said, like, Hey, we build x a x e, which is the accessibility, it's the free accessibility testing suite. And that what that will do is it will scan your website and give you any red flags of things like so I ran it against the syntax website, it yelled at me for two things. First, I had bad color contrast on the episodes. And second, I didn't have a Lang attribute on the HTML tag. So they are the ones that build this. They're an entire company surrounded by accessibility, they are the experts in this. And they also have a an enterprise toolset called a test. So I love when companies do this, they they put their their time into building a free tool for the community that is x. And then if you need something for enterprise, they also will put out a paid version of it. It's called a test. So it will allow you to select Custom rules, if you want to customize customize what those rules are, gives you a robust API in our creations. And you can I think, most importantly, is you can test the accessibility of your iOS and your Android applications. He specifically asked that we do an air horn effect here. So Scott, air horn, please remember Barbara burns, Oh, beautiful. People sorry.

21
00:42:43,110 --> 00:42:43,800
Unknown: To cut you off.

22
00:42:45,540 --> 00:43:30,210
Wes Bos: Over 200,000 people already using either x or a test if you use Chrome Dev Tools, they have this lighthouse thing in Chrome dev tools that will scan your website that's actually using x behind the behind the scenes and they also offer training you can go on in and get some training skill up your team on accessibility. So check them out at dq D qu e comm If nothing else, just to hit your TAB key and see what a skip the content link looks like. Also, talk about a beautiful website that sometimes people think like tab indexes give you that ugly blue outline. But this website has all custom focus styles. So you can use the entire website just with your TAB key to move around which is really really cool. Yeah, check it out dq calm

23
00:43:30,230 --> 00:43:35,670
Unknown: and you know what tool is legit when Google is using that tool in

24
00:43:36,360 --> 00:48:02,190
Wes Bos: browser and put that in the tools? It's like not it's not an extension? It's in the tools if you want I mean, lighthouse is one of those things that I use all the time myself so yeah, that's that's a total legitimize are right there. More than anything else. Cool. So uh, I think that's pretty much it. The last one we have here is the ally es lint rules. I know there's one for react, there's probably one for anything that you're using that involves JavaScript. If nothing else, I would check out extensions in your text editor to you know, maybe make you aware of accessibility issues in your code, that sort of thing. But I personally use the React Li es lint rules. And even when they yell at me for doing things, and I'm trying to work quickly, and I get annoyed with the ESN error popping up telling me that I'm using the wrong element. I am always thankful that it's doing that. Because it's like one of those things, it's like, Hey, your your, your your elements wrong. And I'm like, Ah, it is wrong. I gotta fix you know, so I'm one of those people that's obsessed with fixing their ESLint issues and I you know, having something like that yell at us perfect. So now in this episode, I think we want to talk a little bit about the tools so it's a good little introduction and talk about the toast because we've already mentioned a couple of lead the like capital the tools such as x a capital X e x@dq.com. forward slash x is absolutely one of them. those tools extensions that you need in your life. In addition to that, again, we mentioned that behind the scenes, lighthouse is using x for its accessibility tools. So lighthouse is available in your dev tools already without you having to do anything. And to get to lighthouse, all you have to do is, is this a default tab, it's in my default tabs, if it's not a default audits tab, I think, Okay, well, it's, it's the audits tab. But if you don't see an audit tab in your Chrome Dev Tools, click the three little dots. And then it might be under more tools, I'm not positive, it's one of the ones up top, but it's either under more tools, or it's one of the default ones, you're going to look for audits, you can run an audit on your site, no auditing your site is going to do, it's going to check it for a lot of things with progressive web apps and performance sort of stuff. But it also is going to use x to check for accessibility features. And one of the things I love about this is even if you get a score of 100, it also still will have another little thing that says additional items to manually check. Yeah, like, hey, II know, we're giving you a score of 100. These are the things that, you know, we can't necessarily determine for you like the logical tab order. Interactive, keyboard controls are focused double users focus is directed when new content is added to the page, like that sort of stuff. So if you are the type of person who doesn't know what they need to do for accessibility, using something like lighthouse, or x to have these suggestions for you is just totally, totally invaluable. I mean, you could just follow a checklist of stuff to do and then do it. Yeah, I would say even though lighthouse has x built in, I would say, grab the x Chrome extension. Yeah. And it will throw another tab into it, just because it gives you It gives you a syntax highlighting of where it is, it will tell you what to how to solve it, I think I think you just get a bit of a better look into it. And then I also gave me some a couple little I ran it again, syntax, FM, and we got 103 issues. And 97 of those are the contrast of the episode number. So obviously, that's not a that's a that's one line of CSS. And that fixes almost all of it. And then it says the HTML element must have a Lang attribute. Those are the two that Chrome gave me. But then it also tells me page must contain one main line landmark. And that is the the skip to content, I believe that we just talked about page must contain one level one heading. So I guess I'm not using an h1 tag on the syntax website. might not. That's Oh, that's always the The tricky thing is what if your logo is an h1 tag? I don't know the answer to this. I've looked it up previously. But obviously, I dropped the ball here. Because you're you're like, the syntax should be an h1 tag that back in the day, everyone would have an h1 tag. And then they'd use like a background image to replace it. Yep. And then you'd have the text there. You'd have the text and you move the text off screen. Because negative 9999

25
00:48:02,610 --> 00:49:23,190
Yeah, because if you use display none or any of that stuff, it's it's going to not pick get picked up. So you'd push it off the screen. So you know, as usual, that brings to mind this is hilarious. This is sort of an off story. This is one of the funniest weirdest bugs that I've ever encountered in my entire life. One of our interns at this agency I was working at do was doing that technique and push the text off the screen, right? Yeah, for some reason, I, you know, who's probably just like, I don't know, just thinking it would be no different. He used EMS. And it was like negative 99999 EMS in something about that, because it was on elements used several times on the page was causing a huge performance slowdown. So the entire site would like crawl to it was just crawling, and we're like, what the hell is going on like, and then when we looked at it, we saw the text was pushed off to infinity rather than just a little bit off the page, and just change it that it fixed. It was the weirdest, most difficult bug to solve. I think we probably spent a week trying to figure out what the heck was going on. Wow. Because you think it's like anything, but a text pushed off the screen that would never ever occurred to me that that was it? Yeah, it probably because M's are calculated and they probably got into some weird bug where it was just kept calculating where it was supposed to be.

26
00:49:23,220 --> 00:49:23,910
Unknown: Yeah.

27
00:49:24,240 --> 00:49:33,990
Yeah, I know. Very interestingly. Interesting. So I mean, a near regardless, like, Can we just use an h1 to wrap the image and have the ad with an alt text is that

28
00:49:33,990 --> 00:49:34,950
Wes Bos: I just looked it up?

29
00:49:34,980 --> 00:49:37,260
Unknown: Yeah. Because that's what I do on level up.

30
00:49:37,560 --> 00:51:32,100
Wes Bos: You have an image tag with your source to syntax logo, you have an alt text on that which we have. So check, you wrap that in a link, which is what we have and then you're after that and an h1 tag, so it is fine to have a just an image inside of a link inside of an h1 tag without any text. I'm not sure what SEO is for I don't really care too much about That, but it looks like a lot of people are saying it's fine for SEO as well. So we just need to wrap our logo in an h1 tag, and that will be it. Sick. Sweet. So yeah, I really like this x thing. It's really nice, just, it's almost like a game. It's like that remember, like the web Pitt web speed test page where you're like, Oh, I bet I can't get over in 85, it is hard for me because I get really, like obsessed with it. Like I have to get this number down right now. Like, it is it's it's one of those things that if you if you make it like a checklist for me like that, I'm like going to stop and nothing like, Oh, I can shave another 100 milliseconds off this site, I'm gonna do it, I'm going to spend hours doing it. Next, let's talk about screen readers. And this is really important, because I think a large portion of the people that come and visit your website are going to be using a screen reader. So if if someone is blind, they're obviously using a screen reader or have a low vision or are in any other situation where they cannot read the text. And it needs to be spoken back to them, they will use a screen reader. And this is actually how I got into what I call speed learning or speed speed listening, where you listen to a podcast that 1.5 or 1.75 x because I met someone at a conference who was blind. And he was showing at the talk what his how he used an iPhone, and the iPhone was completely black. Because he's blind. He doesn't need to see anything on the iPhone. So I bet the battery life

31
00:51:33,270 --> 00:51:35,490
Unknown: and sick battery life out of that. Yeah.

32
00:51:35,730 --> 00:52:19,410
Wes Bos: And he's just kind of using his fingers to touch things on the on this black rectangle. And then it was reading back to him and he had it cranked because like he's just learned to listen to the everything really, really quickly so he can get through a website, right. And there's a whole bunch of different screen readers out there. Your iPhone has a really good one built in your OSX has a really good one built in. There are some free ones available for when I think jaws is a big one. But a lot of people were sending me links to this one called envy access, which is a it's a charity from Australia, which is a open source screen reader for Windows just seems pretty. Pretty nifty.

33
00:52:19,770 --> 00:52:23,580
Unknown: Yeah. Android has talkback is the name of the Android one. Yeah.

34
00:52:23,730 --> 00:57:11,670
Wes Bos: talkback. And then Chrome. I think because Chromebooks needed, needed accessibility. Chrome built its own called chrome box. I used it earlier. And I was I was very happy. I was using Chrome box. I was very happy how it did the syntax website. So first tab, and it says a tasty treats podcast for developers you tab again, it says ask a potluck question. And then you can tab through our BIOS and then you can tab through all of the ways to subscribe. So that whole thing should be able to be skippable because then you don't do it. But then once you get into that, it says play fastness which is the how fast it goes, and loudness, which is the volume. And then you can use your arrow keys and it will tell you the current value of the input. And then you can hit tab again and it'll say list of 71 items. And then you hit tab and it will it'll give you Episode 71 hasee, treat stumped interview question. It worked really, really well. I was pretty happy with it. So I'm going to go through it a little bit more with the screener just to make sure that the entire thing is like all of the show notes and the download button. Everything is all accessible as well. If you yourself want to want to take a stab at fixing any of these things on the syntax website, it's obviously all open source. Somebody just sent a pull request in to change the outline color blue to yellow, which I was really happy about. So if you go to syntax.fm on the bottom, there's a link to our GitHub and you can you can submit any, any any pull requests and improvements that you could possibly want. Yeah, I was at a conference once. And the speaker I'm blanking on every conference details or any of that stuff. And the speaker, loaded up the conferences website and started going through it with a voice over activity. And they're like, I'm sorry, this isn't to shame you for your website, but it's not the last one I had open. And everyone was just like cracking up because oh, yeah, it was it was okay. It wasn't it wasn't great. But yeah, this I always feel sorry for conference websites, because they're always the like, worst example of what to do. Oh, yeah. Because they're just put together Yeah, it's that's thrown together quickly, like conference. They have so much stuff on their plate, which is no kidding. Oh, it's funny. But yeah, that's good. Don't Don't make your website inaccessible. That's actually kind of another thing I was thinking about that like a large websites where you're using a lot of data is kind of inaccessible to people who have slow internet. A website that is too taxing is is kind of inaccessible to people who don't have very expensive phones. I guess there's like a whole nother option of that where even if you you can tap their entire website and it's all readable. There's still this other point where like, Can it be used on any device out there? I guess not any device because like you can start whining Oh, it doesn't work on my Dell with IE six. Obviously, we've dropped that browser by now. But that's not my Amazon Kindle. My Yeah. My first generation Amazon Kindle. Yeah, there's a, I guess he needs to know about like, Who is your audience? And am I intentionally excluding somebody from this? Because of their situation in life? We're in unintentionally excluding them as well. All right. All right. Let's keep rolling here. Some we got some resources left, as well as some some important ideas. Yeah, the ally project a one one, why project.com is a community driven effort to make web accessibility easier. They have some brilliant how tos. They have some brilliant myths, some quick tips, some quick tests, sort of technology, a whole bunch of great stuff. I mean, you could spend some time just going through this. And it's awesome. There's just such an endless amount of resources on ally project looks like a great website, actually just reading this, it says, using captioning services for html5 video, that's I, I skipped over a couple of these tools as well. Let me just go over those real quick. The HTML code sniffer is a it's kind of like a linter. For your HTML. Remember, back in the day, you had w three validator. And you can you can use this tool called Paoli, pa 11 y, and that will that will run it you can put it as part of your continuous integration pipeline. So you could fail the build if something doesn't. accessible, just pretty neat. What else do we have here? The transcripts and captions for videos is is one that when I initially put out my stuff, I got a lot of emails, and I was surprised at how many people ask me for captions, because because they were deaf. And so I went out and I paid for captions on all of my videos, I think I've used a couple different services. In the past I've used rev.com speech pad comm they're really good, they have a human go through and actually transcribe it all. My stuff is very technical, but both of them have done a really good job at

35
00:57:12,120 --> 01:00:08,910
doing it about that. Because the auto generated ones have just absolutely slaughter anything technical, like words that we're saying that our libraries are nice or that stuff, they don't know what to do with it. So you had your experience with both speech pad. And both of those are really good. I also have noticed that I turned it on for a YouTube talk that I did on CSS Grid. And I would say it was 99% accurate for for the entire talk, which is unreal. So YouTube, in like we talked about the the auto generated stuff used to be a joke, and kind of an insult to those who need it. But I think it's getting really, really good. If anything, you use those to get you 90% of the way there. And then you have a human comb through the rest, which I think is probably what some of these services are actually doing at the end of the day. Yeah. What's funny is that one of my videos is stuck on Korean thinks it's Korean. So it transcripts transcribed in Korean, and you have to like pay, like I have my default language set to English, like it should know and all my videos are auto transcribed to English but like, come on, and like that one video I'm gonna have to like pay extra for I should be paying for a service for this anyways, I think that's something that needs to happen. Like ASAP. Yeah, it's about I think it's about $1 $1 50 per minute. And generally, I have to get them re transcribed if I change anywhere, because if I put in or cut out, like a minute, a video anywhere in a video, then I have to get it re transcribed because all of the captions are then off by however long, which it'd be cool to like, have some sort of video editing program that had captions attached. Maybe this exists. And then you could just like as you cut the video, the audio and the captions would come along for the ride? I think it would probably I think it would probably have to exist in something like premiere or Final Cut. Like because if you think about it, they're working with subtitles and movies. And yeah, that would although they might just do the subtitling at the end, although I don't I have no idea. I have no idea how that works. I should know. Yeah. I also have found that the captions that I pay for are well worth it. Because even though it costs me, I don't know, hundreds of dollars when I release a like let's say I have a 15 hour course, that's 16 minutes, that's 900 bucks, I have to pay, which is it for I know it's not a not a lot, but it's not a little bit either, right. But I found that I have a lot of users who are just ESL, so a lot of people from India and Brazil, where English is not their first language, and they don't necessarily understand my Canadian accent. So having captions on there is really, really important to them as well. So it's I think it's well worth your money spending it spending it on that. And also it's something I want to get for this podcast at some point as well. Just because they're like searchability Yeah, yeah. searchability obviously you should do people who are Want to go back and find something or anyone that just can't listen to the podcast but still wants to get the benefit of the content? It would be good to get that up and running.

36
01:00:08,999 --> 01:00:11,160
Unknown: Yeah, yeah. Deaf. Alright, so

37
01:00:11,160 --> 01:01:54,150
Wes Bos: what all there are other things that we have here accessibility audit, so head on at hate on works on Twitter. He's a huge accessibility guy. I guess he does these audits of companies websites to see what could be improved. And this one company, bulb energy paid him to do an audit. And it's not cheap to hire someone like this to do a huge audit like this. And they made it totally open source, which is cool, because you can you can see, what does someone who's doing an audit? What do they do? And what do they recommend on how to fix it. So if you just read through this whole thing, you probably would learn a whole bunch of stuff about Oh, there's a navigation issue that we've had here. This is this is the problem. This is why it's an issue, here's how to actually fix it. So I will put the link to this audit in the show notes as well. But I think it's really cool that the company paid for this and then opened it up for others to see what's going on with it. Yeah, really cool. Another great resources, one of one of our sponsors, dq has a brilliant YouTube channel. So we'll make sure to link to that in the video descriptions. Or you can just search for D Q's YouTube channel. Again, that's D, qu e just so you get the spelling, right. But they have awesome stuff like introduction to screen readers, empathy driven development, enabling, I mean, they have a whole bunch of like playlist of different talks from different conferences, but they also have their own videos about digital accessibility. They have interviews, they have all sorts of just really just beautiful content, and catalogue of content as well. So pretty much everything you'd want to see there. If you're a auditory video learner, someone that will listen to, or watch a couple of those videos myself.

38
01:01:54,230 --> 01:01:57,230
Unknown: Yeah, just put a playlist on and then just let it let it.

39
01:01:57,450 --> 01:02:00,960
Wes Bos: Yeah, just like one of those like lunch learns. Or maybe he's just doing

40
01:02:01,980 --> 01:02:02,640
Unknown: lunch and learns

41
01:02:02,760 --> 01:02:19,350
Wes Bos: lunch and learns. That's why I love seeing that people often will take one of my courses as a lunch and learn and they'll send me photos of people having or they call them brown baggers, or that you bring your own lunch. Yep, yeah. And then they'll just like, sit and watch my, my tutorials and do them together, which is so cool to see that happening.

42
01:02:19,410 --> 01:02:20,250
Unknown: That's super cool.

43
01:02:20,550 --> 01:06:41,250
Wes Bos: Yeah, let's wrap it up with some some last ideas and important ideas, this Twitter thread was just a trove of information, I think one of the things that kept coming up was in order to be make a very accessible website, you yourself need to use the website, as someone who's using using the website that is has a disability. So whether that's using a screen reader or using it with one hand and holding a baby or running it in low contrast mode, or any of these things, it's important to use it yourself, or to go and sit with somebody. So because I think about like, we could have a episode on mobile testing and how to how to build stuff for a mobile device. And you shouldn't just sit here and listen to the episode and call it a day, what are you gonna do, you're gonna actually open your website on a mobile device, and try it out and fix it. So you can do that yourself. Especially because a lot of these tools are free. In the last couple years, like I remember, maybe five or six years ago, you had to like buy jaws and it was like, I think it was like thousands of dollars. And it was just kind of this thing where like, oh, people have this screen reader. But and these are the rules that you have, it's totally free, you can turn it on your Mac on your iPhone, on their Android, you can download this chrome box, you can use the free windows one that is out there, go install it and try to actually use your application yourself. I know I've My eyes have been open just in doing research for this this episode. I think that that's one of the biggest, most important things that you can do with your time and more so than even running, I mean running the audit checker and going through and fixing that stuff is great. But even before you do any of that, you know, throw up in a screen reader or try out your tabs and and just try to use your your site that way. And again, it's going to it's not just going to make you aware of these problems, but it's going to make you have an actual reaction to the usage of your site without these things or with these technologies because you're actually going to get to have a like a real visceral reaction to whether or not these things feel okay or not. A couple last quotes that we have here I'm usually not a quotes person. I always roll my eyes when someone's conference talk is just a half an hour worth of quotes. Live laughs design. Yeah, live. Live, laugh, love, Eat Drink. What is the be merry? he marry. We just got back from a cottage vacation and the entire cottage was covered in these like signs but like, kick off your shoes and let the feel the sand between the toes and leave it leave your stresses at home. silly silly quotes, but these quotes are good quotes. So again, Amy Carney on Twitter said also restricting what others have said you really need to be around a diverse group of people. with various various abilities and assistive tech, like that various ability so we've used the word disability so much in this this episode, but you got to think about it maybe the other way around. That's the only real way to get perspective and empathize. Otherwise, you're just shooting in the dark. Yeah, very good. Yeah. I mean, the empathize is just a great word that there was that on the D Q's YouTube, that empathy driven design. Yeah, having empathy for your fellow human beings is the right way to go here distress that. And I got another quote here from Mike banky. And this is, no matter how many tools automated tests you do, nothing will replace having actual disabled users. Use your site app and report back, preferably on their own equipment. So you are explicitly testing the site. I mean, again, this all goes back to you know that there's real people using this stuff. And there's real people that need to use it, and you need to accommodate for everyone. Last one we have here is from moose of letters, as people are jokers on Twitter and change their name. He said, lots of things are accessible by default, it's your task not to break it. So it's true HTML, by default. And all these inputs. It's, it's accessible by default. And then if you get into the world of doing weird stuff with CSS, maybe before or after elements, or maybe you're doing some weird JavaScript stuff, that is all only listened on click, then you're going to break it. So you need to always be mindful of when you're adding custom functionality to a website or doing some sort of snazzy layout. You're flexing, flexing for the boys. You got to make sure that you're not actually breaking it for the rest of the world.

44
01:06:41,399 --> 01:06:54,330
Unknown: Don't Don't break it when you're flexing for the boy. I think that is the quote of the website. We want to list out some quotes here. We should add the one at the bottom. Wes Bos don't break it when you're flexing for the boys.

45
01:06:56,880 --> 01:07:20,400
Wes Bos: Oh, that's good. All right. I'm sick pics. Sick pics. I missed a pic. Yeah, I could totally take pic. It's funny. I was I was doing the the deadlift podcast and we hit we have fit pics, right? Yeah, the deathless podcast. And I was just like, I was talking about how, oh, and we do syntax, we always hit the sick pics. And we're always like, shoot,

46
01:07:20,400 --> 01:07:21,030
Unknown: what are

47
01:07:22,680 --> 01:09:19,529
Wes Bos: we have to pause the episode and go find some sick pics. This is not the case. This time I got lots of sick pics here I got, I got tons to go for a good sick pic that I have ready to go is speed curve.com speed curve, you may have seen them people talk about on Twitter. This is one of these really, really cool sites, see how real people experience the speed of your website. And basically, one of the things I love about this is it's not just like, it's not just another like speed tester, you can put in some of your sites that you would like to compare yourself to, and maybe see how you stack up in different regards. But they're also sending you reports. So I get like a report weekly. That's like your site is 8% faster this week than it was last week. And the the graphs, the charts, the stuff they give you here, if you're this type of person who really loves to look at graphs and charts of the stuff, especially PageSpeed stuff, it's second to none, it's great. And if you're a performance ahead, in that regard, you will really love this site. So speed curve.com I'm a big fan. It's really cool new site. But again, I'm going to sic pick a Netflix series that I've been starting to watch. And it's called Magic for humans. And I don't know if this is Oh, yeah, I haven't done like a look into like, if it's real or not because it's magic on TV is it could be anything right? And it could be actors and whatnot. But it's just really really interesting. The guy it just does like all these things with marshmallows and floating in the air and just blows my mind. I had the reason why I haven't looked into it yet. It's because I don't want to be cynical about it. I'm just enjoying sitting there being like, No way. No way. There's no way he had that many marshmallows in his mouth, you know? So really, really fun one. It's a it's a good one. I think you can a good one to watch with kids. I'm about four or five episodes in really interesting to see how people react and whatnot. So check it out. It's on Netflix. Magic for humans. Nice.

48
01:09:19,530 --> 01:09:27,300
Unknown: Yeah, I've seen that the thumbnail and I thought about watching that son might have to give that one a whirl. Do you have any shameless plugs because I know

49
01:09:27,390 --> 01:10:45,770
Wes Bos: shameless plugs. I'm just gonna shamelessly plug all my stuff. All my courses are at Wes bos.com forward slash courses. I'm actually been working the last couple of months with a developer on having some new improvements to the to the player to this stats, we're going to have a Netflix style skip the intro for those that hate the music at the start of every single episode of my of my videos. So check that out at Wes Bos comm forward slash courses. I'm also on Twitter. Instagram, Facebook, everything at Wes Bos, just find me on whatever you choose to wherever you choose to hang out. And I'll be be happy to hang out with you there. Yeah, hanging hanging. My shameless plug is for my new series on react testing, we did mention testing a little bit of a series. And now, it sort of like this same kind of topic I have like, really, really worked hard to make this series for people that, like they're scared about testing. Yeah, I definitely came from the camp at some point in life where I was scared about testing. I don't edit never felt like I understood that there were so many jargony words, not to mention, there's like people who used the same words for different things, like people use the word mock, and

50
01:10:47,550 --> 01:10:48,229
Unknown: it's

51
01:10:48,229 --> 01:12:59,880
Wes Bos: like everything and nothing and whatever. So I mean, there's just so many jargony terms. And, and if you're trying to get started with this, people just assume you know, a ton of stuff about it already, or you've done sort of testing. So this series specifically assumes you know, nothing. And we start with basic, just testing JavaScript, sort of basic foundational stuff. And then we get heavy into react testing library, which is just an awesome library. So we use just in react testing library, and we talk real world stuff. So we are testing API's, we're testing components, loading data, we're we're we're not shallow rendering anything, we're completely rendering things all the time. We talked about, just in general how to test your react code, but it's all real world stuff. So check out react testing for beginners level up tutorials, comm you can purchase it at the level of tutorial store level of tutorials.com for slash store, or you can come a level of pro get access to all 24 of those videos, as well as every other series for only 19 bucks a month, or 15 bucks a month if you sign up for the year. So sign up for the year and check out that series along with all the other level of tutorials ones, I was just I worked so hard on this series. I'm so glad it's out. And I just want to make testing easier because this series is the definite focus on making it easy on you. Awesome. So that's the end of the accessibility episode. If you made it this far, let's do a hashtag again. What should our hashtag be flexing with the boys? To the end of this get hashtag flexing with the boy that says stupid. isn't any dumber than it tasty? No, it's not this whole podcast stupid. Thanks so much to everyone who chimed in with their information. This is one of those episodes that took quite a bit of research and prep in order to record it just because we're not experts. And we want to approach this topic giving as much good information out as possible because it does really affect people's lives at the end of the day. So thanks so much. If you have your own tips, tricks, anything, please please tweet them at syntax FM on Twitter, and we'll be sure to retweet them out. So everyone can get the benefit of those tips.

52
01:13:00,090 --> 01:13:21,449
Unknown: Yeah, and we'd never say this. But, you know, if you liked this show, head over to iTunes or your overcast leave a review, I listened to so many podcasts and like leave a review. And we do have a little outro But seriously, if you like this podcast, I think it really helps discoverability if you leave a review, you know try to make that review five stars if you like the show, but

53
01:13:21,869 --> 01:13:23,850
you know, obviously be honest with whatever.

54
01:13:24,229 --> 01:13:27,449
We never say stuff like that. So I felt like maybe we need to be so yeah,

55
01:13:27,449 --> 01:13:44,670
Wes Bos: we need to beg you stop right now. We spent a lot of time by episode go give us a five star review. And hashtag flexing with the boys. Yeah, do it. Awesome. All right. I think that's it. We'll see you next week. All right, who's pace

56
01:13:46,319 --> 01:13:56,060
Unknown: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you liked this show.

