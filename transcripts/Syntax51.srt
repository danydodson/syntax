1
00:00:01,319 --> 00:02:24,900
Unknown: You're listening to syntax, the podcast with the tastiest web development treats out there, strap yourself in and get ready to live ski and West boss. Welcome to syntax. In this episode, we are going to be talking all about our workflows and all kinds of ways we're going to be talking about our design workflows are designed to development workflows are sort of how we use Git in our projects, how we even deploy and really just work on our sites what the process is that both Wes and I use as sort of in a project a project basis. So as always, with me is Wes Bos. Say what's up. Hello, everybody. Hope you're doing well. Yeah. So this episode is sponsored by coffee cup software, CSS Grid building tool, which is a brilliant tool that allows you to both design and develop CSS Grid based layouts and a really brilliant visual editor, as well as view School, which is going to be a new course on view, which is going to really level up your view skills. So check it out. We'll get into both of those a little bit more as the episode goes on. So how are you doing was how's it going today? I'm doing fantastic. I just got back from Dayton, Ohio, in which I had a company down there called spark box. They're pretty cool company. But they actually designed the original code pen layout, which I thought was pretty nifty but they brought me in to do a workshop on kind of like just like web apps in JavaScript in general. So we did a full day workshop on promises a sink await modules, we used parcel bundler, by the way I'm absolutely in love with parcel Yeah, I'm so good. I'm working on a course right now for electron and I'm using parcel for that. And it just like everything in parcel. I'm just a huge fan. I use it all the time. Yeah, I can't believe how how how much of a joy it is. I find that the docks aren't great, but you mostly don't don't need the docks. Yeah, we did that. And then we also did serviceworkers we built this like photobooth application where we like lazy loaded and code splitted and what else would we do with it? We made it offline with service workers. And it was just a lot of fun. Met a whole bunch of really cool people got to hang out in Ohio where I rented a pretty pretty sick Jeep drive down there. I saw the Jeep

2
00:02:26,100 --> 00:02:46,890
play fan. Yeah, I wanted to like drive it on something and Sarah flex in it, but I couldn't find any like mountains or I was gonna you know, you know, Target has those big red balls soon. I wanted to drive it onto one of those. But locally, one of those balls broke loose and rolled into a car and just Oh, just nailed it. So I don't want to kill anyone. Yeah, that's rough.

3
00:02:47,940 --> 00:03:20,460
Anyways, how you doing? I'm doing all right, actually, it's funny. There's this target, in Colorado, in Denver here that has this giant rock on a corner and it's like a corner that people end up like miscalculating all the time. And maybe if they would have had your Jeep they would be fine. But there's like it has its own like Twitter account where people post photos of cars stuck up on the rock because they undercut it the rock underneath the car and then they have to get towed. Because there's no way to get off of it. It happens all the time. It's hilarious. That's a nightmare. nightmare. Yeah.

4
00:03:22,230 --> 00:04:59,970
Today, we are going to be talking about workflows. Often, Scott and myself, we get a lot of questions about like, what's your process for starting a design? What's your process for taking design to development? What's your deployment process look like her? What's your workflow look like? What's your Git workflow look like? So we're going to rattle through a bunch of common workflows for design designed to dev get deployment and then anything else that we can think of, and just say like what our workflow currently looks like, and hopefully he again, a thing or two from it. Yeah, cool. So I do want to get into it. First you want to talk about, we can start at the very beginning sort of the design process, let's kick it off with the design workflow. So the first thing that I do is, is when I want to build something, well, as I get, I just take that back, it's not necessarily always the first thing that I do. But anytime that I'm going to put out a production website that's client facing, most likely one of my course websites, or one of the applications that we build in one of my courses, a big part of that is is designing the actual application. So I'm going to sort of detail what my process looks like and what my workflow looks like to do that. So first of all, I don't design in code. A lot of people ask me that like, Oh, do you Why don't you just like do your design in CSS and I find that I'm not as fast if I were to do it just in CSS and I also find that I don't have the the flexibility that I would want to be able to quickly move something or quickly group something there quickly make a reusable symbol and want to use the design program. I feel like the stuff that I make is much better because I'm not restricted by what I know is possible in CSS and

5
00:05:00,000 --> 00:06:59,280
That's often the case with designers where a designer who doesn't know how to code will often make something and first reaction from developers can't do that. And don't you know what we can do? But that's almost a good thing, I think, because it really forces you, as a developer to stretch yourself and to think about creative solutions of how to implement specific things. Yeah, it's one of those things that like, I think it would be great if it could happen more for everyone. Because I remember, there was one of these layouts that I was given at Ford. And I just remember when I first saw, it was just like, you can't do this stuff. And I found the most creative solution to it. It was like, I just remember, like, sort of just really impressing myself with the creative solution I found for it. And I, when I first looked at, I was like, I can't do this. And then by the end of it, I was like, I am the best because I figured out this crazy slash this, you know, but it's a huge, huge booster. Yeah, totally. So what I do generally, when I approach a new design, I always have sort of a look and feel for for every single product and course and thing that I build. And usually those come from inspiration from any really anything, what's going on, like, for example, the syntax kind of look and feel of both the logo and the website, a lot of that comes from a cover CDR from band called boys night out. So if you so if you Google Voice, handout, train rack, and you find the the album art for that specific band, you'll see that like a lot of the syntax logos is heavily inspired by that. That's also where a lot of my love for that specific yellow that I've used in almost everything I ever do, has come from. And then I just have like a lot of like, kind of inspiration always saved, whether it's screenshots in on my phone, or I see stuff that I like, or whether it's just kind of a feeling that I've been really wanting to do something with like, like palm trees lately. So watch out for that, that'd be kind of cool. And then once I have the sort of the look and the feel and the layout that I like, I'll usually open up like a moleskin or a moleskin.

6
00:07:01,410 --> 00:10:00,000
And sketch out the layout in pencil just to kind of get my ideas on paper. I'm very bad at sketching. I often see pictures of people sketching out these amazing like wireframes, and they look so good. And minus like basically like did a chicken try to draw a circle on the thing. But it's important for me to get it out on a pencil. And then what I do is I jump into my editing program. So currently my editing program is sketch I use Photoshop for many years. And I'll just say that sometimes people think like, oh, you're a Photoshop designer, or you're you're a sketch designer, and I don't think it really matters all that much which program you use. I'm just on sketch because I've been on it for a couple years. I'm really happy with my my layout workflow. It does most things that I want. So I'm pretty happy with sketch but I've heard really good things both about I think Scott use figma. Adobe has their own product called was Adobe XD Yeah. Which I've heard awesome things about it, have you? Yeah, I've used it a little bit. There's some cool stuff like this, like iterators thing where you can like iterate, like, let's say you're building like a grid, you would design like one component, and then you just sort of drag it and it would like automatically duplicate it. So there's some like, there's some neat stuff in it. I ultimately don't use it, because I don't use any Adobe products, really. And yeah, I'm a big fan of figma. I'll talk a little bit more about that when I get to it. But there's also like the Envision studio which is an early release still framer, there's a whole bunch of stuff now a whole bunch of different these new school design applications. Yeah, it's funny how how quickly I will mourn the one thing that I'm losing in all of this is I'm losing a lot of my like raster based layouts of you can still do raster in sketch, but it doesn't work as well. And I like if you know my my design, look and feel I love texture and patterns. And and that's almost always raster based. I had a huge library of brushes and actions from Photoshop that I've had to say goodbye to when I moved over to sketch, but I'm pretty, pretty happy in how sketch is working out for me. Anyways, once I've got the kind of the the layout done in sketch, what I do is I go back and start to refine what the look and feel is it so I'll spend a lot of time on colors. I'll spend a lot of time on typography, different patterns, different textures, refining the overall layout, things that overlap. And I won't design the entire website in sketch, what I'll do is I'll just make sure that I'm happy with those main things, which is rough layout colors type pattern. And once you have that down, Pat, I feel like I can extrapolate that look and feel to the rest of the website. And at that point, I start to move myself into actually writing some CSS. So I will often jump out I would say I jump out of the program early but not until I have look and feel colors, textures typographic down pat. So that's my design workflow there. What about you? Yeah, well, it's quite a bit different specifically because I don't end up designing that many layouts, right? You do a new one with each one of your course client work or that sort of stuff.

7
00:10:00,000 --> 00:15:00,000
I pretty much have one sort of living project, which is level up tutorials. And that's the primary thing that I've worked on design wise, I have a, you know, freelance project here and there that I designed. But for the most part, I'm working with a designer, because that's not necessarily my specialty, right? So the level up tutorials, design has been existing since like 2012. So even though I've started over a couple of times, the whole thing is always had been based off of like a certain starting point. And in that regard, my design style is designing through iteration. I'm not like a talented designer. So it has to be refined, and then refined and then refined. And every year, I look back at last year's iteration of this site, and I just go, oh, if I was really bad at this, and I still look at it, I'm like, okay, there's a lot of things that could be better. But you know, I'm, I'm getting better as I do it, right. So the design aspects of the site are just something that I've worked on. And I've worked on, and I've worked on over and over again, until it starts to actually fit my taste, right, because I have that common problem where you have good taste, but you don't have good execution. So I'm working to get better at that execution. Now, one of the things that's helped me do this, since I've designed most of this site in browser, I would say 99% of it designed in browser, one of the things that's helped me lately is to actually go backwards and move this into an actual design application of which I use figma. Because a figma is superior like component based system. So we're sketch has things like symbols and stuff like that, look, figmas component system sort of blows it out of the water. And it like really, mirrors react in a lot more ways. So the components are way more flexible in figma. And that's the reason why I use it. So I've like rebuilt my entire styled components library that I have, like I've rebuilt the entire style components library, sort of one to one inside of figma. That way, I can grab and drag elements. What's cool about this is that I have published a team library. So if I add anyone on to level up tutorials, team, the there's this whole team library thing, and like figma has this really awesome organizational will have like headings, and then it'll have all of your headings named in the visual and you just drag them and drop them. It's more like a it's more like a it's like a library like a storybook kind of style thing where you can click through them and see everything a little bit better than the like sketches symbol system. It's way better for like organization, but either way, so I have this whole system now that I build sort of one to one instance components that allows me to sort of iterate on some of these design ideas really quickly and see them and layouts across this whole thing using this sort of automatic refreshing component system. And I've taken ideas from atomic design, I don't necessarily follow one to one ya know, atomic design is the book by Brad frost where he sort of outlines this component based system of having like atoms and molecules and different types of things to describe different smaller and smaller chunks of your website. But either way, my whole design layout is like again, its its goal is to be one to one and figma with everything flexible so I can try it out in different layouts. And again, I partake in a little bit of light theft, for instance, like the footer of the website was designed sort of to look like Pitchfork coms footer, not like totally one to one. I don't even know if it is still the same anymore. I think pitchforks got undergone a redesign since then. Yeah, it actually follows it a little bit. But basically I you know, I've if you look at Pitchfork, kamioka level up tutorials footer, you'll be able to see some similarities, they're not exactly the same anymore. But so I partake in a little bit of light borrowing here and there. For instance, the new animation I have, when you hover over any of my tutorial playlist, it does sort of like dip and grow thing, I saw something kind of similar on a Patagonia sort of one off website that was like really well designed. And I just really loved the sort of depth that their animation gave. So I kind of borrowed some ideas about this, like sort of dipping, rolling sort of animation and built my thing around there. So I definitely am constantly looking for those inspiration targets, and saving URLs, saving photos, that sort of thing. And many of that stuff never ends up making it into anything actual production. But sometimes something grabs me so much. I'm like, Alright, I gotta figure out a way to, you know, be inspired from this in the site. It's cool. I just reminds me, we should totally do a website on design systems. I haven't worked on a whole ladder. I've worked on a handful of them in the past, but that seems to be like the new hotness right now. And the company that I talked to this past week, they say that a lot of spark boxes, a lot of their work is doing design systems where you do things like you design the typeface and what a card looks like and iconography of the website and different colors and like all the stuff that goes into it and Brad frost atomic design is all part of that and I think it's really interesting especially when you have a company that is so large that you cannot like for me I can just design some

8
00:15:00,000 --> 00:19:59,970
And it'll stay consistent across the board. Whereas like, you have like a company like Salesforce, I think, who's What was her name? I think Gina from Salesforce, I listened. I met her at a conference once. And she just made this like thing for Salesforce design system where there was something like Salesforce has something like 14 million employees or something incredible like that. And they have like, something like 30 million different web properties that all needs to look the same. And design system is how you save that. So we add a card, and we'll do a show on that at some point, we should, because my talk in Romania just recently was basically on design systems. Oh, really? Yeah, it was about component based development and design systems and sort of the intersection there. So yeah, I have a lot to say on that topic, I have a lot of good resources to share. So hey, maybe we can make it the next one. Sweet. If you want to hear it, tweet us at cindex FM, and we'll make it happen word. Let's move on to design to dev workflow. So once you have the design down, Pat, or once you have enough of the way in my case, what does it look like to take a design and build it into each month, I were being very simplistic here where in the olden days, what would happen is you would design something, and then you would hand it off to developer, the developer would work on it. And then they would hand it off and stuff is a lot more free flowing right now. But what I'm saying for this is, this is how I approach something that is brand new. If I have a brand new course website that needs to be designed, I'll do that first initial discovery phase in sketch. And then once I'm happy with it, I'll move over to my design, move over to my dev workflow. And first thing that I'll do there is set up my tooling that needs to happen. So really, depending on what tech I'm specifically using, if I'm if it's a react project, I'll probably reach for styled components. If it's just a typical server rendered website or WordPress website, I'll search I'll reach for stylist or sass in either something like a web pack or parcel or just a regular golf, I still have lots of projects that are running on on Gulp task runner just because I thought that that was it's not the best for JavaScript applications. But if you've just got one sass file or a couple sass files that need to be spit out into one or a couple CSS files, I still think that it's one of the best and easiest ways to get up and running with that, then what I'll do is I'll move over to setting up my type. So I'll take any fonts that I have that aren't specifically one of my little dirty little secrets is that I'll often buy a font off of something like creative market. And these font authors will often not give you a web ready font, you have to make sure that you buy the license for a web ready font, but you you have to convert it yourself. And for that, I'll usually use a website like font squirrel. There's also a tool I use for a while called, I think it was called font prep. Let's see if that's still a website. Font PrEP is no longer being maintained and has been superseded by font plop. Okay, here we go spot flop by it looks like it's like a desktop app that you drag and drop it. I hardly ever do do this because like, I don't know how many times I need to convert a font maybe a couple times a year. So I'll usually go to font squirrel and, and convert that over. Once I have all my type setup. I'll go in and start to usually have like a variables file where I'll keep all of my specific yellows and greens and blues and different colors that I'll use for that. I'll create different partials that I use often with my course website all share partials amongst the site. So generally it's a not sharing any of the design. But there's a lot of layout stuff in my courses, like how do I lay out the videos? Or how do I lay out the reviews? Or how do I lay out the different sections, a lot of the kind of the layout with whether it's great or Flexbox, or floats, a lot of that stuff stays the same. So I'll share that amongst my projects. And then I'll sort of like just like add a layer of paint on top to make it look different from from every site to every site, I'll import resets all that good stuff. And once you have all of those in place, what I'll do is I'll try to do as much HTML as possible before styling. So this is one thing that I saw when I was teaching in person, people will get really frustrated with trying to start design something and it was because that they were not creating all of their HTML first. So what I'll do is I'll try to get all of the HTML as much as the HTML as possible on the page. So my unordered list for a list of videos, all the images, videos that are coming in paragraph tags and different sections and intersections and all that good stuff. And it will pretty much just be black and white. And then once I have that sort of like base, that big piece of granite, I can start to chisel away at it with with CSS. So that's one of my recommendations for people who get frustrated with bouncing back and forth. Just try to do as much of your HTML first, then go into your CSS and then I'll sort of take two or three passes on this the first pass I'll do just lay out stuff

9
00:20:00,000 --> 00:25:00,000
So getting things to go where I want them to go. And then with each subsequent pass, it gets a little bit more fine grain, I spent a little bit more time on the fit and finish of it. And then over time, it goes from very rough layout to very detailed luck. And that's another tip I give people who are starting to get into this stuff is don't sweat the little stuff up front. Because when you're trying to do like, large scale layout, and fuss over small little typography changes at the same time, it's, it's really frustrating. So first, the little details at the very last, whereas the very first look at the very, very broad and basic stuff. Yeah, and that has to do with like, batching. I mean, we don't, we haven't really talked about batching very much. But then there's a whole process of getting things done that involve batching, where you group similar tasks together to stay more efficient, because when you get like really in line with doing one kind of thing, your brain is in that mode. So it's more efficient for you to even do that. Because we're bouncing back and forth between writing structure and writing style and writing structured writing style, you're changing your sort of context all the time. So I mean, I do that all the time, I'll even if I'm doing JavaScript stuff, I'll just do up the structure first, then I'll do the interactivity, then I'll do the styling or the other, you know, do the structure than the styling meant and interactivity, but like batching, those tasks together can really help you be more efficient overall. Totally, that's such a good tip. And I would definitely try to put that in place if you're new to this stuff. In terms of tooling, I'll use either something like browser sync, which browser sync is one of those tools that I absolutely love it, it does a number of things. First, it just watches your file system, it'll spin up a little development server, it will auto reload your CSS, when it changes without having to refresh the page, it will give you a local local host server, I'll give you a local IP. So you can bring it up on your phone, if you're on the same Wi Fi network, it'll give you local tunnel. So if you want to send a link to somebody else, it will sync click. So if you had a website, open up on like, eight different web websites, and you could use browser sync to sync the scrolling on each one. So big fan of using browser sync, or a lot of react applications have this built in where you do the hot reloading immediately for you partial has it built in for CSS and JavaScript. And then like the final, I guess the final thing, once I've have all that set up is obviously build the thing. And then I'll finish things off with testing it across different browsers and different devices. And what I'll often do is I'll open it up to like a chat room, if it's a course I'll open up the course website and the actual course to 50 people or so. And then by in turn for them getting early access, they'll just like tons of eyes on it, being able to find things like spelling mistakes, or weird issues on two versions old of Safari or on a weird Android phone, then you'll be able to really get in on it. And that's I love having being able to just like set loose the hounds on a website, because they find absolutely every little quirk of a website. Yeah. Nice. Yeah, that's my dev workflow. Oh, yeah. Yeah, I mean, a lot of is mine is very similar. I have sort of not necessarily like a library. But I have definitely certain files, especially my styled components, or previously, like my stylist style systems, where I move these things over from project to project. And then the stuff that usually is around things like breakpoints or functions that I like to use or short hands or things like that. And I take them with me from project to project. So typically, when I'm starting a new project, I'm almost always moving that stuff over, like first and foremost, because I don't want to get into any sort of styling without my handy was that in stylist, I hit some mix ins and now install components. I have some functions and stuff like that, that I just sort of rely on at this point that I just really like. So I'll start a project and I'll move that stuff over. Just so I have everything to my liking, you know, so I don't even have to think about it. And, yeah, that that's like one of the big things for me is just being comfortable in this environment. And when you're comfortable, like for instance, the level of tut's code base has been worked on for so long that I'm so comfortable and then environment. So I tend to make most of my projects in that same sort of style just so I have things where I like them. It depends on the type of project again, because I'm maintaining a large project as well as occasionally doing new new, smaller projects. If I'm doing a new, smaller project. It really depends. I've been using Gatsby so much lately. So if I'm thinking about this as being like a static site, I'm instantly gonna jump for Gatsby, create a project, bring over my tools and get to work. If it is just going to be a full on maybe like a headless WordPress, I might look for next JS or something like that. If this is just going to be a front end thing, I would just go

10
00:25:00,000 --> 00:28:37,200
Go for create react app. And that's pretty much where I've been lately is to grab the thing with the least resistance, bring my stuff over and get to work. So everything else, like a lot of it mirrors what you're talking about, you know, you do all your setup, you write a lot of your structure, and then you sort of batch in the different stuff. The for me, the tooling is a little bit different, specifically, because level up tutorials is on Meteor, which has this bit of combined sort of front end and back end, and it does the hot reloading for you. And it works just really nicely as a full on platform. So I end up just basically, if I'm doing a meteor site, or just one that would need like a database, and like, I would just fire this thing up and get to work. Because again, it takes care of most of the stuff for you. The last thing I want to do is spend hours and hours and hours on tooling. So I pretty much am always copying and pasting tooling stuff, bringing it over from another project that's using it. And I'm hardly ever writing any of that stuff from scratch. So yeah, that's really my philosophy for getting going on a deaf project is to get into the code and into the project as soon as possible, because that's where you're going to be inspired to work. And actually, like see things happening. Awesome. Yeah, I've got a question about, you got some notes here on breakpoints. So at what point in your dev process? Do you start to introduce breakpoints to make things responsive? depends on if I have the design ahead of time or not? Yeah, if I have a designer or myself who's designing this thing, I am doing mobile first straight up. So I design mobile. And then typically, I'll do the breakpoints per layout or per element per page or whatever as I go. So like, I'm, I won't style the entire site mobile, and then co the breakpoints, I will do, here's the homepage. Alright, I'm going to style it from mobile to desktop all in one sitting just so I don't bounce again, I'm like sort of batching I don't want to jump and forth, back and forth between contexts here. I want to keep the context. For level up, it was a little bit different. The site changes all the time. So I'll pretty much do the desktop first and then work backwards from there, which is kind of backwards, but it works. Yeah. Nobody, there's no like 100% go this way. Yeah, I'm I've been always been desktop first, just because most of my traffic comes in via the desktop. Likewise, fine, I find myself not writing nearly as much responsive stuff ever since Flexbox. And grid have come out, specifically since Flexbox came out. And now it's even less now that that grid is out. But as I lay out the site, I generally lay it out on the desktop, and then I'll sort of just kind of keep going down down down. As we get smaller. In the last probably two years or so I've always been writing my media queries in line with with sass or style components, me that I used to write like a separate media queries file, or I used to write the media queries at the bottom of like, if I had, if I had like a video layout, I would write the media queries at the bottom of that. And I've since moved to writing the media queries right inside of the selector, which is not saying as part of CSS, but it's you can do it in most like stylist or sass or style components. And I really like that sometimes, sometimes I'll pop the breakpoint in a variable so that I don't find my I don't have to keep writing the whole like, media max width, whatever. I know that. Yeah, you've had you have some tools that make it a little bit simpler than having to write the whole media query. Do you remember what that is? Yeah. Well, it depends on on stylist, I use one that I think is called, they might just be called breakpoints to be honest.

11
00:28:38,280 --> 00:29:34,680
And it's as you just do plus above, medium or whatever. And then yeah, use that. On the style components I have the sort of object that you use, I can like link this in text, I have it in just somewhere. But it's basically just an object that you could say above dot mead for like, medium. And then yeah, you have backticks and write your your style your CSS inside of there. And that takes care of it. So I also do mine in line with the selector. Because again, I think it's easier to read. It's Yes, to kind of keep everything in one spot, especially if you're doing like a one liner, like a CSS Grid is changing a little bit from Yeah, like each rows to four rows or something. Yeah, all the time. Yeah, I mean, so I mean, I'm probably primarily using react for everything. So whether it's like Gatsby or next or Meteor or something like that most of my design setups are sort of react based right now. Awesome. Speaking of react, other people sometimes like to

12
00:29:36,090 --> 00:30:00,000
how is that transition brutal? Anyways, Scott and I have been trying to make a hilarious transition to view school.io, which is one of our sponsors for today. So people ask me all the time, like, Hey, why are you gonna do a course on view? Are you gonna do a course on view? And my answer was always maybe, but I've got so many other courses that I would love to do first, that it's unlikely that

13
00:30:00,000 --> 00:31:25,470
anytime if you need to learn view right now, it's it's not something that you'll probably get from me. So our sponsor today is view school.io. And they are, they have this thing called the view, j s master class, which is a learn view j. s from building a real world application from scratch with Alex not again, I'm not even going to attempt to say his last name KYRIAKDD is he's a view core team member and the author of the best selling book, the majesty of uJs. So he's put out this video course, that's going to teach you how to build things in Vue js. And we got a couple couple points right here, you're gonna build a real real world application, which is a form, you're going to use view and friends, you know, the view ccli view x, if you router, other technologies use Firebase RX j s, you're going to be looking at how to how to use best practices for building something in Vue js, code splitting Webpack, modern JavaScript. So some of the features of the form that you're going to build single page application, real time updates, content moderation, markdown support server less optimized for SEO with meta tags. So it is currently being developed. There's currently over five hours as 75 lessons and five hours of content. So if you want to learn view, and if you want to jump in on this, we are going to send you to view

14
00:31:27,480 --> 00:31:50,580
school VUE school.io forward slash syntax. And we've got a kind of a cool deal here. The first 50 people are gonna get 25% off sick off, not on 25% off. So head on over and grab it. And thanks so much to view school for for sponsoring. That's awesome. Yeah. And from a core team member to cool. Yeah. So you know, that obviously know what they're talking about, because they literally are building view.

15
00:31:53,250 --> 00:31:57,540
Unlike me, I'm just kind of pontificating on different things here.

16
00:31:58,710 --> 00:34:59,970
I'm just joking. I know what I'm doing. Anyways, let's keep rolling with the thing. What's the next section that we have here? Are we homies? Next one is Git flow. So what does it look like when you actually need to make an edit to your website? What is your whole Git flow look like that. So usually, what I will do is that you maintain your your master branch, and your master branch is usually what gets pushed to production. I know some people will also have a separate branch for that. But I've also worked on so many different teams in the past, and they all have their own different Git workflow. People are very opinionated about their their Git workflow and how to approach it. So this is generally what I've settled on. Now, I know that there's a lot of people have different workflows. And I would love to hear what your workflow is, if you tweet us at syntax FM, and we'll make sure we retweet that. So this is generally how it works for me is that I will have an issue with something that needs to get added a feature request or something that needs to get fixed a bug report. And those issues will generally for me, I like to keep those in GitHub, although in the past, I've used JIRA, which is the worst thing in the world, every tool for us to use. And generally, those tickets in JIRA or in GitHub will have a number associated with them. So maybe, like dev 113. So what I'll do is I'll take Master, I will take a branch off of master into that specific issue called dev 113, then what I'll do is I'll actually do all of the work inside of that branch that needs to happen, committing as I go along. So anytime I do something significant, or anytime that I wrap up for the day, I'll stick that into a commit and push it up. Because there's nothing more scary to me than having uncommitted work where you could potentially lose it. Yeah, even even if it's just committed locally, I always like to push it up to my own fork of a branch so that as I have a work in process, I have it sort of backed up to GitHub or wherever you're pushing your your Git repos to, then what I'll do is generally, when you're working on a big project, that's pretty quickly moving. If you're working on an issue for three or four days, you're going to be pretty far off from what masters on because other people have been adding things to to master and you want to make sure that it works. So you'll do something called a rebase in git, which will sort of it will it'll take your your changes that you have done, let's say you added six commits to it, it'll sort of pick them up and put them in the air, and then and then bring in master again, and then attempt to land your changes back on top of that you, you rebase your changes on the latest version of master. And in most cases, that's fine. In some cases, you have an afternoon's worth of merge conflicts to deal with, which is always a bit of a nightmare. Then, depending on who the client is, I don't do this myself, but I've had clients in the past who want me to squash all of my commits. So if I have six or seven commits that detail what I've been working on, they'd like me to squash it into a single commit so that they the repo history stays nice and clean. I don't like to do that.

17
00:35:00,000 --> 00:39:59,970
Because often I'll have three or four significant changes in it pull requests, and I like to have those as separate commits. So that I know that what I did in that specific one, what squashing will do is it will just it'll literally squash it into one commit, you're sort of rewriting history at that point interesting. Then I'll push it up to GitHub. Yeah, and I have a pull request. And then that pull requests will generally run against any continuous integration, any tests that they have. And then at that point, you either tear off a new issue, and you start from Master again, or if the new issue requires the work of your previous issue, then you create another branch off of so I had def 113, I created another branch off of that, which is def 114. That can get a little bit hairy now because especially if you're squashing, squashing things if you have to go back to one on three, then you get into a little bit of hot water, but it's all doable. That's that's sort of what I settled on any thoughts? Or what are you working on like that? Yeah, mine's a little bit different. And usually, if I'm working on a team, as the first thing you ask is like, hey, what is your Git flow workflow? Yeah, they tell me and then I just hold that 100%, because there's nothing worse than we had like a unfavoured. Again, we had like some other outside developers coming in working on the same project. And they were like, not on our team, a whole different agency. And they came in and just tried to sort of like strong arm their process, when we already had a process. It was like we're all I did was like, separate the two teams, when we should have been working together, we were like really frustrated that these guys were trying to impose their system on us when we already had a good system going, just for no reason at all. But so I usually like to adapt to any system that if I'm coming into a project, no questions asked, I'm going to use your system, I'm not going to try to improve it or change it or whatever. My system is pretty much this. And for a long time, I've been the only dev on the site, I do have outside contributors all the time, if you want to get some some practice, and you can contribute to level up tutorials, just join the Slack channel and reach out to me and I'll add you when you can check out the code base and stuff. But it's all it's all private, I do allow people to work on it, though. And so my system is pretty much this, I have a master branch that's one to one with whatever is deployed on the site, I deploy only from the master branch, and I basically I deploy anytime I merge into the master branch, it's not automatic, I don't have any continuous integration setup. But the rule is pretty much if I'm merging into Master, that means it's ready to go live. And then so pretty much everything lives in develop while it's being worked on tested, whatever. So I work on a branch called develop. But I don't actually code on the branch develop, the develop is just the sort of branch where everything gets merged into. And then from there, I pretty much do a feature feature branch sort of style, if I'm working on a feature, or I'm working on a bug or whatever, I don't name it after the issue number or anything like that. I just name it as a simplified version of whatever that issue is, like, based on title. Yeah, if I'm working on the affiliate system, the branch is going to be affiliates. And then I'm going to work on that do all my thing, do all my code and then push it into develop just for the merge merchant and develop? Alright, everything's working good merge it into master when it's ready to go live. I run all my tests right now, because I have both my API and my UI in one code base, because it's all in Meteor, right? That makes testing a little bit different. I test all of my react stuff with jest and I test all of my non react stuff like the server and API and stuff, I test it with actually, mocha, I'm working on maybe simplifying my testing. So I run two, I run my server side my API tests, and I run my client side test, I just run these both by hand because, again, I with the meteor stuff, I haven't necessarily dialed that down yet. I'll test pass good to go. I just run a deploy command, which is a script that deploys to Meteor galaxy, which is a really great hosting platform for Meteor sites from the meteor development group. So I mean, really, my good strategy is to have master one to one developers sort of where the changes are happening. And then I'm writing code always in a feature branch. And if I have contributors, they either make their own feature branch and I merged in or with a pull request to develop. Yeah, yep. Cool. I always like hearing what everyone's it sounds like we're fairly similar. Yeah. Yeah. They're all very, like little flavors of the same kind of style. As long as you have something that works for you. And, and mine has been born through refinement, just as I'm sure yours has. Right. Yeah. Yeah, totally a little things that you do come about because of issues that you've had in the past. And then you fix them yourself, you know? Yeah, yeah, totally. And speaking of things that you can work on refining, you can always work on refining your CSS Grid skill. So now, one of these tools that's going to help you build CSS grids, design, CSS grids, and really understand CSS Grid so much more as coffeecup software CSS Grid building tool as far as code generation and

18
00:40:00,000 --> 00:40:03,750
UI design tools, this thing is awesome. Yeah,

19
00:40:04,890 --> 00:44:29,520
it actually is awesome. I said on previous podcasts, they reached out to me because I have a course on CSS Grid. And one of the hardest things that I found with with CSS Grid is being able to write CSS Grid code and then visualize what it's going to look like. Because it is such a visual thing. And that's why we use these grid visualizers that come in something like Firefox. So they came out with this coffee cup software is this company that makes a bunch of different like website designers, they have a responsive site designer, where you can code a lot of the visual aspect of your application in this GUI and then export out the code. And then they they built this an additional one for CSS Grid. So I was like, Okay, well, let's check it out. I doubt it will be that good. And I had a call with them. And they have this layout editor, you can design in CSS Grid, or Flexbox, or block or whatever it is that you need. And then inside of CSS Grid, there's a whole bunch of stuff like, how many columns are there? How many rows are there? What are the implicit versus the explicit columns? What are the flex values of all of the different Flexbox elements that you have. So there's really a lot going on there in CSS Grid. And let me tell you, when I hit the export code, it's a pretty much with the exception of adding one additional class to some of your selectors, which is something that the the editor needs to to be able to import that code back in. It's pretty much just the grid code that I would write myself. So if you're looking for a tool to help you write CSS Grid code, you need to check out coffee cup CSS Grid builder, at CSS grid.cc, you can go ahead and download it for free. They also have a whole bunch of awesome resources for getting started with understanding how CSS Grid works. So thanks so much. So coffeecup software for sponsoring and grab it at CSS grid.cc. Nice, super cool. Yeah, and one of those things that's really cool about that, too, is that like, if you are still like shaky on your CSS Grid code, you could use it as a total learning tool to really just look at analyze their code and see like maybe or the, I mean, their code so good. It's like, see how you should be writing your code to, you know, yeah, like, I need, I need a column, or I need a grid with six columns. And then I need element number four to span from columns two to six. Right? Yeah. And also, I want it to span from row three to four, you could just do that, export it and then look at the export ID code and go Okay, that's how I would do it. Now. Let me implement it into my own. So check it out. Yeah, so cool. Oh, last thing, well, maybe Second, the last thing we have on our list is deployment. I already briefly mentioned mine, but really for deployment for me is that I deploy with a meteor galaxy. And it's pretty much just a one, a one liner script, and I have it aliased or I have not aliased, it's in my Actually I have it both aliased. And I have it in my package JSON. So I have it in my package JSON as deploy, right. So you could just do yarn deploy, or I also have yarn deploy alias to just deploy. So I'm, like lazy enough where I would like removed one word from the command, just like the type deploy and divine command line, because that's, that's how I roll I guess. So I pretty much just type deploy from Master after all my tests have passed. Again, I don't have any continuous testing, integration, that sort of stuff. I'm looking to add all of my tests into that process to have it automatically built into galaxy. But I just moved from Bitbucket to GitHub. So I'm still in the process of rewriting some of that stuff that I have here. But really, yeah, that that's it. Nothing crazy. The only thing is separate about that is with a brief note on like API keys and stuff like that, I keep my API keys. And this Meteor has a file called settings, JSON, which is essentially just a JSON file. And there's two objects in JSON or in this file. One is just sort of your client side code where everything is public, right? Your public stuff, and then your secret stuff. So anything that you put in settings dot JSON is your secret stuff. And you can add it in your site as Meteor dot settings, dot, and then your stuff. And you get access to it, the server side, whatever as a secret, but it doesn't live in your repo. And then when you run your deploy command, it references that file and uses those variables. So that's how I work with all of my secret API keys and stuff like that. Yeah, you got the a lot of secrets there, Scott. Oh, yeah. You know me. Alright.

20
00:44:30,690 --> 00:44:59,940
How I do I have a couple. Like I still have like lots of different websites that I maintain all of the sites that run both my paid and my free courses, including the viewer. All of that is run under one application. That's the biggest application that I have. It's called boss monster, and that is currently hosted on Digital Ocean. And the way that it applies right now is is actually pretty simple. I use our sink which is a Unix command line tool, it The easiest way to to describe

21
00:45:00,000 --> 00:46:08,430
sync is that it's sort of like Dropbox for Linux, meaning that it will analyze your files locally and remotely. And it will sync the files that will push up, push up files that have changed locally to your server. And then anything that was deleted locally will be deleted on the actual server. There's a whole bunch of different options there. And that's a very, very simple way to do it. Then after I've done our sync, all jump onto the server via SSH and just give it a quick reboot, I use a tool called forever. Which what forever will do is if your NPM script falls over for whatever reason, maybe a user hits a specific use case that you didn't intend and in the apple crash, then that will, it'll log it, which is great. And then you can it will just restart the restart the process for you. Which is good, because it's not like saying like PHP, or PHP doesn't really fall over it just like you just refresh the page and visit that thing again, right? Yeah, I'm just imagining PHP falling over as if it was like, some sort of actual entity, just sort of Oh, boy, oh, here I go. It's just like a wobbly elephant. Oh,

22
00:46:10,110 --> 00:50:00,000
no, that's it's pretty simple. In the past, I've also used just SSH ping files up. So I've had different commands that will just SSH up an entire folder to it. So I am looking at moving over to something that's a little bit more resilient, because that's, that's pretty simple. And I also have to manually SSH into the box to restart the thing. So what I and also that will, that often gives me a two seconds of downtime, which inevitably, every couple months, somebody catches me doing a little two second downtime and sends me an email when they could have just refreshed two seconds later. Yeah, yeah. So I have multiple containers running the site and updates on one, which is a container and then updates at 00. downtime over Yes, that's what I'm looking to move over just for, for performance as well as as no downtime on that as well. So whether that's moving over to Docker, I'm mostly leaning towards using now sites now right now, I had a bit of a bit of downtime issues with them in the last six months or so I've I've had a couple websites go down. But they're they're working hard on it, I think a lot of the issues were from from DDoS, and not their own, it's just from from people that were have malice against them. And what that will do is it will start up your website, and then it'll cut the domain name over so that you don't have any downtime. And then it does like load balancing and stuff for you as well, which is something that I want to do. So I'll probably move over to that at some point. Other other things, if I have like a WordPress website, I'll use sometimes in the past, it's not what I use right now. But you can actually use Git to to deploy websites as well, where you could have like a branch on on, you could have your Git repo and then you could just SSH into your box and do a git pull. And that'll pull down all of your actual assets. I said WordPress, earlier was WordPress, it gets a little bit hairy, because you also have assets, which you don't really want to put those files into your Git repo. Some people do, you can, but it's not really something you want to do, because then if someone uploads something remotely, you upload something locally, it gets kind of hairy. But we've had a past sponsor, which is delicious brains, they have a tool called w WP migrate DB Pro, which is exactly what you want. Because I always have a Git repo of my website locally. But the the data is the harder part, which is I want to pull all the fresh data from the server down to my local host. So I'm working with the most up to date content. So I use that plugin. And then I'll just either FTP drag and drop the whole, the whole theme up when there's a change, or I'll do a get a git pull of just the theme for that website so that I get my latest in there. So I have all kinds of different deployment strategies. not totally happy with anyone Oh, even the I forgot the syntax website is built on codeship, which there's a lot of services out there past sponsor, again, deploy HQ, you can just watch your Git repo. And then when there's a commit that lands into the like a specific branch, you can run some scripts, and those scripts could do testing those scripts can do deployment. So what we use codeship for is codeship will automatically watch our Git repo. And then when there's a commit lands in the master branch of the Git repo, it will automatically do a now just it'll just run now. And there's some keys and stuff that we need to put in there and it will deploy it. And then alias the syntax, that FM domain name over to the instant latest instance of that now. Nice. Yeah, so I don't have a lot going on there. But it's kind of interesting. I love hearing how a different people handle the deployment of their websites. Yeah. And for project structure, what do you what do you do there? Yeah, project structure is something a long, long time ago and I'm really glad I did this. I was shown by actually a company called jet Cooper which is

23
00:50:00,000 --> 00:54:59,970
Now Shopify Canada, they got bought. But they showed me that every single time they start a project, they number the folder. And what that will do is that every single project has a folder like, I have 0230 syntax, 0231, stickers, 0232, node, zero to three, five, Kate. And now these are all the different projects that I have. And then that way I associate, I can remember the number that I'm working on, and I use the command line z, which will let you to jump to folders just by kind of fuzzy matching them. And I can just do z syntax or z 230. And then I don't have to know the exact name of the folder, but it'll just jump me right into, that's whether I remember the number or like the numbers are nice, because it'll it'll show me like, kind of by date of when, when that project was created. And then the name is nice, because I can often just look it up by by the name of that. And then inside of that, I'll usually have a code folder that has the application in it, I'll have a assets folder that contains anything that the client or myself needs to hold on to, whether that's textures, I'll often grab a lot of icons from the noun project, and with the noun project, you need to credit people that that you use those icons for. So I'll keep a running list of icons and people I need to credit in their logos, you name it, and then I'll have a design folder that contains the source images for for Photoshop. And then I usually just do get inside of the code folder, which is the web application. Nice. Yeah, yeah. So mine, again, is Meteor. So it's a little bit different Meteor 1.7, recently came out. And before Meteor had everything eagerly loading. And this is like an old legacy thing. And Meteor is that by default, everything was sort of eagerly loading. So if you didn't want it to eagerly load, you put everything in an imports folder. So everything of mine currently lives in an imports folder to do like, proper important structure. However, now that 1.7 is out, you don't have to do that anymore. So I'm working on modifying this right now as we speak, actually, but eventually, or pretty much everything inside of my imports folder is my application. And that folder structure looks like API, where I have all of my graph qL, mutations, schemas, all based on feature. So I'll have my entire API based on feature broken up into its individual folders inside of my API folder. And then I have my UI folder, which has all of my react components, which are server side loaded. So it's not necessarily like a client folder, it's basically just all of my components. inside of my UI folder, I have an elements folder, which has an index dot j, s, which imports all of my styled components. And so I have this is this is not necessarily the style components in my site. This is the base components. So I have a whole system of elements that are based components that are almost like my own bolt, it is my own design system. Anytime I need any of these components, instead of having to import one from a specific file, I'm importing, you know, input from elements, essentially, it's almost like it's its own node package, while keeping it in the codebase. So I have that as well as like sort of design utilities. And then each of my features in the site are broken down and sort of feature folders for those individual components all again, React components inside the UI folder. Next, I have a startup folder, which has both client and server startups, which is where all of my Apollo config sort of lives. Well, it's not necessarily the config, it's all of the Apollo startup stuff in my server side rendering stuff in the Apollo server config lives in the API folder. But it basically imports everything in there. And anything that needs to happen on startup, whether that's server side rendering, or collecting styled components for server side rendering, or any that sort of stuff happens inside of those startup folders. And then I have a Utilities folder, which is like utility functions that can be used on both client and server. If it's a client side utility, it's most likely going to be or a UI style utility. It's going to be inside of another Utilities folder inside of UI. But I do have a Utilities folder at the root for utilities that are used across both of those. That's pretty much it. Yeah, it's a main the meat of it. Is it between the UI folder and the API folder? Again? Yeah, yeah. nifty. That's I was like hearing everyone's different setups. And I've learned a lot just by being able to view view other people's layout. And even when you get into react world, you have like a live in components folder and a source folder. And it's kind of neat to to see how other people approach doing this kind of thing. Yeah. Although Did you hear that? Did you watch that? Ryan Dahl 10 things I regret about node.js? Yes, I did. And one of the things he regretted was index.js which allows you to require a folder Yeah. And and leaving the dot j s off of a require. I don't another thing See, I don't like I see where he's coming from. But I like both of those things. But yeah.js is more explicit, but like I am, I don't really care. I don't know. I would just ask

24
00:55:00,000 --> 00:57:20,100
I've honestly just don't I don't necessarily agree I can't even come up with the words. Yeah, but a lot of the things that he if you haven't seen this, Ryan Dahl, who is the creator of Node JS, he came, he had came out of hiding. He was gone for the longest time. And he did a talk at a jazz cough and said the 10 things that he regrets about no jazz and how he designed it, and is really, really, really interesting talk to see someone who had built this thing. say, Okay, now that were six years in on node, what do I regret about it? And that whole a lot of the things that he said were specifically from like, like the language maintainers thing, rather than, like a user standpoint, because a lot of the things that you said of like, oh, that would probably make it harder for me, the developer, but probably better for for the language in, in general. So he's coming, he's coming out with this thing called D node, which is like trying to like a TypeScript based sort of node ish runtime, like JavaScript on the server side, but done via TypeScript, which is pretty interesting. So I'm all ears on that, because he obviously changed the industry with node. Yeah, absolutely. Keeping an eye on it. Definitely. All right, what about sick picks, pick pick, pick, pick another Nintendo Switch game. This is one that my wife and I have been playing non stop, we like to find games that are like two players that we can play their Co Op or against each other or whatever. I mean, cornea is like favorite game to play together is the 2d Super Mario games, where you can both play on screen at the same time. You know, we like to play a lot of video games like that. So we found this game. It's not exactly a hidden or something, but overcooked, which it might interest you because it's basically a cooking game. Oh, you're your two little cartoon characters working in a kitchen. And the whole goal of this game is that you have to get dishes out of the kitchen, and a certain amount of time. So the ticket comes in. And you have to assemble like, let's say you're making burgers, you got a you prepare the meat, got up the lettuce, cut up the tomatoes, you got to cook the beef, you got to assemble the burger on the plate and everything. And you have to get it out in a certain amount of time. So you're all under huge time crunch. So at its very most basic, it takes a little while it takes a lot of communication. By the end of it. Like Courtney and I are both talking like real chefs. We're like, why not burger out like?

25
00:57:21,510 --> 00:59:59,970
It's like, it like really takes that level of coordination. You know, it's hilarious. They'll be like burgers all day. Let's keep going on those burgers. Like, you know, that's hilarious. And we list like crack up. But then the game decides to throw curveballs at you. And it has things like oh, well now there's an earthquake in the middle of this dinner service and the ground is separated and you can access each other or each other fortunate. So you have to start like preparing for these events or one of them you're like cooking in the dark or something like that. And it can become a total mess. Like if you leave the soup on too long or the burger on too long. It catches on fire and you have to go find the extinguisher for the whole thing burns down and you're like totally running around and frantic the whole thing is hilarious. So if you have a games that you'd like to play co op i definitely recommend overcooked I don't think it's just on the switch. I think it's on lots of stuff but we have been loving that game. That looks super fun. I'm looking at on Steam right now. Oh yeah, it's wild. Yeah, it's a blast. Awesome. I am going to sic pick the skyroam Solis which is a global Wi Fi hotspot. So I have a bit of a problem when I go traveling I want data on my phone. But I don't want to just get a local sim because first you have to unlock my phone is unlocked but you have to unlock your phone and if me and my wife both have to unlock our phone, it's like a couple hundred bucks and then you have to go by the sim and charge it up and the most important thing is that you lose your number which if you use iMessage on iOS, and you don't have your number you get into sort of this like iMessage hell where like your messages aren't being received sometimes it's a really big nightmare. And then also like I don't want to lose my number because people have that number they text me people. I still want to be able to get emergency phone calls when I'm away so I like to keep my number so I long time ago use this thing called no roaming kn o w which is a little sticker that you put on top of your SIM card and then you allows you to switch back and forth between your your other sim and this one but it just it just never worked. It's it's It was great because the prices were good. It was amazing because you could just put it on your phone, you don't have to carry anything around that's extra and it just doesn't work very well for me. It took like an hour or two hours half the time it didn't work and then I was spending data roaming data to try to be on the on the phone with support and it just nightmare so I don't recommend that but I found this other one which is the skyroam Solis which is just this like hockey puck, that is bright orange that you carry around and it just makes a Wi Fi hotspot. I think for about eight or nine bucks a day you get unlimited and I put that in quotes

26
01:00:00,599 --> 01:00:37,500
unlimited data you get 500, Meg's of LTE. And then after 500, Meg's either pay another nine bucks, or you can you can go on edge, which is enough for push notifications and whatnot. So I was pretty happy with it, I popped it on to a USB charger, I drove all the way down to Dayton, Ohio with it, and I carried it around all weekend in my backpack. And it was great, nice and nice and sturdy. The only downside was that it's too big to put in your pocket. So if you go to the bar, or something like that, you can't take it with you, either. You want to look like you have a giant hockey puck. Yeah.

27
01:00:38,880 --> 01:00:41,340
Which would not be out of place in Canada button.

28
01:00:42,810 --> 01:05:00,000
Totally would be. Yeah. Seems like normal. Yeah, absolutely. That's hilarious. Overall, really, really happy with it. It's it's also going to be nice traveling with my family because my wife can also use part of that 500 Meg's and they've got iPads for the kids, they can only use that. I don't. Also it's it's kind of cool. Because sometimes if you are traveling even inside Canada, and you're running low on data, I only have six gigs, a month on data. And if you want a hotspot and you want to work for a couple days, or if even if the internet goes goes out in my house, I don't want to use my data plan. I don't mind paying nine bucks for being able to keep working. So check it out. If you're looking for that. I know a lot of people use dates. I was gonna say your wireless provider because I am on T Mobile and is like I get unlimited 24 seven. And what's it called? Like hotspot unlimited hotspot and get this when I went to Iceland, I got off the plane in Iceland and it was like Congratulations, or is like you for driving in Iceland. You get free calling free text messaging, and 3g data in Iceland. And I was like, I'm not paying like, what is it like I'm not signing up for so I'm not signed up for anything special. Just my plan has that. And so I thought it might just be Iceland. No, I arrive in England. No, here's your here's your plan for England. I arrived in Romania. And it's like, yep, you get 3g. You get unlimited text and calling. I was just like, what is this? Like, I didn't sign up for any I actually looked on my plan on T Mobile. And it was like, you're not paying for anything extra International. So amazing. Yeah, I have no idea where utopia that is the United States where things are cheap. And yeah, really. In Canada, all the telecom companies will rob you. And it's not a good deal at all. And some of the telecom companies not mine have this thing called Rome like home, where you can pay nine bucks a day just to use your your data plan from home, which is pretty good deal. Because then you have it on your phone, but I don't I don't specifically have that. So and other people are just like, oh, people are saying just buy a Google Wi Fi and bring a bring a phone or get a Google phi SIM card and put it into one of these hotspot things. But you can't get that. So I'm in Canada. So this might not apply to you. If you live anywhere in Europe, where telecom is amazing. Or apparently us we're telecoms also meeting but I don't think it immediately I think I just got lucky. I'm like grandfathered into some old plan or something. That's nice. What about a shameless plug? Yeah, I'm gonna shamelessly plug my latest react series level to react edges, intermediate react topics. We talked about all sorts of cool stuff, like why and how you would use a render prop and render props are everywhere right now. And I help demystify the process of setting up a render prop based component. Not only that, but I talk a lot about the benefits. So we go step by step by step and why you can see down the line why this thing is actually better. We also talked about portals fragments talked about awesome animations, I use a library called react spring to get physics based animations do work interactivity into your site. So we build like the Tinder layer where you're dragging things around and stuffs happening because of it. So check it out level to react at level up tutorials, comm become a pro. And I'm going to mention the level of pro yearly subscription, because I don't know if it's obvious enough on the side, I'm gonna work on making this more obvious. But if you sign up for a year, you save 25% off that pro subscription, so sign up for a year. And that money there's going to be a new series every single month. And if you look back at each series that's come out so far, it should be an indication of how awesome the content is going to be every single month moving forward. So check it out, level up tutorials.com forward slash pro Thank you sick I'm asking to plug my courses again@wellness.com forward slash courses are all kinds of free and paid courses ESX for everyone, which is now updated for iOS seven s eight all those cinco wait stuff is in there, even though that I recorded that course about a year and a half ago now it's still very relevant is there's a lot of people that are still a little bit shaky on the different parts of ESX. I think a lot of people don't think they're shaky on the on ESX until they come into one of my workshops and you see using classes or backticks or all of the different parts. There's like 30 different pieces of ESX. So check that one

29
01:05:00,030 --> 01:06:18,330
out@esx.io or I've got a course react for beginners, which is going to be I got another one coming out advanced react that will be out shortly. I've got CSS Grid, which is free JavaScript 30, which is free course on learning node, learn node calm, which will teach you all it pretty much talked about my course platform today, how pretty much how I build that thing is exactly what I use in learn no.com. So all kinds of stuff too much dimension on here. But I realized that Scott and I don't necessarily explain who we are every single episode, we teach people how to get better at web development. And we each have our own course platforms where we sell different types of courses. So if you enjoy syntax, consider supporting us and grabbing a course or two at our at our our links hit the show notes for that. Yeah, I think that's something we don't do a good job of, we need to every episode be like, here's who we are and what we do. We're professionals. So yeah, yeah. It's funny that how many people have found my stuff through the podcast, which is makes me really happy because I tried to be on Twitter and YouTube and Instagram. And like, there's there's just different audiences all over the place. And there is a lot of overlap in it. But I think it's important to make sure that we're telling people what we do and why we're doing this podcast. Yeah, I just sell you a bunch of stuff. So yeah, yeah. My book. I don't have a book.

30
01:06:20,340 --> 01:06:33,780
I think that's it. Anything else? I got nothing, nothing. All right. And if you want to see that episode about design systems, maybe we can do that. Next one. Let us know if that's something you're interested in. Cool. All right. We'll see you next week. All right, whose face

31
01:06:35,550 --> 01:06:45,330
head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

