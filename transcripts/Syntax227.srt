1
00:00:00,360 --> 00:00:21,660
Unknown: Monday Monday Monday open wide dev fans yet ready to stuff your face with JavaScript CSS node module BBQ Tip Get workflow breakdancing soft skill web development hasty as crazy as tasty as web development treats coming in hot here is Wes Baracuda Bos and Scott L.

2
00:00:23,580 --> 00:00:24,450
Totally ski.

3
00:00:25,920 --> 00:00:27,450
Scott Tolinski: Oh,

4
00:00:27,450 --> 00:00:52,980
Wes Bos: Welcome to syntax in this Monday hasty trick, we're going to be talking about container queries, element queries. Well, we'll talk a little bit about what the heck they are and why they might be useful what the current status of them and why it's not as easy of a problem as we would like it to be. My name is Scotland's gay. I'm a developer from Denver, Colorado and with me, as always, is the Wes Bos.

5
00:00:53,010 --> 00:00:54,450
Sup everybody?

6
00:00:54,600 --> 00:00:56,400
Scott Tolinski: Sup? Sup? Sup? Sup? Sup, Wes.

7
00:00:57,150 --> 00:01:14,580
Wes Bos: Not too much. just excited to learn about element queries. We've complained about this enough on the show, like, Where is element queries? Yeah. And then this blog post came out, sort of detailing it, it made me feel bad for complaining. Yeah, I think that happens often in web development, you don't necessarily know what's going on.

8
00:01:14,730 --> 00:01:31,530
Yeah, part of the problem is we see the problem, right, this thing that we want to fix, but we like don't immediately see all the people working hard to try to fix their problem. And it's too easy to just be like, I don't want this thing. And then the people that are working on are probably super annoyed. with, like, so.

9
00:01:31,860 --> 00:02:03,180
Yeah, the same thing happened with node modules. Like you've no idea like for for us, it's just like, just add node modules, just just press the button that says Add them and add them. And then like the people working on are like, You have no idea how complex this is. Behind the scenes. It's so easy, being a complainer about stuff like that. But the one thing you don't want is complainer's about your tools or projects and that's why you're gonna want to go ahead and use an iron exception train

10
00:02:03,900 --> 00:03:34,080
in a high quality Scott thank you I'm literally when I got it, I got it in this I'm running a no sleep here. But to finish that sentence, it would be century a century.io, you're gonna want to sign up using the coupon code tasty treat in your bit, two months for free. Now what is century well century is the error and Exception Handling tool that basically allows you to see handle your errors with just about any platform or service that you're running in seriously, Sentry works with everything from any type of back end language that you're possibly working with to front end projects, serverless and more. All sorts of very famous companies trust Sentry with their bugs. And, you know, I don't trust a lot of people with my bugs. So if I'm going to trust anybody with bugs, it's going to be century, they earned Airbnb, Disney, PayPal, Microsoft, Dropbox, Mozilla square, can you name bigger companies than these, and they are all love it Sentry. So you want to check out sentry@sentry.io again, use the coupon code, tasty treat all lowercase all one word. And, again, if you use it, they support it. Apple, Android, GitHub. I don't know, just start naming technology. I'm just going to start technology random generator and Sentry is going to support it. So let's get let's get into this container queries or element queries. Now I've always I've always personally called them element queries. But it seems like container queries might be the more popular term. Have you always gone one way or the other with that one?

11
00:03:34,170 --> 00:04:25,380
Yeah, I'm not sure what I've been saying. But I think container queries makes more sense, because you want to do something when the container is a certain size, I guess elements is the same thing, though, you want to do something when the element is a specific size. Anyways, it's kind of the same idea is that we have media queries, which is based on the viewport size, but we don't have container queries, which means that you could have a component and that component could live anywhere on your website. And depending on how wide or high or any other aspects of it, generally, its width and height, you're going to be worried about, depending on the width and height that that thing fills out, then style it a little bit differently. Mm hmm. And there's some movement in this specific even around JavaScript. We've got resize observer, so

12
00:04:25,500 --> 00:04:31,530
yeah, the Oh, yeah. We'll talk about that. We are going to talk all about it. So where are we at right now with the Scott?

13
00:04:31,710 --> 00:09:58,170
Yeah, so Okay, so I think the biggest thing for you to do if you are interested in more information about this beyond this particular episode is to peep this blog post by Brian Cordell. And it's really just an overview of exactly what's been happening. And we'll try to do essentially an outline of this blog post in this episode. So if you're looking for more details beyond what we're saying here, by all means, read this episode. So really, again, Like you mentioned, we have these, you know, this this issue, right, we've been promised that we will get our Lego pieces, right, our Lego pieces, the things we just plug in, and they just work. But I, for instance, let's here's that here's a good one, right? I have my grid of cards on my website, right. And when the browser is wide, that grid of cards breaks into three columns of cards, right? But those cards individually can change in size based in three columns. But then when you go down a little bit shorter, it goes into two columns. And then in mobile, it's one column. But those cards should look differently based on their own width and not the browser viewport width. Because if you do the media query and say, Okay, at this point, the card text should be this size, well, you'll have a grid of three cards up in the font size will be huge. And then when you have a two card grid, font size will be small, or whatever. So really, these container queries are going to fulfill the end of the promise of having Lego pieces that we can just drop in and have them adjust accordingly to whether or not it is a full width or a half width, or whatever it takes up. So that's really why I want them personally, there's a lot of things that I would use this for. And I do have an alternate solution in place of which we'll talk about. So that's why I want them but let's talk about sort of some of the problems that the team and the people that are working on this problem are facing, because that's really why we don't have to admit is because of all of the problems, right. So what kind of problems exist? Well, as developers, we mentioned in the very first part of this, the show that like we can just declare, we want this thing, right. And in fact, it's so easy to say, we should just have a media query. But have it be an element query. That's it. Okay. Now, it just functions based on the element rather than the viewport. And so the blog post mentions, it's like most of these discussions start off with talking about how do we write them. And that's sort of the wrong place to start for various reasons, because it totally ignores so many of these gigantic, gigantic problems with starting from that by just saying, Oh, this is how it should just work, right. But in reality, we need to look at the way CSS already works. And the way that the paint models already work before coming up with a solution that just drops in. So they were saying that many of the initial, or even just ideas that they come up with, in general, require some major fundamental changes to how browser engines work. And that's not really practical to just say, hey, all the browser's, we need to have some brand new way that you render CSS, and testing that amongst browsers. Having that going in keeping it all performant, at the end of the day is going to be way too much of a thing. To be able to just say, hey, just do it. Right. That will take several years of testing, trying and all sorts of things. So I found this really interesting quote, throughout this blog post this is this is from, like I mentioned, this whole whole blog post is Brian Cordell. So this is a quote from him. It says, Did you know for example, that there are multiple mini year long efforts with huge investments underway already aiming at unlocking many new things in CSS. There are, and I don't mean Houdini. So what he's saying is that on top of all of these other changes that are going on, and that they're they're really working to solve some huge problems in CSS. Well, tackling another one of these things, since asking a whole new aspect of the engine to be changed, is kind of a huge, monumental task on top of all of the other stuff that's being worked on within CSS. So what actually has been happening? Because it seems like the problems are just really large, right, having to write a whole new engines, sort of a lot of problems, right. So what has been happening, if you read this blog post, you will see the word lots of discussions happen. You'll see lots of discussions hundreds of times in this post. That's really what it is discussions and dead ends. Another quote here is how do we make this into more solvable problems? And how do we actually make some progress and mitigate risk, take a step and actually get something to developers? Right now, they have been doing lots of experiments, lots of trying things. And it seems like there's just these huge, big problems. So of which there are two sort of interesting paths that we have right now that aren't element queries themselves, or container queries themselves, but certainly are things that we can use in the meantime. Now one of these I don't have any experience with one of which I have quite a bit of experience with so they mentioned containment, and then resize observer.

14
00:09:58,320 --> 00:10:07,560
Yeah, I saw blog posts on the containment the other day, and I thought it was pretty interesting. But I haven't dug too deep into it. I think we have that on the docket for an entire show. Yeah, I

15
00:10:07,560 --> 00:10:42,990
think that's a good idea to do an episode entirely on containment and resize observer, just to talk about how we can use them. I linked in here a, a WebKit blog post about using resize observer specifically, as a way to basically write element queries. And I think that's a nice little interesting read through. And one interesting note, as they said, that resize observer was inter implemented in browsers in all browsers in about two years. That's pretty darn fast, right? Two years to get a feature like that in.

16
00:10:43,290 --> 00:11:17,040
Yeah, and that's not just like functionality that you can add. It's not like adding a polyfill to new array method, which you can just pop in, like this was fundamental low level stuff, where that feature was not, you couldn't do that beforehand, unless you were to just like continually pull or, or run a set timeout. So this had to have some lower level stuff, where the I'm assuming what happened was the paint engine would then bubble up information about what changed to higher level JavaScript API's. Yeah,

17
00:11:17,400 --> 00:11:26,430
it's very interesting. If you've never used resize a server, it basically it observes for when the window resizes and updates,

18
00:11:26,580 --> 00:12:58,860
it's like a you listen, instead of listening for clicks, you can kind of Listen, I'm using air quotes here. Yeah, listen for not listen to observe when things change sighs and then when that happens, it triggers a callback, which gives you access to the elements that have all of them, actually, it'll tell you which ones have changed and not. And this one right now, for me is probably the most useful in terms of actually getting container and element queries working, although I did find some posts CSS plugin, which we can talk about later, that I haven't used before. So where is all this progress gone? Well, again, lots of discussions, discussions with goog, Mozilla, apple, smart people. And there's basically just a ton of discussions happening about the right ways, a lot of big ideas, some of which could go somewhere, some of which could go nowhere. And there has been no eggs, there's been nothing yet that has been implemented that anyone can use. They did host a neat little snippet here of one proposed idea. And this proposed idea uses something like a switch function that could be used, instead of what you would think of as like a normal media query, what it looks like is a switch. And then you'd have several properties of which would have a parameter saying the size it being greater than this, then have the value be this, the size, you could almost look at as like a straight up JavaScript switch statement, obviously, with slightly different syntax. What do you how do you feel about this one?

19
00:12:59,760 --> 00:14:44,460
Um, it's tough, because my initial reaction to new things to CSS is always just like, oh, but like, CSS variables. Everybody saw that? Oh, that's awful. And then like, no one's complaining about that anymore. It's fine. You know, it works great. The syntax is a bit a bit funky. But they had obviously keep it backwards compatible. They couldn't just add, like $1 sign or something like that, which would have been cool. So this switch syntax looks, I think it looks kind of cool. I was assuming that it would get really big real quick, depending on what you're trying to do. But it looks fairly similar to, to media queries, I like that there. So the way that it works is that you have like basically a switch function. And then inside of each line of that switch function will be available in line size is greater than 1024, then the grid columns will be this. And then if the available in line size is greater than 400, then it's kind of like a, like a switch statement or an if statement in your JavaScript code. It also is using inline in size, instead of width and height, which remember, we did a show on that where they're switching Oh, by the way, like a little bit of a side, have you coded anything with the inline and block instead of width and height? I have not. I have not have you? I try it? Yeah, I did that uses dot tech on that. And then I switched it because of why did I switch it? I think it was just I totally forget, I think it might have been browser support and I didn't want to transpile it just didn't want to deal with it. Or it was just too hard to get my whole mindset over to like this is that so

20
00:14:46,650 --> 00:15:14,280
and I had a couple of people opening issues and they didn't know same with gap. I've been starting to use gap instead of grid gap because gap will becoming a Flexbox as well. And then I get all these issues people opening it up and like you misspelled it I'm like, no. Anyways, go ahead. Yeah. So I should note that this idea it says, there's a note here that it's sprang from an idea from Google's Ian Kilpatrick. And

21
00:15:14,280 --> 00:16:20,310
there's a neat little note that says, I am constantly impressed by Ian's ability to listen, pull the right threads help guide the big ship and coordinate progress on even long visions that enable us to exceed current problem limits, you probably don't hear a lot about him, but the web is probably a lot better for his effort. So shout out to Ian, if you're listening. Hear, Ian, you seem like the man. I do not know you personally. But I'd never heard of Ian's name before. And I thought that was a really interesting quote about him. But okay, so I thought this is this is another little interesting topic sort of about some of the problems here. And it says that a lot of the problems with the existing ideas, as they have to loop back through extensive phases potentially, several times making it seemingly impossible to keep the CSS rendering in the same frame. So really, a lot of the problems that we're running into are going to be perf, based right with how these things will work, or just, they want to, like, at the end of the day, if you're introducing something into the browser, right, it has to be really buttoned up, you know,

22
00:16:20,370 --> 00:17:42,690
yeah, we sometimes have this problem in CSS Grid as well, where like, the problem they're referring to is that if you have, let's say, you have a div that is 500 pixels wide. And then you've got something inside of that is based on the container query, like let's say, a header. And then inside the header, you have maybe like an h2 that has a container query on it, if the outer div changes, that will then trigger a change on the thing inside of it, which then triggers another thing inside of it. But that becomes a problem when you are sizing the width of the outer div based on the insides. And you can get into this sort of non stop loop where one thing triggers another thing, which then changes its size, which then triggers another thing, which then triggers the size, and you just have this infinite loop of things triggering changes on other things. And that is an extremely hard problem to solve. Because at what point do you stop this thing? Right? Right? It happens with CSS Grid as well, if you have an image that's not loaded, and if the column of that is auto, and the image then loads, but then like the other stuff is based on free space, then that triggers a reload. Imagine how you throw container queries in there, as well, like who, what a hard thing to fix,

23
00:17:42,900 --> 00:18:52,020
imagine having to solve these problems, and not just getting to wonder where they where the progress is on them. I feel it's all fantastic. To me, you know, just as like an outside observer, I love any sort of progress on this. So I, you know, whatever the solution ends up being if it ends up being media query, like syntax, or a switch statement, or one thing they mentioned here is maybe that the answer isn't necessarily that we have to throw this all in CSS, but there could be some sort of like hybrid JS solution, based on resize observer and working with resize observer to make things or, you know, explicitly geared towards element queries. So I don't know I'm interested in this. If you are interested in this as well, let us know what your thoughts on container element queries. If you're using any sort of specific plugin or package or technique for dealing with them. Right now, I want to know what you're using. I am using a specific technique myself using styled components. But I also found this container query package that is a post CSS package. Have you seen this West? Have you seen this? Yeah, I've seen this. I just just looked it up when you said it earlier. And

24
00:18:52,020 --> 00:18:53,430
I'm just wondering, like, how

25
00:18:53,460 --> 00:19:27,900
does it work? It's obviously needs a little bit of JavaScript to run on the page. Yeah, in the past, I've done it. It's just run a resize observer and add and remove classes or pipe in the width into a styled component, which which can then render the thing based on the width. But not this, how does this work? I don't know. I don't know how it works. I've never seen it until right now. Since I've been installed components land, I've sort of gotten off the post CSS train a little bit in terms of what exists and what's out there. Yeah, a lot of that stuff happens for you under the hood. So you don't necessarily have to worry too much about it.

26
00:19:28,020 --> 00:21:26,130
Yeah, let's see, and JavaScript runtime. And it looks like this does work with some sort of CSS and j s. I have no idea because I haven't used post CSS within styled components. But this looks really interesting. It seems like there's movement on it. Last commit was January 27. Oh, 2019, not 2020. Okay, so maybe less movement on it than I was making when I initially looked at it, but it looks like it is very usable. The solution that I've gone with is actually a modified version of this styled container query plugin that I have also linked in the show notes. So this is based on styled components, and it is for use with styled components. But if you use the motion, I can't imagine it would be too hard to rewrite this package. In fact, I took a comment in the issue queue of here and rewrote my own version of this package myself to fit my own needs, right, because I have very, very specific needs with mine. And this package could have been made a little bit slimmer. And so I slimmed it down. And then I just included in my own project, and I've been thinking about maybe even open sourcing that I didn't write most of the code, I copied it and then tweak it. But you know, these packages aren't interested in changing their project up, I might post my own slimmer version of this thing. But for the most part, I found this approach to be really nice, where you have basically the app or the ampersand colon container, and the do serve the min width, max width, and you can do whatever you want. Now, I should say that I did run into some problems with this, because like a total dummy, I was adjusting the height inside of my container query. Yeah. And because I was changing the height on it, it was running into some perf issues re firing our resize observer, and when you have that, maybe about, you know, 2025 components doing that all at once. Definitely some CPU hit. So I've since wised up to modifying the height in those kinds of situations.

27
00:21:27,420 --> 00:22:50,700
Oh, yeah. Yeah, see, that's the thing is like, like, I'm glad you noticed that but some people would just like CSS just needs to see and be able to use it and in most cases, it should work fine. Right. Right. And that's really the the crux of this issue is how do you get something that works with what we can do in CSS into so in a way that isn't going to work? Everybody's browsers cool is Barca legit word. I don't know is that uh, oh, yeah. Okay, for for cuz I said it the other day, actually. And my wife is like, what's bark? bark on urban dictionary is it's actually in the actual dictionary to obstruct. Really? Yeah, it's in the actual Webster dictionary. Definition of bark. The sound dogs and puppers make Nago barked a lot at the cutter. So my bark irreversibly damaged. My sound card is borked. Yeah, I've said something like that sound card is a sound card anymore. Hey, all right to remember 18 years ago sound cards? Yeah, I remember sound carriers had like that crappy little microphone on it that you could plug into the park. Yeah. 5.1 surround or whatever. I remember I got how to buy a sound card to hook up my LG. Like 5.10 the day's Cool. All right. Um, I believe that is it. Anything else to add? No,

28
00:22:50,730 --> 00:23:35,070
I am fascinated on this topic. So if you have any plugins or packages that are working well for you to do element queries, go ahead and hit us up on Twitter about the we will retweet you and share that. Again. If I end up breaking my slimmed down version of this styled components one into its own package. I will also link that in the show notes. We'll see I've been going along package crazy lately, just realizing that I can open source most of the stuff in my code base. So yeah, now that shout out to Jared Palmer's Ts dx. ts dx is just about the most dead simple thing in the world to get like a TypeScript package going so now that that exists and I'm you know, into it. I'm just making a lot of packages. I'm just making packages, just making

29
00:23:35,070 --> 00:23:51,330
packages. Yeah, we'll talk to you in a year when you have 10,000 open issues, no people arguing, no issues. If you open an issue, I close it, it works. There are no issues with my packages. Okay. All right. That's it. I think that's enough. Thanks for tuning in. We'll catch you on Wednesday,

30
00:23:54,990 --> 00:24:04,770
Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

