1
00:00:01,290 --> 00:00:02,790
Announcer: You're listening to syntax

2
00:00:03,030 --> 00:00:04,560
Unknown: podcast with the tastiest

3
00:00:04,560 --> 00:04:36,750
Wes Bos: web development treats out there. strap yourself in and get ready. Here is Scott solinsky and Wes Bos. Welcome to syntax. In this episode, we're gonna be talking all about static site generators, which is a topic is something that's been around for a little while at this point. But as certainly heating up quite a bit fairly recently, people are starting to really find out all of the benefits. This episode is sponsored by two relevant sponsors, one of which is relevant because that time of year, it is tax time. This episode is sponsored by Freshbooks. And it's also sponsored by a company called Netlify, which does excellent excellent hosting, all around and lots of other services for static site generator generators, amongst other things. So we'll get into both of our sponsors a little bit later, a little bit more in depth with me, as always is West boss, how are you doing today was doing great. It's starting to warm up around here in Canada, which I'm really excited. It's a little unseasonably warm. So I'm super excited about that. All the snow has melted, and I'm able to take off the parka for once in my life. Hey, that's great. Yeah, what about yo How you doing? I'm doing good. I am recording a new microphone and a like an entirely new setup today. This is the first recording I have done with this setup. I haven't done any tutorials, any pie. I mean, I've done tests, but like, I'm slightly worried that it's not going to come out perfectly. You know how things always take some time tweaking. So in addition to that, I'm getting over a cold for like the 100th time this year. So if for some reason this audio is not great. That is that is why but it will be it will be tweaked to hopefully it sounds nice and buttery. Yeah, sounds good to me. And you. You want to want to drop what equipment you got real quick. I'm sure people are interested in that. Yeah, the microphone is an electro voice ar e 20. It's sort of like a classic voiceover mic, a lot of people in NPR use it. It's definitely like a radio sort of style microphone. Definitely pretty good on the low end of things. I think it suits my voice pretty nicely at a couple of choices. I had a really nice mic before, which is the Shure KSM 32, which is like a really nice mic. But for this kind of thing. It was a condenser mic, it was picking up a ton of noise, any sort of thing outside or whatever. Air Conditioning noise or whatever, it was just way too sensitive. So this is going to be a dynamic mic, it's going to be a little bit more directional a little bit better, I think for this. So I picked up a 286 286 s, which is just like a preamp that includes a bunch of other things such as like a compressor, a de Esser and enhancer an expander gate. And this is just sort of to gate out some of the the noise as well as this mic in particular, it needs better preamps to boost it. If you were to go straight from this mic into your into your interface, it would actually be the signal would be pretty quiet. And by the time you boosted it, it might introduce some noise. So pretty much anyone who's used this mic says you need a preamp, you need a better preamp to sort of be at the signal. And what better preamp than the one that Wes Bos uses to get out all of the noise and all that stuff. Yeah, man, I bought this thing. Maybe two years ago, I bought it right after I released my first react for beginners. Yes, sir. Now it's Yeah, it's coming out for the third time this week. So I've had it for maybe two years now. And it's awesome. Because I don't have to spend any time in post messing with my audio. It just comes in clean once you twist the knobs in the right direction. Yeah, I'm looking forward to a little bit more of that because I had to do so much post production of my audio to remove like AC noise or just background noise in general, like picked up my computer fan and all sorts of stuff. I was I was just like really struggling to process that signal in a good way. And hopefully this is a this is an improvement that department. Yeah, yeah, totally. It's expensive equipment. But I think it's worth the it in the long run where you don't spend as much time messing with your audio. Yeah, yeah, absolutely. And when you have when you have Skype calls with people, they're always like, wow, you sound great. Yeah. Yeah, I know. People always do that already. When I bust up like the fancy mic, and they're just like, man, we're using our computer mic. It's so good over there. Yeah, we're using computer mic, and we're in some like hipster office where it's all glass. And yeah, it's so echoey it's the classic right there.

4
00:04:36,769 --> 00:05:33,690
spurtle. So let's talk real quick about the winners to the syntax. two episodes ago, we did a tasty treats, where you post a screenshot of what you're listening to both to Twitter and Instagram. And thanks so much to everyone who entered and did that it was kind of cool because it gives us a better idea of like who's listening. And then it also gives us a second kind of interesting idea of like, when do people listen? Both at what time time of day as well as, like, we did it for two weeks, and people are still posting daily. So it's kind of interesting to see people not necessarily listen to it on the day it comes out. But over the next kind of couple weeks. Yeah, yeah, that was surprising to me to just how many came in every single day, you know, it was very consistent. Yeah. So keep doing it. It's kind of kind of neat to see people hashtag in big zips and hashtags. Um, so our winners are khalad garba. Yeah, that's from

5
00:05:33,870 --> 00:05:34,529
Unknown: Instagram.

6
00:05:34,649 --> 00:06:06,180
Wes Bos: That was for Instagram. So congrats there. And the winner on Twitter was Dallas Thiel, which he posted a kind of a cool photo of listening in his car which I realized that a lot of cars a he looks like he has CarPlay but a lot of cars pull the the information about the podcasts from the ID three tags of an mp3. And I forgot to put those in for a couple episodes. So sometimes it just says unknown and apologies for that. They won't. won't show that anymore.

7
00:06:06,240 --> 00:06:14,459
Unknown: Oh, yeah. Nice. I could even maybe put that up earlier in the workflow and just set it as the defaults in the editor. Oh, it's a nice,

8
00:06:14,910 --> 00:10:54,270
Wes Bos: it's a it's more because our podcast host takes the mp3 and then it will take the details of the podcast and put it in like the the title and everything and then it will put it into the ID three tag for us is a little checkbox. I sometimes forget that. Oh, okay. Word. Okay, cool. So yeah, so today, or is that? Is that it for the? Yeah, for the winners? Congratulations to our winners. By the way. Congrats. Also, I should know, we didn't pick these people based on their their posts. Specifically. We, we did a randomize slash random. Yeah. So if if you felt like your post was really hilarious, chances are it was really hilarious. And we loved it. So sorry about that. If you had a great one, and we didn't, maybe we'll we'll do another one. That's some point for the best post. Yeah, random posts. Yeah, I think that that's an order. Props to the guy who posted in the shower as well. That was great. I think that might have been my favorite one. That's hilarious. So okay, so today, we're talking all about static site generators. And these, this topic has been sort of hot lately, it's been hot for a long time, though, if you've been paying attention to this sort of thing. I don't remember which was the first it static site generator, I feel like it was probably Jekyll. And the way these things work is, well, I guess, let's just, I guess, go into what a static site generator is it, it takes your files and produces a static site, which a static site is one of which is really just HTML, and JavaScript and CSS, or whatever code that lives as files. I mean, you could open this, these files up in your browser without a server to host them on. And they would still work, right? I mean, this is a truly the build process builds out the site, it spits you out your code, and you have that code, just like an old school website, that you could have coded by hand, the only differences is that they are so much more powerful in so many ways than a website that you would have coded by hand back in the day. Yeah, I still remember the old days of using frames, because if you wanted a header, you would have to have header dot html. And if you were to include that in every single file, then obviously, if you want it update your header, you'd have to go through every single file and update it. So a static site generator gets away from all of the sort of downsides to having a static site, which is manually editing thousands of files and brings you all the benefits of having a static site, which is this thing is just HTML, CSS, and JavaScript. And it can literally run anywhere. Yeah, yeah, absolutely. And, I mean, some of those things, it's like being able to use all of the tools, you know, and love without having to necessarily rely on some of these, like heavier platforms, right? Like, you can have a react site, and you can have it be SEO compliant. And essentially, I mean, not, I mean, you would call it server side rendered or whatever, but have that, that that code actually in the DOM without having to have a Express server that's handling this hydration and server side rendering and all that stuff. And I like a much more complex setup. That honestly kind of becomes a huge pain for some really basic sites. And I think there's just a whole class of websites. I mean, I think the amount of websites that could benefit from a static site generator are just much larger than maybe what some people have in their minds is like what you would use this for. Yeah, so why don't we talk about we want to talk about some of the benefits of a static site generator Yeah, let's do that. So, or maybe maybe we should talk about, like our experience with static site generators in the past. So I actually haven't built a static site in, I don't know, maybe about a year and a half. The previous before that I had built a number of different large scale websites, all based on static site generators. And I was it kind of opened my eyes to static site generators are not just these kind of like, personal websites, where you're a developer, and you have your whole website on GitHub, and it's, it's regenerated every single time you make a change. But these are this is actually viable for larger websites, because and even when we'll talk about, like, even if you have e commerce or dynamic data, or any of that stuff, you can still do that with a static site generator. So you and obviously, you're working on some Gatsby tutorials right now, right?

9
00:10:54,800 --> 00:12:05,280
Yeah, yeah, I just, I just wrapped up. I'm like, a couple of videos away from editing, like the last video in this series, which is pro Gatsby. Gatsby is obviously this was not obviously Gatsby is a new static site generator that came on the scene sometime last year. And when it dropped, I think people got really excited about it, because it's react based. You write everything in react, you use the tools you're familiar with, like react router, and uses graph qL as its data layer, and then it takes everything and just spits out a static site. And I found working in Gatsby to be really just awesome. So I yeah, I've been working on the series pro Gatsby that covers all sorts of different ways for working in Gatsby. And that's really my extent of static site generators. I've never used Jekyll or Hugo or any of these other static site generators that have been popular in the past. I never used any of them. And then when I did find out about Gatsby, it was like, wow, this is this is great for a lot of reasons. So that that's pretty much my experience. I have my site in in Gatsby, but I plan on doing a lot more with Gatsby overall, I've built a few client sites in Gatsby.

10
00:12:06,780 --> 00:12:14,010
Unknown: And that's really my extent of my professional work, or at least non like tinkering with these static site generators.

11
00:12:14,790 --> 00:17:08,330
Wes Bos: Yeah. So what are the benefits of going static? First of all, it's, it's super fast. Because at the end of the day, what you are getting when you generate a static site, is you're just getting a folder full of HTML files, it uses your, it uses like the directory structure to do routing. So if you had a file called like Ford slash about Ford slash dog, you would actually have a folder called about and actually have a folder called dog. And inside of that, you'd have an index HTML, just like probably the first days when you started to learn how to code. That's exactly how we did it. And that's amazing. Because you never have to, you don't have to babysit a server, you'd know that these things aren't going to go out of date, or, you know how like, tech sort of seems to rot. And even though if you don't touch anything, it will go down and break at some point. It kind of makes me look back at the old days where you can still go back to some of these websites that were made 20 years ago in HTML, and they will still work. Yeah, yeah, I think that's a like one of those things where there's like, the less things that can break, the less things that will break. And that's definitely there's way less things that can break in a site. That's just some static files, right? You don't have a server component that needs to eat that could potentially break or any of that sort of stuff. So I think that's definitely one of the huge plus sides. Well, one of the biggest things for me is just how insanely fast they are. A lot of these sites, whether it's Gatsby or Jekyll or Hugo, whatever, we'll get into some of the different ones that exist, they are very, very, very fast. They load almost instantly. There's some time there was a point in my my Gatsby tutorial series where I like did a refresh to talk about like the production speed. And like literally half the content on the page due to caching and other things doesn't like doesn't even flash like when you hit the refresh button. It's like the big image reloaded temporarily. But then like everything else didn't even leave the page. The actual loading times on these sites, or the what they can be is absolutely phenomenal. And I think Gatsby is one of those things that's like really, really seen that sort of speed take off and people have just I think it's a wow factor when you when you hit a site on gasping you're just like, wow, this thing loaded in, you know, like I said 100 milliseconds or one millisecond. How about like don't know when it's 100? Yeah, 100 milliseconds 100 fast website. Yeah. Like it's, it's insane. Some of the loading times you get from these things. Yeah, they're also extremely secure as I wouldn't say like they're impenetrable. But if you have no back end that could possibly be hacked or survived. If something bad, then you you take a whole aspect out of the the security question where it is. It's just HTML being served to the website, obviously still could have your server hack, you can have that JavaScript changed for being delivered to users. But there's there's a whole lot less going on there when you don't have to worry about having a back end and databases and securing routes and all that stuff. It's just HTML being served up to the page. Yeah, I mean, let's think about some of the most common ways WordPress sites are hacked, which is people searching for that WP admin link, or people just like trying to find out if it's WordPress, I like I have a server. And if you've ever checked the server logs, you can occasionally see all these errors where people are just hitting What are common exploits in WordPress packages. So you'll just see like a flurry of links before they get banned, where people are just like searching for whatever these common WordPress exploits would be to be able to get into your site. Now, the cool thing is, is because if you're using a static site generator with something like WordPress as your back end, which we'll get into in a little bit, there, they will have no clue. I mean, there's no connection to WordPress at all, there's literally no connection. And so because of that the users that are hitting your site or whatever, they're not going to be able to search for those URLs, they're not even gonna be able to know that the back end was ever done in WordPress at all. I mean, they would have no clue. And that is a huge boost in insecurity. So let's, uh, let's talk about some of the static sites that exist or static site generators that exist. I found the site, static jen.com, which lists out all of these static site generators to use, and I was, I scrolled, and then I scrolled, and I scrolled and scrolled and scrolled and scrolled and scrolled, because there is, I don't know how to express how many different static site generators there is more than you can possibly count on this page. I mean, you could probably run a script to count them. But I don't want to the

12
00:17:08,330 --> 00:22:06,900
static site generators is such a hilarious thing that it seems like every single developer at some point in their life, thinks that they're going to build a static site generator. That is the end to all static site generators. And then before you know it, you've got 40,000 stocks. Yeah. So I guess let's talk about some of the big big dogs. And then if we leave out what your favorite big dog, you can let us know what your favorite big dog is. a hashtag runnin with the big dogs. For those shirts. I love those shirts. So well, I don't even know what you're talking about. Just Google, sometimes Google running with the big dogs. There's these there was like, I feel like at one point, there was like a run in with the big dog store in the mall. These shirts are ridiculous. They were like a cultural trend in the United States in the 90s at some point. So apparently didn't make it up north. Okay, so. So some of these static sites are, we have Jekyll, which is Ruby based, which is really been around for a long time at this point. It has 33,002 stars on GitHub to give you an idea. So Jekyll is very widely used. It has been used for a long time. And I think it was probably the first static site generator that made people pay attention to this, this sort of thing. I could be wrong about that. But in my mind, from what I've seen, that was that was the case. Yeah, the reason behind it is because you can deploy a Jekyll website to GitHub Pages, and GitHub will generate and will do the whole compiling of your static site generator for you. So if you wanted to have a website that was like you can have like custom generation you can still deploy that sucker to GitHub Pages and host it for free which is pretty sweet that's not true for any other static site generator Yeah. And then next we have Hugo which I have not used to go it's go based based on the name of Hugo so I have not even I I've done a little bit of a toying around with with the go language but I haven't done any serious work with it. And I have not used to go at all Do you have any experience with this? Not at all my I do have something funny to say though my my parents dog name is Hugo nice Hugo Boss. Get it? Oh, yeah. But I in terms of the language go No, I've never never used it. Many people say I should. But I've also never used the Hugo either, but it seems like a super popular. Yeah, I mean, from the looks of it. There's there's hundreds of themes. It looks very, very, very capable. They have a big big numbers. They have 23,000 stars on GitHub. So again, this is a very popular static site generator. And it's funny, these two most popular ones are the three most popular ones. According to these GitHub stats, I have not used a and I'm gushing about six site generators over here. So there's, there's a lot here. I mean, there's, there's literally a static site generator for you, if you want to check it out. That's okay. We should also say, you don't necessarily need to know these languages in order to use them. Because they're generally come pre configured, they generally have the ability to add all sorts of plugins for different things that you might want. And it's more about how you use them. then having to actually code anything yourself generally, is you just drop in a whole bunch of markdown or a whole bunch of files, a whole bunch of configuration into these folders, and you run the the build command, and it will spit out a website on the on the other end. Yeah, and they might be good introductions, because it looks like Hugo uses go templates for their, like templating language. So it might be like a good introduction to some of these technologies. If you're interested in learning go, it might be like a maybe like a softer, easier introduction to some of that stuff. Next up, is he Hugo hexo, which seems like it's it's trying to play off the Hugo name, they have a very similar logo, it's just a different color. This is a JavaScript based static site generator that uses ej s or pug for their templates. Again, I have not used this one. But you know, from their website and their from their statistics, it looks very, very capable. They have 20,000 plus stars on GitHub. Have you seen this one? I've seen it. I've never used it. I know that it's it's fairly popular. I'm a big fan of pug. So that would that would totally win me over on that end if I were ever looking at it. But the fact that Gatsby is sort of just come out of nowhere, which in the last like, what how long has Gatsby been around for like just over a year, maybe

13
00:22:06,960 --> 00:27:04,980
I don't even know, if it's been a year I could confirm that I had. Like when it was released, I put out my like, first look at Gatsby tutorial. It was like right when they did their initial beta testing, or initial, like beta release. And I don't remember, I feel like those those videos weren't that long ago, that they have some statistics here. Although it doesn't look like it goes back very far. But yeah, it really hasn't been very long at all. Yeah, it's, it's, I'm so impressed by it. And I also really liked the idea of writing everything in a react component. So if you did need to share a react component between a static site as well as another application that you're using, you can totally do that. Yeah, I guess. So at this point, let's get into let's get into Gatsby then. So Gatsby has 19,000 stars on GitHub, it has not been around for very long. It uses react as its templating language, it's JavaScript based, I believe it uses Webpack. Under the hood, it also uses the tools that you know, like react router, that sort of stuff. And it uses graph qL as its data layer as in, like if you are going to be bringing content in from API's to be generated into this or markdown files or whatever. It uses graph QL. So it uses all this fancy new tech to build really excellent static sites. And let me tell you like the, the speed that they advertise for these sites on Gatsby is just just these things are just blazingly fast, just like it says here. And I say this all as someone who is about to release a course on Gatsby called pro Gatsby later this week at level up tutorials.com. But like, I honestly I would not be be gushing or whatever any of this stuff. If this isn't honestly how I felt I built my site in Gatsby and was like instantly blown away. And all you got to do is go to their showcase and click around on their GitHub page, look at their showcase and just see some of these these sites and look at who's building sites in Gatsby, I mean, a react js.org built in Gatsby. So if it's good enough for React.js dot org, it is good enough for me. That's pretty cool. And I also think like, I think JavaScript apps and static site generators are a bit of a match made in heaven. Because over the past couple years, as we build more complicated applications, what's starting to happen is that everything is actually happening in the browser. Anyways, a lot of your routing is happening in the browser, a lot of your interaction file, uploading can even be done in the browser, all of these things that you used to just need a server for. There. Obviously, we'll talk about some of the use cases where you still do need a server. But I think people are moving over to them now because of the simplicity and because their servers really not doing all that much at the end of the day, right? Yeah, yeah. That that is like the one killer feature of all of these is, it's just incredible. And again, like you mentioned already getting to reuse some of the tools that you know and love. I mean, the React package ecosystem is so huge at this point, you can use any of that stuff in your static site generator and build some really fancy, really fancy stuff. I should also mention that next j s, which I'm a big fan of. So next j. s is the what is it the React server rendered framework from ziet, or site. And they also have an option where you can like when you deploy it, they spin up a tiny little Express server that sort of handles the routing, and the passing the requests to to the actual server, but you can just create a routing config file. And then you can generate all the static HTML and JavaScript that's needed. And you can deploy your, your next shass site as an actual, just static site, which is pretty neat. Nice, nice. As before we move off of this topic of which flavors they come into, I do want to shout out nuxt, which is a new hot one as well, which is a view based view framework based, static site generator. It's got 10,000 stars on GitHub, it's definitely one of the the new the the new big dogs, it uses. Like I said, view j s. So the view crowd, if you're looking for your stack, set static site generator, if you're like, ah, I love the idea of Gatsby but it's react, check out nuxt and you XT .js dot org. This one definitely looks promising. I haven't used it myself can't talk too much about it. And that's it. We actually, we've been talking about doing this episode on Vue JS where since Wes and I both don't use view, we are going to do like a mini app that we were just going to both code and just report back on our findings in another episode. If that's something that you'd be interested in, let us know I we got some pretty good feedback on that already.

14
00:27:05,820 --> 00:31:41,400
Yeah, I think that's gonna be super fun. Because like, I've heard such good things about view. And I've heard such good things about nuxt, which is the reason why it's called knucks is because it's the equivalent of next in view, which is kind of a funny name. I really like that. Yeah, right. But I'm if we do do the view app, I'm definitely going to be using nuxt because I'm I both in react land and and everywhere I'm I'm so sick of build tools and complexity and configuring things. And just the beauty the beauty of using next j S has just been I've just been so in love with it. So I definitely got would like something like that and view world as well. Yeah, I love that stuff, too. Cool. So I think it's a good time to hear from one of our sponsors. Our first sponsor today is Netlify. This is an extremely relevant sponsor for this episode Netlify does hosting for sites. And they're their whole sort of slogan here is right front end code, push it, we handle the rest, and Netlify. When they say they handle the rest, they handle the CDN they handle. They have an easy command line utility, they give you a one click SSL, which we all know the SSL is becoming way, way, way, way, way more important. So that one click SSL sort of takes the headache out of having an SSL who doesn't love that. It's easy to scale. There's extreme caching, there's continuous deployment, there's pre rendering, you can roll back your applications. And on top of that, like it makes working with these static site generators a dream. So let me like tell you the process of getting your Gatsby site up onto Netlify. You push your Gatsby site to your GitHub page, okay? Or not even to your GitHub page, you push it to a GitHub repo, or it could be a Bitbucket or get lab or whatever you log in to Netlify. You log into your GitHub account through Netlify. You select the repo and you hit go. And Netlify understands that your repo is a Gatsby site. And it understands you don't have to set up the build tool or anything it's going to automatically without you having to even tell it, it's a Gatsby site, set up the build, build it and anytime you push to that repo, it's going to build a new site for you. And you could have easily set up your custom domains SSL all that stuff. hosting a static site with all of these features has never been this easy. It is absolutely incredible. I was completely blown away by it. I was using this service in my in my upcoming pro Gatsby course and I had to put a disclaimer in the course that there this This video was not an advertisement because I was talking so like positively about it. I always love when you have to be like no they're not paying me for this. I actually just freaking love it, right? Yeah, yeah, I know exactly. I was just like, I'm sorry, this, this whole video sounds like an advertisement, but I'm really just blown away by this service. So netlify.com forward slash syntax to check out this this service seriously, you're gonna want to go ahead and sign up and just try it just push up a Gatsby site to this thing, and you are going to be blown away again netlify.com forward slash syntax. It's a, you can just go to their site and look at all of the different companies currently using Netlify, I think you'll be blown away. So netlify.com is just superduper. Cool. And it's not just gets but you can post on that was that static site Gen website we were just talking about, they have a little button that shows you all of the different static site generators that allow you to post to Netlify are easily deployed to Netlify. And it's like, it's like, all of the big boys, all of the big dogs. That's so nice. The one thing I'm seeing here is that they have form handling, which they're in beta right now. Yeah, see, because that's like, that's like one of the few things that you might need a server for. And if that's the case, you're like, oh, maybe I'll have to make like a serverless function or something like that. But if it's all nicely built in and form handling is one of those tough ones, because you have to deal with spam and bots and stuff like that. So it's pretty neat that they're rolling that into it looks like even in their their free personal plan. Yeah, yeah. And that's another thing, they give you a ton of stuff in the free plans. So if you're, if you're like a little wallet shy, check out the free plans to try it out, you're going to be blown away, you're probably just want to give them all of your money anyways. Also, I

15
00:31:41,400 --> 00:33:51,120
should, I should mention that they wanted me to let you know that they are hiring. So web devs out there, which is hopefully, most of you listening. Check out netlify.com forward slash careers or just go to netlify.com down on the bottom of their their sitemap down there. There's a careers link, go ahead and click on that they are hiring for all positions. They're hiring remote or local. And if that sounds like something you'd be interested, they are looking for you. wicked, wicked. Looks like I'm just looking at why that's built in. We use go and c++. Like it. Yeah, that's what that's our back end. Totally Wicked, great user experience all around. For the rest of this episode, I'm gonna be talking about how much I love Netlify. And this will not be part of the I promise myself. But yeah, again, netlify.com forward slash syntax. Okay, so we talked about, you know, what static site generators are? We've talked a little bit about why they're dope. We talked about some flavors of these static site generators. Let's talk about some of the common pitfalls, because we just sort of hinted to one of them a second ago. Yeah, it's anything that you might need a server for, is because I guess the downside to a generated website is that at the time of generation, that is your most recent content. So if you wanted to use any sort of dynamic content, maybe you if you wanted to, like schedule a post to show up, then you would have to schedule a region of your website at that specific time. If you wanted to do search, that's that's one, like, you can't have a search page for every single query that someone might search for. You can't generate that you need it to be generated on demand. And there are solutions for all of these pitfalls. And they generally are, surface themselves in external services that sort of handle that piece for you. So in search, what's the, what's that search company that I'm trying to talk about? I'll go,

16
00:33:51,120 --> 00:33:53,070
Unknown: I'll go Yeah, I

17
00:33:53,070 --> 00:37:27,360
Wes Bos: said, Yeah, I have to, like read their neck to be reading their name to be able to sell golia. Yeah. They're awesome. So if you if you don't want to have to handle search, you can use it as a separate thing. Ecommerce is another one, like if you want to be able to charge somebodies website. And it's funny that a lot of the times sponsors may be past or future are the solution to this because like, what, what did we have snip cart, have a sponsor a bunch of episodes a couple of months back, they do all of the they do all of the handling of your e commerce without needing a back end. So sometimes you do need to reach for these things. And generally, the solution to that is you have to subscribe to some sort of service, and they handle the complexity of that in turn for you not having to build your own back end. Yeah, yeah. Another thing I hit, or at least I noticed in the comments for my previous Gatsby tutorial series, the free one was that like people didn't necessarily understand when it wasn't behaving dynamically, right? Like they would maybe add a new post. Like how Gonna add a new markdown post, and this is going to bring this post into my blog. And then they would refresh their page. And there'd be no new blog post. And they'd be like, what's up with that like? And what are these pitfalls is like it's a, it's a static site generator, it generates a site. But to generate that site, it's not necessarily always going to do so on demand, you oftentimes need to generate the site. And at that point, it's going to look through your file system or hit your API or whatever. So the site isn't hitting the API every time you load it, which is a bit different than from how many other apps work, right. A lot of times when you work with an API, it hits the API every single time you load the page, or whatever this hits the API on build. And so it will not touch the API after it is built. So that's just a little thing I know people get hung up on is sort of like, Oh, isn't this updating? Oh, you got to build it. It's just HTML. Yeah, right. Yeah. And then you mentioned the server side functions, contact forms. It's funny, it's like where it's like full circle, right? Remember, like back in the early days of HTML, it's like you wanted a contact form? And like, what did you do? You had to have a like a Perl script or like a PHP thing that, like, all it did was send your emails. Yeah. So I mean, here we are with static sites that have no capability of sending emails, and it's like full circle. So you know, the surfaces like the fact that Netlify is adding in the email thing. That's the email problem, the fact that like a hosting service like this could put in, like email sending a Yeah, that that's a big, big, soft to one of the most annoying problems. I think, just because there's only a couple gotchas that we've gone over, and you generally need search or form. And if they can supply that, I think that's pretty neat. Yeah, when was the last site you built, that didn't have some sort of like contact on my Scotland ski calm, because I didn't want to have to deal with it, I just did put my my email, I just don't want to deal with the form. Just here. Email. Yeah. And then it frustrates me because I always like having a contact form. Because without a contact form, people don't necessarily give you the information that you need. So by having a contact form, it sort of like forces them into supplying the information that you specifically need, like I when I did freelancing, I would ask for, specifically for budgets and what their website was because people forget to offer up all that information.

18
00:37:27,510 --> 00:37:40,460
Unknown: Yeah. Or they're trying to be like, a business about it. They're trying to be like, you know, I don't want to tell you what, like, I don't want to play my cards until you tell me how much it's gonna cost. So yeah, if you make that a requirement, definitely a nice thing there.

19
00:37:41,420 --> 00:40:35,310
Wes Bos: All right, any other any other common pitfalls that you've run into? I guess, I have one that may have started to cut you off. But I do have one in with that. When I was building one, I was using a one called all struct, which is a Ruby based static site generator. And it worked great. Except that the what was it it was the the feedback was very slow in that like, when I was building a website, I wanted like to be instantly refreshing the page. Yeah, and I would save a file and have to sit on my hands for a second or two while it generated it, and then whip and then refresh the page. And that was a credibly frustrating, because, like, I like a nice, quick feedback. And I'm so spoiled now with the hot reloading of my react components that anything less than instant really sucks now. So what is your specifically with Gatsby? What does that look like? Oh, it's fast. They they have they have some hot hot reloading? Yeah, no, there would be times it's so funny, because, you know, I've been primarily working with some pretty big apps. So the compile time is not it's not like super long, but it's definitely not instantaneous, and be able to save a file. And then before I can even tab back have that being updated is like a was like one of the funniest things in this tutorial series. I'd be like, okay, and if we head back to our page, we should say, Oh, it's been updated already. Okay, like, the updating the hot reloading is super fast. Obviously, if there, I think if you make like a new markdown file or something like that, you do have to, like start and stop the, the build process. So there's like, occasionally things. Well, I should take this back. If you are like, let's say you have a query, like you're building out your blog listing page, right? And you add some new markdown files, that blog listing page itself is like that query is going to find all of the new files, but what won't happen is the actual page generation. So if you try to go to any of those pages, you need to rebuild, you need to start and stop the builder. But for the most part, the like the actual hot reloading if you're working in just styling your thing or whatever, it's superduper fast. Yeah, it's it's not so much the extra content. It's the I'm templating out in, in formatting in dealing with interaction hovers and yeah clicks that needs to be quick because it's incredibly frustrating to debug something with a two to three second delay. Yeah, and every change worse. Yeah, that's absolute worst and it makes you like, want to do something else. Like I have such a short attention span. If my thing's not like hot reloading that fast, I'm just like, Yeah, I just think back to before no lib sass came out in I had like a 10 second sass build. process. Yeah. And it was like, color red.

20
00:40:35,310 --> 00:40:37,050
Unknown: Oh, wait for 10

21
00:40:37,050 --> 00:44:10,710
Wes Bos: seconds, and then it would refresh. And oh, I remember that too. Yeah. For you. For you youngins listening. I know, there's a lot of young uns listening to this, like you don't know how good you have it these days. Is that what is get off my lawn moment? Yeah. Okay, so we talked about pitfalls, we talked about flavors, why they're dope, what they are, let's talk about some of the like, one of the things that goes along with the pitfalls is updating. Because think about it this way, you have a static site, you run a build command, you build the site, you move those files up, like an old school way, you would just drag them and drop them via FTP or something like that. And you make some changes, you add a blog post, what doesn't happen is site doesn't immediately update. I mean, let's think about this. One of the ways that it's commonly used to, to add a blog post in the static site generators is something through like headless WordPress, where you are only using WordPress as back end, the static site generator, WordPress is API and building the site. Now in a WordPress site, you'd be used to adding that post, going back to your app, your website and having that post, just be there. But since the the site itself isn't hitting the database, the site needs to rebuild. And therefore, you need to tell the site to go rebuild or re fetch that data. And this is just true with like any sort of back end you're using. I mean, typically, you're bringing in data from an API of some kind, right? Maybe it's an API that's querying your markdown files and your file system. Maybe it's a headless WordPress, maybe it's a headless Drupal, there's something called Netlify. CMS, which is pretty sick, little modern style CMS here, this Netlify CMS is actually basically just a system that sits on top of your markdown files. So when you add new posts, edit new post, or whatever, it's just editing markdown files, rather than hitting a database or whatever. But that is a big problem is, is hey, you've made these changes. How do you get this site to update? Yeah, I think this is, I think, I think that's worth it. And because like the the big website that I was doing was a static site generator, it was based on Drupal, because I often think I people think static site generators are just for developers who are so hardcore. And they, they write their blog posts in markdown and put all their images, they have a script that resizes the images and stuff. And at the end of the day, that's not actually how real world users run their websites, real world, users want a back end where they can log in and upload their stuff. And they can it can modify all their pages. And that's great. Like, you still need a WordPress or Drupal or some sort of CMS interface to manage your content. But it's really important to know that these static site generators can just ping your API and grab that content. And then it's just, they just don't know thread it into the HTML, and then you're, you're in good shape. You don't have to, you don't have to fetch that blog post from the database every single time. It's unnecessary. You just have to, you have to fetch it once at the time of posting. Yeah, yeah. So some of his big solutions to this is one of the again, I'm sorry for coming across like a shill here or something. But like the Netlify service, one of the things that does is like it looks for updates on your GitHub now. So if you're using like the Netlify CMS, which updates your markdown files when you make a save, and like actually pushes to the repo that triggers a rebuild and rebuilds your files.

22
00:44:12,000 --> 00:45:53,610
So like that solution, right there is pretty slick. But it is definitely a little bit more developer focused like to log into it, you do login with a GitHub account. Now like headless WordPress, or content fall, which I haven't even mentioned, content file content feels like an API as a service. Basically, it's WordPress is back end but you create an account and they're not expecting you to have a front end like like content full doesn't take care of the front end, it just takes care of the back end and it takes care of those those tools really nicely, right. So with something like content fall, you would actually just a Content folder in Netlify. They work together really well because like when you have like a Netlify hook that is just waiting for a POST request to come in. And then in content for You just say, hey, anytime I make a new post, send a POST request to this address. And then what happens is you write your content, your blog post your your user still get the interface, like a WordPress kind of thing. And that hits that post tells is a Gatsby site or the whatever site to rebuild, it then fetches your new stuff and rebuilds and sort of essentially solves two problems, right? That you could have with this stuff. And that's going to work with content folder WordPress, or any that sort of stuff. You're just sending a post hook to tell it to rebuild. But the long end of the story is like, if you are updating your content, you need to tell the site to rebuild somehow. Makes sense? And I think in a lot of cases, that's totally worth it, where it doesn't need to be instant. It could be I don't know, however long it takes to rebuild and redeploy the website.

23
00:45:53,820 --> 00:46:01,350
Unknown: Yeah, what certainly won't be instant at that point. So do you want to talk about our next sponsor, it is tax time.

24
00:46:01,980 --> 00:48:30,180
Wes Bos: It is and I actually this sponsor spot is going to be a personal story from the book of Wes Bos. So the sponsor is Freshbooks. And, as you likely know, Freshbooks is cloud accounting software that if you're running any sort of small business, you're a freelancer or a small business, then you can use it to keep track of your invoices, keep track of all of your expenses, keep track of all the different types of money come in, I just did my taxes. I had billed people in four different currencies over the year. And it's it's really fantastic. And one problem that I had was in Freshbooks, you can have multiple types of taxes. So depending on like where you're at in if you have different types of taxes in Ontario, we only have one tax is called HST. And I had my assistant put in all my expenses in as HST and she typed in HST, however, I had put in a whole bunch of expenses as well. And I typed it in as capital HST. And I was sitting there and it ran my my tax report, and my account was waiting for it. And it spit out this report as to different types of HST, lowercase HST, and high and uppercase HST. And I was like, Oh, darn. And there's no way I could go back and edit like 300 expenses for uppercase HST. So I called Freshbooks. Up, picks up on the first ring, I tell them what's happening. And they say, Oh, yeah, no problem. And no problem. No problem, we'll run what's called the script. And I was like, I'm a developer, I know what scripts are. And we hung up the phone, and I went and got a coffee. And I think within about 1015 minutes, they had run a script on their end and updated it. And that was my own error from from not inputting it the same way. But they fix it for me, really quickly, their customer service is fantastic. Which is pretty neat to be able to just call them and, and I'm pretty sure, I don't know if this is still true or not. But I have a bunch of friends that work at Freshbooks. And I think when you're every everybody has to take a little bit of time every year to actually work support. So sometimes you get developers that pick up the phone for support. I've called him a bunch of times, just done a little little questions I've had about reports and whatnot. So their support is amazing. You should definitely check it out@freshbooks.com for slash syntax use syntax in the How did you hear about a section?

25
00:48:30,420 --> 00:48:39,030
Unknown: Yeah, I've always heard such good things about their support. I haven't I haven't had a personal experience with them myself. But I've always just heard and mostly good things about it.

26
00:48:39,090 --> 00:50:20,370
Wes Bos: It's because they're Canadian. Yeah. Hey, actually, we should talk about this sometime. But you should know that I'm actually I don't know if I'm half Canadian but I'm what yeah, I am of Canadian origin my my grandparents. Originally my grandparents parents didn't immigrate into the United States they came from Poland to Canada and then they both were married and stuff in Canada my there my both have like what is their maiden name Marsh and I mean, that's very French Canadian. Oh, yeah. Oh, yeah, I've Canadian roots here West. We're not we're not that one. Wow, that's a big shocker. God is Canadian. Only half only quarter whatever I don't know. Well, you should get that citizenship you can come down here and get a get all that medication. We just passed this thing in Canada or Ontario. Where now if you're under 25 all of your like our health care was free like you see the doctor Yeah, now all the drugs are free under 25 years old, which is unreal. I just got a letter in the mail that my health insurance went down. Because of this change. You no longer have to pay for health insurance for our kids, which is so good. This is not fair. This is not fair. I'm furious. I couldn't I was like, This is amazing. Like I literally walked into This the pharmacy the other day, and I gave them a prescription. I showed them my health card and they gave it to me. There was no cost. He just swallow up Colorado. Poof Colorado, Canada. Yep. I will trade you for cabac

27
00:50:24,270 --> 00:50:32,760
Unknown: hilarious. I don't know if you know the hockey connection between Colorado and Quebec is that the Quebec Nordiques? The Nordiques? Yeah they yeah Buster Denver.

28
00:50:33,120 --> 00:51:29,100
Wes Bos: That was my team when I was a kid when I like pretended to like sports. Yeah, the avalanche and I had a Joe Sakic jersey. Oh, nice. Okay, so yeah, let's, uh, let's head back to last thing we want to get to, which is hosting. Now I know. I mean, if you guys are a fan of different static site generators, we probably missed out on a whole lot of stuff. We always miss out on so much stuff, because it's like, there's so much to talk about. And there's, there's so little time Yeah, we don't know most thing. So in this lesson we want to hit on is hosting and the answer, like the question is, where can you host a static sites? And the answer is anywhere, you can host them anywhere, your files, you can drag them, you can buy the cheapest GoDaddy host or Bluehost, shared host or whatever, and just throw them on there. If you have a simple site, or whatever, it is easy to host them anywhere, including, like GitHub Pages, right? I mean, you could just push things up to GitHub Pages.

29
00:51:30,540 --> 00:51:36,390
Unknown: I mean, Gatsby has a build command that builds directly to GitHub Pages, and you don't even have to think about it.

30
00:51:37,650 --> 00:54:14,010
Wes Bos: So that's just some of the hosting, you can also host on one of our sponsors, which is Netlify, which we mentioned just how easy and nice it is to host there with all those. Like if you need features, right? Like, you're not going to get that stuff from a GoDaddy host, you're not going to get the CDN and the the email forum and all that sort of stuff. So yeah, I mean, the answer is you can host these anywhere. But there are certain like upsides to hosting at a place like Netlify, or something like that, not to mention the free tier is is pretty sick. So I mean, what's your experience with a hosting these sort of things? I have hosted them on pretty much any of these options I've hosted on GitHub Pages I've hosted on Netlify have hosted Yeah, you know, a basic basic Digital Ocean server that I'm using for something else. What about you? Yeah, I think the, what you need to think about here is like I've done, definitely my own server. And the downside to that is the sites get into the hundreds and hundreds of files. And if you're just thinking about FTP in these things up, as you know, if you've ever tried to FTP up an entire WordPress install, it takes forever. And the reason is not because WordPress is huge. It's because WordPress has many files. And if you're uploading many, many files, it has to connect to your server and do the whole handshake between the server for every file, that's why it's slower to upload 1000 files that are the much smaller than maybe like a one gig big zip, because that's just a single file, right? So that's a little bit slow, you then you have to have your own sort of build process. So whether you you have a build processes, and you use something like our sync, which would just sync the the changed files as well. So I've used my own my own Bluehost as well. What else have we used? Basically, just like your own, for that large project, we host our own custom server. What was frustrating about that is it took 20 minutes to deploy. So as soon as the GitHub issue was merged, then we'd have to sort of sit on our hands and, and wait for that to be deployed in a couple times. We had some, like, major changes that needed to happen like hot fixes. And 20 minutes is a long time when, like, what one time this is stupid of me. But I left the debugger command in my JavaScript, which is not a big deal. But if you have Dev Tools open and you run JavaScript, it paused the entire website for for everyone. And it was a developer focused website, too. So the chances of having a developer having their Dev Tools open was

31
00:54:14,069 --> 00:54:32,970
Unknown: Yeah, it was Yeah, right. Exactly. Yeah, that's your audience right there. I know. I know. I I've done I've done like I said, I've pushed up to FTP and whatever. And again, this Netlify thing when I when I did it, I was just sort of like, this is the promised land right here. This is this is what I like this. Is that that stuff I like?

32
00:54:34,860 --> 00:54:45,330
Wes Bos: Yeah, you can also believe us now Zeitz site away, is it it's probably site, I would guess. But oh, man, I say everything wrong. Yeah. Okay, I

33
00:54:45,330 --> 00:54:45,930
Unknown: don't know.

34
00:54:47,730 --> 00:56:07,230
Wes Bos: So sites now does static as well. It's pretty nifty. So there's tons options out there. You can explore them in what most of these don't come with is the the CDN. We talked about last week and Netflix Netlify does come with that, which Yeah, yeah. So that's pretty much it. The hosting options are for static site generators just like pretty, pretty wide. I mean, we had our whole episode on hosting. It's like, where do you always didn't? How do you host them, you set up your server and all this stuff like this. And with these things are just like, Who cares? You know, put them up somewhere. It's easy. I'm actually a, I'm currently going to be moving my my Scott solinsky.com. I'm going to be moving that to Netlify today, because I'm going to take advantage of all that extra stuff. It's not getting any, it's not getting any of that caching. It's like a CDN. So I'm gonna do that. I'm really curious about what I'm going to use because my own Wes Bos calm needs to be rewritten. And just like he designed, and I, I'm going to stay on WordPress, because I've got years and years of content in there, and I'm really happy with it. I just want to build something cool. In the front end, I'm very, I'm very tempted to use the WP graph qL and build it in Gatsby,

35
00:56:07,770 --> 00:56:20,340
Unknown: I think you should, should take a long, hard look at Gatsby as someone who just did an exhaustive tutorial series on it. I am so interested in doing more and more Gatsby stuff.

36
00:56:21,720 --> 00:57:13,290
Wes Bos: You know, it's one site that could be in Gatsby is syntax.fm. Because Let me explain how syntax works is we have a tiny little server that runs. And it serves up our syntax react site, which is built on next Jess. And then we have a little server that will when you ping it for a specific episode, it will serve up the HTML, which at at start of the app, it converts all of our markdown to to HTML. So that doesn't need to be on demand. It doesn't need to be an HTTP request every single time that you want to view a different episode. Because it's it only needs to be generated once a week. That's how often we release a podcast. So we could just generate that as part of our build processes. Yeah.

37
00:57:13,290 --> 00:57:16,560
Unknown: They're good opportunity.

38
00:57:17,010 --> 00:57:20,970
Wes Bos: But well, will it happen? Maybe not? Because I've got right

39
00:57:22,140 --> 00:57:25,830
Unknown: now there's, there's so much so much to do. So yeah,

40
00:57:25,830 --> 00:57:26,400
I think

41
00:57:26,400 --> 00:57:57,420
Wes Bos: that about wraps it up with static sites. Again, we probably left off something that you are upset about. So if we left off anything, go ahead and ping us at syntax FM on Twitter. We want to hear your thoughts on static site generators, which ones you like which ones you don't like why you like them, all that sort of stuff. Want to hear what you're thinking about static site generators? Again, it's not necessarily a new topic, but it's definitely a hot topic. So I guess it's time for sick picks. Yeah, getting sick picks. Wes, I totally had one.

42
00:57:57,450 --> 00:57:58,320
Unknown: Yeah, well do it well, what's

43
00:57:58,320 --> 00:59:45,060
Wes Bos: your monitoring his sick pick my sick pick is the is going to be a VS code package, or extension, I guess you call them. This is the J s refactor extension for vs. code. And as someone who has been writing a lot of async await code, along with some other stuff, this package makes it super simple to wrap your code. Like you just type your single wave function and you finish it. And then you're saying, Oh, yeah, I gotta have a try and catch. I gotta always have a try and catch. So you just highlight your stuff. Do a command, select to try and catch from the menu. And then it wraps your code in a try catch, hey, you didn't even have to type it. Oh, I say that as like, hey, it's the try catch thing. But it's not just that there's a whole bunch of different things you can do with this package. Let me just pull it up here. refactor j s refactor. Okay. This package can handle in addition to wrapping your code and try catch it's essentially just like wraps your stuff, right. It can wrap your code in an arrow function and that sync function condition generator and iffy. You say if he or if he I say iffy, okay. It does things like converting your functions to arrow functions, converting to template literals. It is really cool. I've been awesome. It's slick. Yeah, I can't believe I couldn't find this. I just started Googling around because I was like, I'm so sick of writing try catch. So I just looked for that functionality. Specifically, I stumbled upon this and I've been I've been pretty, pretty pumped about it. Wow, this is wicked. Wicked. I'm gonna check it out too. Because it is the ability to convert to an arrow function. What about converting back?

44
00:59:45,060 --> 00:59:50,370
Unknown: Does it have that? No, no convert back. It should only convert what way?

45
00:59:51,600 --> 01:00:41,670
Wes Bos: Once you've arrowed you cannot go back. Yep. Cool. Check that out. My sick pick is also going to be a VS code extension on it. Cuz we did a whole episode on VS code, but people ask me all the time, like, what are the extensions that you use, and I'm always going in and out of them, trying different ones and disabling them, enabling them. One of the one of the ones that I use all the time is just auto rename tag is very simple. If you have an opening tag, that's a div and you want to convert it to a paragraph, or even a custom component, if you're working in react, and you have like a store picker component, and you want to rename that to stores picker, you just have to rename one of the tags, and it will update the corresponding closing tag. Which is amazing, because you don't have to do that like double cursor select, you just rename one of them, and the other corresponding tag will will update itself, which I love.

46
01:00:41,760 --> 01:00:58,320
Unknown: Yeah, I love that stuff. Modern tooling is just so excellent. So excellent. For free, for free as well. Yeah. So yeah, I guess. So we got some sick pics in here. Wes is currently taking a photo for Instagram of this recording session.

47
01:01:00,120 --> 01:03:56,850
Wes Bos: I think I want to get into some shameless plug since I got something to shameless plug. And I'm really excited about it. I've been making tutorial courses for a long time. This is easily one of my favorite tutorial courses. And I think it's like very evident in the editing process, just how much I liked recording this series. Because as I'm editing, I'm just like trying to find the mistakes. I was just like I was on I was on a level when I was recording this thing where I was just like, I was so excited about it that I just was it was just coming out of my mouth and recording so well. So this is the pro Gatsby series, which I'm releasing this week, it will be out by the time that this audio recording is released. So level up tutorials.com forward slash store to check it out. Basically, I cover everything you need to know about getting up and running with Gatsby. And we cover all the stuff from deploying hosting everything that we talked about on this show. We we set up an API in several different ways we we import from markdown files, we import from Netlify CMS, we import from contentful. We set up this auto build process we host on GitHub Pages we host on Netlify. We do all sorts of cool stuff. And not only you're going to learn how to build these excellent static sites, like we talked about in this episode, but you're going to learn the insides of some things like the node API for Gatsby or the data layer, how it understands and reads graph QL. And we even have a little fun, I introduced the web animations API and make it a little bit of page transition going in there. So pro Gatsby is going to be out by the time you hear this. So level up tutorials, comm forward slash store or you can become a pro and subscribe and get access to fancy series like this every single month. Okay, good. I'm going to plug Which one should I plug today, close your eyes. And I'm going to plug my ESX for everyone course, just because ESX is what like maybe two years been out for now. And there's still a lot of people taking the course. But as you know, JavaScript continues to go and it continues to evolve. So I had maybe a couple months ago, I updated the ESX for everyone. And now it's a six, seven and eight for everybody. And included a whole bunch of stuff on a cinco wait. And Babel seven, a whole bunch of new stuff that has come to the language since it's been recorded. And the beauty of the six courses that the stuff that's already there doesn't go out of date, because it is the language. So whether it's promises or working with classes, or getting a hold on prototypal inheritance, people, somebody was mentioning how they really enjoyed that specific video. In the past. And this is more we don't really build an entire application. This is more like trying to update your core fundamentals of JavaScript. So check that out at es six.io. sick,

48
01:03:57,089 --> 01:03:59,010
Unknown: sick. Yeah,

49
01:03:59,010 --> 01:04:16,440
Wes Bos: make sure you do that. So I yeah, again, we want to thank our sponsors Freshbooks to Netlify for sponsoring this episode. Again, check out static site generators, check out any of them. They're all cool. Love them. But yeah, that's it. Until next time. Yeah, peace, peace.

50
01:04:20,670 --> 01:04:29,700
Unknown: Head on over to syntax.fm for a full archive of all our shows. Don't forget to subscribe in your podcast player and drop a review if you'd like to show

