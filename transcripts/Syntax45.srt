1
00:00:01,319 --> 00:00:10,590
Announcer: You're listening to syntax the podcast with the tastiest web development treats out there. strap yourself in and get ready. Here's Scott solinsky and Wes Bos.

2
00:00:10,619 --> 00:01:00,960
Scott Tolinski: Welcome to syntax, the web development podcast with the tastiest treats around and with me, as always, is Wes Bos. Say hello. Hey, and this episode, we're gonna be doing another potluck episode, which is where we take user questions and give you sort of rapid fire answers. Whoever's got the answer, we're gonna answer all your questions. We'll also be posting the link to submit questions on our Twitter. So if you want to be submitting questions for the next potluck episode, which we're going to be doing sort of monthly or something around there will want you to go ahead and submit your questions for the next potluck. If you want your questions right on cindex. This episode is sponsored by blue and comp, which is the awesome web development conference in San Jose from O'Reilly Media and fresh books, which is amazing cloud accounting software. So what's up Wes How you doing?

3
00:01:01,199 --> 00:01:27,810
Wes Bos: I'm doing fantastic. We finally finally have some nice weather we had snow like a week and a half ago. And now it yesterday it was 28 Celsius which is let me just convert that to American please do that is 82.4 American degrees II and just absolutely loving this. This warm weather is much needed after a long cold bummer of a winter and now I'm just like, I just want to be outside all day.

4
00:01:27,959 --> 00:01:33,030
Scott Tolinski: Cool. I can do to like open your windows and stuff in your office and I got it open right now. Hopefully

5
00:01:33,030 --> 00:01:49,620
Wes Bos: I've never recorded this podcast with the windows open I don't think so. Hopefully no trucks roll by I have it open pretty often when I'm recording my my courses and because of the audio gear that I have usually takes away any trucks or birds or whatever is rolling by.

6
00:01:49,949 --> 00:02:14,340
Scott Tolinski: Nice. Cool, man. I'm doing all right. Ever since Ryan Yeah, I'm surviving ever since my little issue here. I've been like trying just like not not having any caffeine. I'm like keeping in. So I'm like a little foggy and slow today. So if my questions even a little foggy and slow, that is why it took me like four tries to get this intro correct for this episode. So hopefully we're gonna we're we're gonna be right here.

7
00:02:14,489 --> 00:06:00,510
Wes Bos: Awesome. Well, let's kick it off. I'll grab the first question. And we'll sort of work through it. And then we'll we'll go through the rest. We should also say if you have questions for us are things that you'd like us to cover on the podcast, whether it's big or small. Sometimes these things are smaller little pieces that we'd like to tell people. That's why we put them in a potluck episode, make sure you click the link in the show notes. And that will kick you off to the forum where you can submit your question. So this first question comes from no name. There is no name in there. So good. So yeah, let's, uh, let's call this person Sarah. So Sarah asks, What is an efficient way to process huge data in brackets greater than 740? Meg's from a third party API without pagination, sadly, in node j. s. So this is I thought, this is a great question because I have run into this at some point in the past where you need to pull in a whole bunch of data into your application and then do something with that data in an example that I've had before is, I was doing a first Facebook application for a vitamin company. And this vitamin company would put a pin code underneath the lid of every single bottle of vitamins that they have made. And they had gave me a Excel spreadsheet full of over a million pin codes. And they're associated, like if they were a winner, or not a winner and, and things like that. So that was nuts. And I had to import them into it just a MongoDB had to like massage the data a little bit like I had to transform it into an object. And then I had to put them into MongoDB. And I had to try to read this 1 million pin codes into memory, and then import them into MongoDB, just by looping over each one, maybe doing 10 or 15 at a time. And the whole thing crashed, it just fell over. Because you can't read that much data. It depends on how much memory but at the time, my computer just did not have enough memory to store all the information about those pin codes into memory at once. So this is kind of I The reason why I like this question is because they will teach us about streams versus buffers. So you might be familiar with streams versus buffers. If you've ever used Gulp before, sometimes when you use Gulp, you have to mix and match streams and buffers and they don't totally get along. So you have to use a converter. But the idea of a buffer is that you've read some data. Let's say you have a CSS file, you read the entire CSS file into memory, and then you go ahead and process it. Change it from sass into regular CSS, right? I like to equate that to if you're eating a sandwich, you probably it's like a mini slider and you just pop the whole slider into your mouth at one g once it's in your mouth that you started chewing, eat it. However, what happens if you have a sandwich that is too large, it let's say you have a comically huge size submarine sandwich where it doesn't even fit into your house at all. So it's like poking out the front door. What you need to do in that case is, as this massive submarine sandwich is being brought into your house, you need to start dealing with the sandwich as it's flowing in. And that is what streaming is. So instead of reading all data into a buffer at once you can stream the data. And as those pin codes or as that submarine sandwich was sort of coming into the house or the application, I was immediately dealing with it as it was coming in. So that you're you're not always you don't always have all the data at once you sort of just deal with it in chunks as it streams into your application. And that is exactly how you need to deal with very large files when you're working in a no jazz

8
00:06:00,570 --> 00:06:05,160
Scott Tolinski: nice. Do you have a lot of comically large submarine sandwiches coming into older?

9
00:06:05,400 --> 00:06:18,060
Wes Bos: I wish? I wish. Yeah. But uh, No, I haven't had a comically large submarine sandwich. And I remember when I was a kid in school, we'd have like sub day, did you ever have like pizza day and sub day? No, in school? No,

10
00:06:18,120 --> 00:06:19,830
Scott Tolinski: no, at least I didn't.

11
00:06:19,860 --> 00:06:45,120
Wes Bos: Pizza day was a huge thing for me growing up where we were just like, you bring in three bucks, and you would have pizza, or we had Hot Dog Day and you'd bring in a couple bucks and get out get a couple hot dogs. And one day, we had sub day and they would bring in these just mass of subs on these like 10 foot boards, which I can't imagine any fun to transport. But we stream them into the classroom, cut them into little pieces and fed them to the children

12
00:06:45,180 --> 00:08:02,430
Scott Tolinski: duty. Okay, so let's check out the next item in the Pollak, which is from Benjamin Snyder. And the question is what's new shiny right now that you think is going to go the distance? So what new shiny thing and web development do you think is going to go the distance? And for me, it it seems like it's, you know, been something we've been talking about a lot, but in my opinion, the graph qL overall, but Apollo specifically in the graph, qL community, and that that sort of scene is still very much the new and shiny thing to me. And that is the the one thing that I think specifically graph qL, but when when people use graph qL, for the first time, they're sort of like, wow, I get it, that's great. I don't have too many people that I see use graph qL and being like, I don't get it or I don't like it, right, because once you use it, you suddenly see how lovely of an experience the queries are. And just everything around it is. So for me, I would say that Paolo is the the library more so than relay or something like that. But graph qL specifically, I think is the new and shiny thing that is going to become much more of a much more of a common thing over the next year, your next couple of years or so,

13
00:08:02,460 --> 00:08:59,130
Wes Bos: yeah, I totally agree in the fact that it's, it's like gonna replace rest with meaning that or maybe not necessarily replace rest. But in a lot of applications, you will be using it instead of a REST API, or you will actually be having a graph qL server that consumes an existing REST API, and then maybe adds some other stuff on top. And that's really cool, because it's going to be an absolutely every single language where people are going to be able to use this graph QL. And it's not just a JavaScript and react thing. Like I know sometimes Scott and I are always talking about react and JavaScript, but this graph qL is going to be across the board in every single language are ready is and I think in it's gonna take a while because it requires huge buy in from both the server and the client record requires rebuilding large pieces of your application. So I don't see it, like exploding with popularity and all sudden everybody's using it. But over the next five years, I definitely see it gaining some serious, serious steam.

14
00:08:59,190 --> 00:09:42,899
Scott Tolinski: Yeah, it's just such a joy to use writing graph qL queries overall, or even the the graphical interface, like when I'm teaching now, in my latest headless WordPress course, when we do the Gatsby stuff, and working with the WordPress API, it is such a joy to go into graphical and type out your query and see all the data coming back. For those of you who don't know, graphical is this thing that can come along with graph QL. And it's basically an interface for testing queries where you write your query out, and it immediately spits out the data, but it's also sort of self documenting. You can click into your objects and sort of see what the potential children and stuff are inside of these things. And it is just surprisingly excellent

15
00:09:42,919 --> 00:09:47,970
Wes Bos: to use. Have you checked out well while we're talking about this graph qL Have you tried out graph qL playground

16
00:09:48,000 --> 00:09:48,690
Unknown: yet? No, I

17
00:09:48,690 --> 00:10:45,480
Wes Bos: haven't. Oh, allow me to tell you. So graphical is this like app that comes along with any graph qL server and the folks over at graph cool who are who are behind Prisma They sort of took that and built it into a even more of a resilient application have used this. Okay? Yes, it's awesome. So the way that it works is that it you can connect to your your graph qL API, you can see your schema just like you can in graph graphical, but you can write your queries and your mutations and your fragments in tabs and you can save them. When you run them. The data will show you on the right hand side, it will show you tracing. So I was having some serious issues with slow queries. And I was able to use the the tracing that was built into it. To visualize where was where was the slowest slowness actually happening was that my app was talking to the database was at the request. Yeah, it's, it's really, really cool. It's a desktop app as well. So you could just download that. And

18
00:10:45,649 --> 00:11:09,480
Scott Tolinski: yeah, definitely use this. Interactive multi column schema documentation, automatic schema reloading query history can Okay, so let's solve really sick. I remember I've used this because this is built into the graph cool, like UI version of graph. Cool. that's out there. Yeah, this thing is pretty darn nice. So man, the tooling around graph qL as well. Yikes. This is awesome.

19
00:11:09,659 --> 00:12:09,090
Wes Bos: All right, let's grab the next one. All right, I got two quick ones right here that is a little bit more lighthearted. First one is Wes, can you make a course on how to barbecue some meat properly. And that's funny, but I actually hope to do that one day, I really want to build like, like a cooking series, where I go through a whole bunch of different things that I like to cook like a pizza and a kabocha and a meat curing and smoking. And I just want to go through like the 10 cool things that Wes likes to cook. And I think that will be like kind of a little passion project that'll do at some point, I think it's fun to we've talked about this Previously, on the podcast, we have a whole podcast related to Scott and I's hobbies. And I think it's it's really important when we talk about our burnout episode a couple of weeks, weeks ago, as well, it's really important to have these hobbies where you're always trying to learn something new in a different aspect of your life. Because I feel like at the end of the day, it makes me a better developer to constantly be learning something else other than web development.

20
00:12:09,270 --> 00:12:27,210
Scott Tolinski: Yeah, I get a lot of people telling me to do breakdancing tutorials do and it's funny because it's like something I would love to do. But at the end of the day, there are like a lot of people who are more qualified, who would probably do a better job. But that is a I would absolutely watch a cooking with West series. Absolutely.

21
00:12:27,330 --> 00:12:54,029
Wes Bos: There you go. And then another quick little one is somebody asked, how do you go about learning a new language or a framework? Do you read books, Docs, or watch video? So we covered this last week? I think this question was asked before we released the podcast. But if you want to know how Scott and I learned quickly our strategies or tools, our thoughts on video versus books, then go back and listen to Episode 44, where we talk about how to learn quickly.

22
00:12:54,120 --> 00:15:35,039
Scott Tolinski: Nice, cool, okay, so here is one from my homie Adam Rasheed here. He asks, well, what are the best things to keep in mind when you're the only dev on a team? And I like this question, because I've been the only dev on a team for numerous things, whether it's agency stuff, or whether it's for my own work, whether it's for startup or whatever. And I think the stuff you need to keep in mind the most is that you have lots of responsibilities, you have a responsibility for one clean, organized code, you have a responsibility for nice, well written commit messages in your version control. Because chances are, you're not going to be the only person that's ever touched this thing ever. Like what if somebody, you change your job and somebody else comes in, and then they come back, and they want to see the history of this thing. And they get messages are all like messed up, fixing mess up, you know, like, you want your git commit messages, you want all of that stuff, the commenting, you want all of that stuff to be just like it would be if you had a team, because you never know when you're going to have to drop this project and somebody else is going to have to jump into it, there's absolutely nothing worse than picking up a project that's either undocumented or just you know, written as if you're never going to touch it again. So I like to approach projects, especially when I'm the only dev as if I would be working on a team. And I'll be passing this off to somebody else. Because for me, that is an extremely important things. And I just think about how many times I've been burned when I started at a new agency. And all of a sudden, I've been given a project that either came from a different agency or a previous Dev, and it was just a total mess, and just trying to make sense of either the the CSS or trying to make sense of any of that stuff. So for me, it's that you have a responsibility to really keep these things as clean, organized and excellent as possible as if you were working on it with a team. Other than that you also have responsibilities to make good decisions on the tech you're using. There's a lot of new shiny stuff and I like using new shiny stuff too. But I wouldn't necessarily recommend something that You don't know if it's gonna be around in X amount of years, because that really puts your potential client in a tough spot. Like what if you use some like obscure CMS that no one has heard of, and then they need updates to it. And the new dev comes along was like, I've never even heard of this CMS. So you do have lots of responsibilities for in the future. And so just keep that stuff in mind and make sure you're doing right by you and your client, as well as giving yourself those opportunities to learn like we always like to have. That's pretty much it. Yeah, there's a lot of stuff there that you could say, but keeping clean and organized is, I think the biggest one.

23
00:15:35,159 --> 00:16:02,909
Wes Bos: Yeah, I totally agree. I think it's with developers and contractors that work on your house. Always think the last guy was a total idiot. It's often because of the things that you notices where somebody is, there's too much in the developers head. And not enough is written down in consistency and tests in documentation, whatever it is, at the end of the day, yeah, you do you want the next guy to come in to be like, wow,

24
00:16:02,909 --> 00:16:33,090
Scott Tolinski: they did a great job. I was actually I had been given some code, I was doing some consulting, and I'd be given some code. And I looked at it, and I was just like, wow, whoever did this did an excellent job. And there's nothing there's a great, that's a great feeling when you can look at someone's code and just instantly know that whoever worked on it did a great job. Speaking of doing a great job, one way that you can continue to do a great job and grow yourself in your career is by attending the fluent comp, in San Jose, California.

25
00:16:33,450 --> 00:17:34,020
Wes Bos: Awesome. So we are talking about fluent conference from O'Reilly, you know, O'Reilly, they have the books with the cute cute animals on the front. And so they have a conference on June 12 to 14 in San Jose. But they also have training on the 11th to 12th. Which, if you want to come maybe a day or two early and sit through a workshop with some of the industry's best, I can highly recommend that you check that out. So what are some of the workshops they have a complete introduction to react, which is from a Brian Holt and Patrick Hagen. So Brian Holt works at Microsoft, I think he used to work at Netflix, which those are two major react companies I would definitely trust, trust what they have to say, developing Angular web apps with TypeScript sounds pretty interesting. webassembly deep dive. So there's, that's actually one kind of cool thing we should do a show on is lasme webassembly. And like, what is it? And why is everyone so excited about talking about it? There's another one here learning graph qL, react, and Apollo Well, well, well.

26
00:17:36,570 --> 00:21:11,060
debugging performance, I love as much as I love conference talks, I think workshops are sometimes a better spot to get that hands on experience that you need. I teach a lot of workshops myself, and I love having a full seven or eight hours with like 20 or 30 people and being able to lead them through some actual deep dive real world example. So check it out, hit the link in the show notes. And you can use the code syntax for 20% off. Thanks so much to fluent for sponsoring is the next question we have is something that some people have been asking me like crazy, because let me the question is is Redux for react dead with the new context API. So let's rewind real quick, I put out a video a couple about a month, a month and a half ago on reacts new context API, which let me explain context really quickly. So in react, we've got kind of two ways to hold data or pass data, you generally hold your data in state, and you pass your data via props. And it becomes a bit of a problem when you need to pass your data from one component down seven or eight levels, because you're doing what is called prop drilling, where you have to pass the data down seven or eight levels, and that sucks. So there's this like kind of, there's always been a context API in react. However, it's always been kind of secret, because it's been experimental. And we're always been told, don't necessarily use it. However, the new context API that has come out is pretty neat. So the way that the new context API works is that you can create a context and a file in that can hold that can hold anything really, it can hold data, it could also hold like functions for updating that data, it can hold it really anything that you want. And then when you want to expose the stuff that is in that context, to a another component that is maybe seven or eight levels deep, you simply import that context, and you use a render prop. So you've wrapped your component in it will give you a render Prop, and you'll be able to pass those data in that functions on down, which is really, really exciting. So I was a big fan of this new context API, because part of the reason why people have reached for Redux is just because they need a simple way or a way at all. To get data from maybe your highest level down to your lowest level you need to be able to move your data around your application without having to explicitly pass it down all those levels. And that's what the context API will solve for you. So Redux does that as well. Redux allows you to inject your store in at any level deep, and you can expose that data via props. And that's really exciting. But Redux does a lot more where it allows you to take your both your data your store totally outside, it allows you to write how that data is updated via your reducers and your actions all the way outside, it'll it makes it really easy to test your application in your data structure. You can also have some fantastic tooling around Redux where you can do what's called What is it called time traveling where you can go back in time, you can turn things off. So the only the one little piece of Redux that is getting replaced is the are not replaced, but is now made available via the context API, which is getting your data from one place to another, the rest of the stuff is still totally in Redux. That said, Is it going to stop a lot of people from using Redux? I think so. Because I think a lot of people were unnecessarily using Redux just because they had they needed the ability to inject data at any level. And now that the context API makes that so simple, I don't think we'll be reaching for it as quickly, which I'm really excited about.

27
00:21:11,090 --> 00:21:35,130
Scott Tolinski: Nice. Yeah, I really, I don't know. I like I like this kind of thing. Because, again, it's it's built in now. It's the solution and that sort of way. And it is going to make or I guess, simplify some of those things without needing to learn a whole nother platform. Right when you don't exactly another platform. Unless you do need it. Right. So yeah. Thank you for bringing that to the potluck.

28
00:21:35,300 --> 00:21:37,710
Wes Bos: Yeah, that's such a good name. I love it. Yeah.

29
00:21:37,950 --> 00:23:39,780
Scott Tolinski: I'm really, really loving the potluck theme. It's so good. Yeah. The next item on the picnic table here is from Riley, which is what is the funnest project you've ever worked on the hand? Why? And this is going to seem totally, I don't know, cliche, in a way. But the most fun project that I have ever worked on is my level of tutorial site, because I have full control over it. And I have just unlimited opportunities to try things. And I use it as a playground to try all sorts of new tech. Like, for instance, I was just talking about pop motion pose in the last video. And like if I want to throw pop motion pose into a dev version of my site, I can just throw it in there. And I'm, you know, I have no one to answer to other than me. So I get to just use it as a total playground for code. And I take all those opportunities, especially in development branches, and use it as just a place to try out experimental stuff. So for me, it's a creative playground. And that's why it's the most fun project that I work on. The most fun project that I get to like work on in use is my boy tools app that I made for myself, because I use it all the time and competition. Basically, it's an app that allows me to put my moves into my phone, and I get to select which ones I've used in a competition, and it removes all the ones I've used. So at like the later rounds, when you're getting into the semifinals or finals, as I do. You actually you get to see all of the stuff you have left where other people are like sort of searching their brains to try to say, oh, like what moves Have I done already, right? Because it's in breakdancing worlds, you get docked for doing the same thing twice. So if I have the ability to see instantly all of my moves, for me that makes it really fun. And because of that, I get to really say, hey, what are their kind of tools and things would be really useful for me to have in this in practice or in competition. And I can just write them in quickly and get to try those out. And since I don't have a ton of users, I don't have to worry about breaking anything, I just throw it up there and, and get to try some really fun stuff out really applicable in my day to day life.

30
00:23:39,930 --> 00:24:33,000
Wes Bos: That's I like that. That's really cool. I also really enjoy working on my own platform. But I'd say probably the most fun I ever had is I've built around three or four or five medium sized scraping projects. In the past. I used to run a daily deal scraping website where it would scrape like Groupon and all these other ones into a single email and a page. I had written a scraper for Kijiji, which is sort of like Craigslist down in the States, it would it would grab all of the listings of bikes and and text me as soon as a new one was on and I would buy and sell rode bikes. And I had written a couple other scrapers. I think those are always the most fun because there's no rules. There's no documentation. It's just a website, and you got to figure it out yourself. And I really liked that both the problem solving as well as scratching your own itch and making something that's going to better you as a developer or just a bike flipper.

31
00:24:33,030 --> 00:24:46,740
Scott Tolinski: Yeah, I've a funny follow up question. Is there any project that you've ever been presented like freelance wise or otherwise that you did not get to do that would have been like totally wild? Oh, that's

32
00:24:46,740 --> 00:25:44,910
Wes Bos: a good question. So there was a project that I was presented maybe like seven or eight years ago after I initially did that first webcam where I put the glasses on top of it. I did all this face tracking that got an enormous amount of attention from people who wanted to do some really cool cutting edge stuff. Lots of people contacting me wanting to do online glasses and stuff like that. And I did a couple of those. But what I didn't get to do is some like, like next level 3d stuff where it was using 3d cameras and tracking the face. I think it was for a Google or some sort of like really big, I think it was like a chrome experiment. But it was just so far past my my skill level, I had sort of hacked together this face detection. And then people assumed I was this amazing machine learning specialist. And I was really bummed out because it would have been so much fun. And I would have paid super well. But I just couldn't take it on because it was too far past me at the time. What about you? Yeah,

33
00:25:45,090 --> 00:26:31,710
Scott Tolinski: we worked at a small agency in Michigan. It was like a 12 person agency. And we were approached to build the Insane Clown Posse website. By the insane they reached out to us, I see. Yeah. And so the owners of the company didn't know who they were. And so they were basically like, okay, here's what we're gonna do. We're gonna put on that icps music all day long. And at the end of the day, if we feel like we should do this website, then we'll accept it because it would have been a big paying project it would have been a decent You know, it would have been a decently large project for this agency. They put on they put out ICP all day at the end of it. We're just like, I don't I don't think so. It's not gonna have Well, we'll pass on this. Wow, we didn't get to build that man.

34
00:26:31,770 --> 00:26:37,800
Wes Bos: I CP his jokes are probably some of my most favorite jokes in the world. Like

35
00:26:39,180 --> 00:26:41,100
Scott Tolinski: the the magnets.

36
00:26:41,219 --> 00:27:04,770
Wes Bos: I don't know. There's like a show Workaholics. You ever watch that show? Yeah. Fantastic. And they always make ACP joke. And there's like a documentary on Vimeo. I'll find it and link it up in the show notes about just about juggalos, which are the people that follow ICP around. And it's such a bizarre subculture of people that follow this band.

37
00:27:04,799 --> 00:27:17,160
Scott Tolinski: Yeah, being from Michigan, we have our fair share of juggalos and fago. And all that stuff. Although fago is delicious. Whether or not you're an ICP fan or not, which is something they're they're big fans of so

38
00:27:17,610 --> 00:29:51,570
Wes Bos: Oh, man, that's fantastic. All right. Next one up is a what's the best use case for j wt I've seen some people use it for sessions in react natives as well as web apps. But then I've seen lots of people saying simple session cookies are better for the latter. Thanks. So we've talked about this a couple times on the podcast. But let's go over real quick, what is JW t jadibooti stands for JSON web token, and is sort of a replacement for session cookies, where when you log into a website, and what happens is that you get a cookie, and that set was some sort of unique identifier and that unique identifier comes along with every single request that you make to the server. And then let's say you upload a photo, then it knows that you're currently logged in as Wes Bos, because your session cookie matches the logged in session that lives on the server, right. And that's a fantastic way to do it. But JW T has sort of come along and they give you these tokens, and you can then take that token, and you can store it really anywhere you want. And the most popular way to store it is you put it in local storage, you can also put it in a cookie and have that sent along for every request as well. So there's that. And then when you have a request in reactor in any JavaScript application, you generally write some sort of middleware that says any requests that gets shot off to the back end, make sure you attach this JW t as a header. And it's great, because you don't have to worry about having sessions on your server, you just have to worry about encoding the JW t on your server and making sure that that lines up with someone in your database. So it's sort of like stateless, which is great. You don't have to worry about maintaining sessions on your, on your server, if you're doing that in memory that sometimes can get tricky. Or if you have multiple servers, and you have to share it in a database between the two. And then JW T will also allow you to store a little bit of data inside the JW t. So you could store the user's name, you could store a link to their avatar, you could store some permissions, just like handy stuff. That's something you might need to display on the page. You can never actually use it for doing authentication. That all happens on the server but it is handy to be able to store a couple extra pieces of info in the jadibooti. So is it better A lot of people think so there's are definitely still use cases for cookies and sessions. I think that's in some cases, it is easier to use a cookie in a session. But it's just another way to do authentication in your application in my upcoming react courses going to hand roll the JW t authentication, so I'm pretty excited about that. Sick. Okay, here's

39
00:29:51,570 --> 00:32:10,680
Scott Tolinski: a here's a good one. I like this question. I'm 30 with eight years of experience. I've worked with several technologies like Java C sharp JavaScript, react, react, native Angular graph qL, node j, s etc. I feel like I know a little bit of everything, but I don't master any topic. And that makes me feel insecure, should I focus on something and try to master a particular technology. And this is from Christian. So thank you, Christian for submitting this. I strongly believe in in really narrowing your focus down to a few things, I have largely been known for a lot of my life as the jack of all trades, master of none. So this one definitely reaches out to me in particular, and not even just programming. I was trying to do way too much stuff, right, just way too many different things. And carnie came to me and was basically like, you need to just pick a couple things and just go for them. And you don't necessarily know ahead of time, when you pick these things. You want to maybe use your gut, you want to base it on some some things like, well, what am I see myself doing in the future? What do I enjoy doing? What is something I'm going to be happy doing? But in my opinion, you do need to narrow your focus here, because a lot of these technologies, whether it's Java, and C sharp, and then the other webtech, right? Is your Java and C sharp skills, are those going to be helping you build web tech, do you want to build web tech, if you're building web stuff, it is probably going to be best to focus on on on several key languages and several things that you really like doing, you know, if you if you really double down on your JavaScript period, like your JavaScript core skills, then automatically you get better at node, you get better at react, you get better at Angular, you get better at all that stuff, right? So in my opinion, they really think long and hard about what you like doing. And then if you like doing web stuff, I would double down on your JavaScript knowledge rather than trying to have all of these different things. Because again, it will not only will it make you more employable, but it will make you feel more confident and stuff like that. And you can always do Java, C sharp, whatever, and for fun and whatever, and have it be less of a focus. But I think you do need to straight up say, almost even out loud, like, I'm going to narrow my focus to this. And then I'm going to be that kind of developer.

40
00:32:10,710 --> 00:33:37,890
Wes Bos: I think that's fantastic advice just for for life in general. And that's sort of how I've always seen it with skills in life is that, okay? Now I'm going to focus on being really good at WordPress, I did WordPress for a couple years, and I got really, really good at it. And, and then I moved my focus to JavaScript and said, I'm going to focus getting really good at JavaScript, and then I moved over to to doing node and then I got more into react. And it's nice to be able to say, I am currently trying to slam dunk this thing. And then I'm going to once I get pretty good at that I'm going to shift my attention away and focus in on something else and get really good at that thing. And then maybe you focus on CSS and in life in general, like a couple years ago, I took up smoking and I just really focused on that way of cooking and not smoking. So no smoking me and the smoker had to really focus on your your smoke, literally hundreds of cigarettes a day to get really good at it. And now it does, it just comes naturally to me, I just smoke a pack a day. But I like that because now it's it's not so much of a focus of mine, I do it quite a bit. But it's not something that I really need to put a whole bunch of time and effort into it. It's just a skill that I now have. And then you move move on to something else in your life. And then before you know it, you're 1015 years into your career. And you just started this incredibly well rounded developer because you've gone deep on six or seven different areas over your career.

41
00:33:38,100 --> 00:33:39,840
Scott Tolinski: Nice. Yeah, totally agree.

42
00:33:39,900 --> 00:34:53,190
Wes Bos: swit. Let's take a break for a sponsor. Let's talk about our sponsor real quick. And that is a fresh books as dealing with your day to day paperwork ever brought about feelings that resemble anything close to joy, satisfaction, or we're doing a ad read from from Freshbooks here? I don't think so I've never had joy, satisfaction or ease from doing any of those things. So no, I don't think you would ever use that. So Freshbooks is fantastic for invoicing, it takes like 30 seconds to login and send off an invoice. It has automated expense tracking, which is so cool. You link up your Freshbooks account to your credit and debit cards. And every single time that you have an expense on your credit card, they will automatically import that into your fresh books, which is amazing. And there's online payments. It's gotten I use this a lot to get paid for paid by Freshbooks for the Freshbooks sponsor on this podcast. And you can you can automatically have people pay you directly into your stripe or PayPal or a whole bunch of different types of accounts. So check out freshbooks@freshbooks.com forward slash syntax and use syntax into the How did you hear about a section? Thanks so much to Freshbooks for sponsoring.

43
00:34:53,339 --> 00:34:58,670
Scott Tolinski: Hey q cool. Okay, I do have another little potluck item here.

44
00:34:58,880 --> 00:37:32,730
Wes Bos: Yes, question. We had is why do thousands of entrepreneurs build a SAS, SAS is a software as a service. So think about some sort like Freshbooks, you sign up for Freshbooks, and you use their software as a service, you pay for it monthly. Why are so many of them built on Ruby on Rails any popular alternative. So I think the reason why a lot of these sasses are built on Ruby on Rails is because Ruby on Rails is a little maybe we should explain it. For those who don't know, Ruby is the language and Rails is sort of this like application framework that's built on top of Ruby. So what you can do is you can take Ruby on Rails, and you can sort of hit the ground running, because it comes with all of the stuff built in for interacting with the database for having user accounts for, for doing all the normal stuff that you would do in an application and you have a startup, it's really important to move as quickly as you possibly can. Because often these, these startups are only have a couple thousand dollars, maybe $20,000, in seed round funding, and they need to build something or you're doing it, you're just bootstrapping it yourself, you need to be able to build this thing as quickly as you can just see if you get traction. So that is why Rails is so popular in the software as a service service space. But there are other alternatives I know in, in the PHP world. So Laravel is a framework popular framework for doing something similar to that in PHP. And then I think even on top of that, there's like a Laravel Spark, let me just look this up as a Code Igniter. Two was one for PHP that I don't know if people are still using Code Igniter. Yeah, Code Igniter was one Laravel. spark is built on top of Laravel. And it does things like automated billing user accounts. So even goes further being like, we know you're trying to build a SAS, let's get you up and running with that, which I have always been so jealous of these, these sort of hit the ground running frameworks in these other languages. Because I guess with Meteor as an exception, we haven't. And there's there's like, there's been sales, there's been a cost sales, there's been a couple in JavaScript, but none of them the Keystone jass was looking really promising for a while. But that seemed to have has fizzled out, which I'm kind of bummed out about. So it doesn't seem to be any, like equivalent in the JavaScript space, we always sort of have to build everything ourselves, or go with a boilerplate or starter starter file where it has a lot of these things set up for you. I don't know, did you have any thoughts on that? Scott?

45
00:37:32,900 --> 00:39:01,260
Scott Tolinski: Yeah, I think is pretty evident in the meteor community, like how many people in the meteor community came from rails, and a lot of it was was people who are in the rails community, we're coming to the node. So I personally used Meteor quite a bit. So I saw a ton of that, or where people were coming in from, from rails and maybe even using CoffeeScript. Because CoffeeScript reminded them so much of Ruby. Agree, I it's one of the reasons why I chose Meteor to build my platform on is because I love stuff like this I I built, the original version of B boy tools was in Ruby on Rails, I did quite a bit of Ruby on Rails for a little bit there. And I really liked it. And I personally love this stuff that will save you that kind of time and take care of one of my absolute favorite things about Ruby on Rails was the scaffolding tools, you could just pop up into your command line and initiate like a new collection. Yeah. And when you did that, it would it would build you the entire form for creating, updating and deleting it would build you the layout. And it would set you up so nicely for all this stuff that again, I just wish there was maybe something like this right now. But the platforms are so specialized in this in that you'd probably have to end up writing your own for whatever you're doing. I even consider doing that. I briefly wrote my own and then quickly abandoned it when I found out how much work it was. So I do I wish there were stuff like this. I love like quick scaffolding tools. I love platforms that make your life that much easier. And if you if you like Ruby, and you like the choices they make and Ruby on Rails, I don't think it's a bad option today even it's a pretty sweet platform. Totally.

46
00:39:01,260 --> 00:39:38,580
Wes Bos: I also should say if you are looking to to get a bit of a head start, I have had a lot of people take my learn node course just take the finished files from it, and then build on top of that, because that that comes with a couple different models, a couple, a couple different controllers, routing, authentication, all the stuff that you need to like a back end that you can edit it. There's also this really nice hackathon starter. If you're looking to get into you want to hit the ground running it, maybe you're at a hackathon, you need to build a little app in a weekend. hackathon starter is a boilerplate for node web applications. Pretty nifty as well. I've, I've used that in a couple little projects before as well.

47
00:39:38,880 --> 00:41:06,270
Scott Tolinski: dope. Cool. Yeah, that's a good one. Okay, here's another one sort of, I guess not really along those lines at all. Would you s spot which is stands for single page application versus SSR for large reactor view apps. And the single page application thing would be more of loading all of your JavaScript up and having your Java Script sort of deer page transitions, routing and all that stuff on the front end, rather than having it be server side rendered sort of like a typical server side loading of your pages. And I personally would say, if you can swing it, and you have the time and you have whatever, I would choose SSR over it, because of initial loading times, SEO support, all sorts of just a, like nice little things there that said, like SSR stuff is way more difficult than it needs to be. It's so like, it's so annoyingly difficult sometimes, especially when you're having to get into a lot of custom stuff. You know, one of the reasons I really do like next js is just the simplicity that it gives you for server side rendering. I think there's like no other platform that makes server side rendering as part of the platform as next js, I wish Meteor would have taken some cues for how they did server side rendering, and how to just sort of be the default, the way you do things. I would choose SSR, if you can swing it, and you have the ability to make that happen, because I think the benefits definitely outweigh any sort of the time you're going to put into there

48
00:41:06,300 --> 00:42:03,810
Wes Bos: wicked. I've got another question here says, Ah, it's from Joe Stewart, I need to make an online learning platform. What do you use? And what do you recommend? So the answer to this is both gotten I have custom built our own and the the whys in the house behind both of ours is in Episode 14 of syntax, it's called our stacks explain, and it goes into all the different pieces of it. We both have JavaScript stacks, all the way all the way down, or all the way up, which is pretty cool. But if you obviously can't build your own, there are lots of good things. I've heard good things about teachable, which is good for selling online courses. I've heard Moodle is good. That's I guess that's more targeted at like the the grade school in high school and university crowd. But there are lots of these things are called LMS learning management systems. There are plenty of them out there. If you're looking to build your own. Even with WordPress, there's lots of good plugins for that. Yeah, I

49
00:42:03,810 --> 00:42:20,210
Scott Tolinski: struggled myself with should I have used something like that? How much of the features would have benefited off of it the end of the day, I have so many like custom needs that like it just doesn't necessarily make sense to hack together someone else's thing rather than using all my own good stuff. You know, it's tough,

50
00:42:20,210 --> 00:42:56,550
Wes Bos: the biggest thing I have for why did you build your own versus use x, y, and z is that I'm trying to be competitive here. And if someone everybody else is using this out of the box existing thing, then I can come out swinging with new new features new platform, like a one really good example of was when I turn on my country code discounts, like no other platform had that at the time. And I just like it, put it out. And it did really well for me. And now you you started to see people scrambling trying to get this implemented into their own platform. By the way, please don't email me asking about that. ever talk about

51
00:42:56,550 --> 00:43:05,280
Scott Tolinski: scrambling, you're you're not believe how many emails I get. I say, hey, Wes, does the country code thing? When are you gonna do it? I'm just like, gosh, darn that.

52
00:43:06,270 --> 00:44:35,100
Wes Bos: I get so many emails from people being like, Hey, can you share how you did it? Let me go through it real quick how it does, I'm taking notes by the CloudFlare gives you a header that tells you which country it is the person is coming from. And then based on that I give the person a coupon code for that specific country. And then when they check out, it checks at the country that they're coming for matches up with the coupon, because I built my own coupon system, it I was able to extend my coupon system to allow checking for specific countries as well as specific products. So that's how it is how do I decide what country gets wiped off of that is my own private information? I will never share that. Because I like it's not that I don't want to to share this information with everyone. But I do not want to become an economist. And I didn't I'm already I already get lots of emails from people being like, Oh, this is not fair. This country gets more than this country. And like that's the last thing I want to be spending my time on. I've spent a lot of time talking to people in different countries and asking them, what do you get paid? How much is rent in your country, and have a pretty good idea of what is fair. And I do not want to be in the middle of some sort of like, I know President Obama flies into to talk about renegotiating a specific country quotas. So there is there is a library somebody posted on someone that someone built it with an app that uses an API to calculate parody purchasing power, which you could probably check that out to get some some numbers that are fairly close to me.

53
00:44:35,160 --> 00:44:48,270
Scott Tolinski: I'm gonna do that. Check that I got to implement this. So many people are asking, and for those of you who are asking, it's not that I don't want to it's that I have way too many things on my list. And this is on there as well. Yeah, don't worry about it. It's gonna happen.

54
00:44:48,300 --> 00:45:20,910
Wes Bos: Actually, one of my favorite parts about all this is that some countries, namely India, love to bargain. And, like it's just I guess it's just part of the culture to bargain bargain. In haggle for four prices, so it's funny some of the emails that I get, or people are trying to tell a such a sob story or, or just trying to go back and forth with me. And I don't have time for that. So I don't entertain any of that. It's just that I hope this is fair. Take it or leave it. I'm doing my best here to make it affordable around the world. Nice.

55
00:45:21,030 --> 00:45:21,720
Unknown: I like that.

56
00:45:22,710 --> 00:45:28,080
Wes Bos: All right, I think we're coming up on the end of the show. Do you have anything else? Or do you want to do you want to call it there? I think

57
00:45:28,440 --> 00:45:59,370
Scott Tolinski: we have covered quite a bit. We still have quite a bit of questions in here. But again, if you have questions you want to see answered on the show, please check out the show notes and submit your questions, because we have them all open here. And although we probably have not gotten to your question, because there's a lot here, we always appreciate more questions, because it definitely helps us pick new show topics or even larger shows, or being able to answer any of this sort of stuff. We have a lot of show topics coming up that we're really excited about from user questions here that are going to be into full shows or hasty tree. Yeah,

58
00:45:59,400 --> 00:46:25,950
Wes Bos: I love this. Because sometimes we see the same question six or seven times and then we know we have to do a show on it like us. Specifically, people always are asking about our boot camps and college and a comp site degrees worth it. Right. And that's, that's like a show that we have coming up. That's going to be an entire show, because it's such a big topic to cover. But keep rolling in the questions. Because as we see the same questions as six or seven times, we know that it's time to create an episode on it.

59
00:46:26,160 --> 00:46:28,830
Scott Tolinski: Yeah, absolutely. Do you have any sick pick?

60
00:46:29,340 --> 00:48:05,970
Wes Bos: A pick? Yes, I do. My sick pick today is going to be a repack from one of the earliest episodes we did. Our viewership has grown substantially since then. So I know a lot of you haven't heard the sick pick. And it's an app called parcel. And what parcel does is it allows you to track all of your online orders without having to incessantly check them. So like how you know that pain when you order something online, and you're always checking the checking UPS or FedEx or or Canada Post and it sucks. It's such a pain. So what parcel does is it gives you push notifications. So whenever any of your delivery status changes, you know exactly when they're going to be coming if they've been delivered or if they haven't. And one of the coolest things I like about it is that it gives you an email address. Like there's an iPhone app, there's a OSX app, there's a web app that you can go, there's probably a Windows app, and it gives you an email address. So what I have in my email is these rules where anytime I have a email that says your order has shipped or anything along those lines, I automatically forward that email to this special email. And then it will then parse that for any tracking numbers and automatically add it to my partial app and send me a push notification. So for things like Amazon, as well as any automate anything that I buy regularly, it always just automatically gets added in here. And then otherwise, you just add in the tracking number and it will auto detect a carrier for you. So check it out at partial app.com has nothing to do with Webpack or bundling. It's just for tracking actual packages.

61
00:48:06,090 --> 00:48:06,690
Unknown: Nice.

62
00:48:06,690 --> 00:49:57,600
Scott Tolinski: Mine is also going to be an app, this could be an app for iPad specifically, I recently got an iPad to do a lot of testing on it's my first iOS device that I've ever owned, I've never had an iOS devices, I get a lot of people telling me like, you know, maybe bugs on mobile Safari or something like that. And I thought it was about time that I actually have a real device here to test on safari and stuff like that, for all of iOS is wonderful, wonderful Safari bugs, which there are numerous of. And so I got this thing and I decided to get the pen and one of my new favorite apps is this. I don't know if it's Nebu, or ni boo but an EB o and it's a note taking app that is basically a pen and paper journaling app that you can take. And what you do is when you write, it's constantly converting or handwriting into text. And so you can save this stuff as a txt file when you're all done. And let me tell you, as someone who has terrible handwriting, this thing is awesome, because it correctly identifies almost every letter I do except for my A's, which it thinks are twos because I do it weird looking to a but for the most part that identifies all of my words really well. And it has some nice, really nice gestures. You can slash through words to delete them, you can draw and here and one of the cool things I like is if you do a drawing or a diagram or something, you can click and resize it, you can write and then click and drag and move that paragraph. So it's basically like future paper, right. It's like having a notebook paper right here that you can write on. It's all your handwriting and stuff, but you can drag things around on it and resize them and delete them and do all sorts of really cool stuff, underline them to give headings and stuff like that. I really enjoyed this app. I did quite a bit of research trying to find a nice handwriting notepad app for how much I like notebooks and things like that. And I've been using quite a bit so I'm a big, big fan of this

63
00:49:57,630 --> 00:49:59,910
Wes Bos: wicked any shameless plugs that you have.

64
00:50:00,480 --> 00:50:59,730
Scott Tolinski: Yeah, I have a new course out this month called headless WordPress. It's 22 videos where we dive into all sorts of headless WordPress topics. It's a little bit different than some of my other courses. Because it's not like a clear project, we're usually doing like a full project. And since headless WordPress is more or less, something that you have to learn the common pitfalls and things like that, we explore two different routes, which is one through next js and one through Gatsby. And we talk about sort of how you can work with headless WordPress to pull in all of the stuff that you would need to make a normal blog, how to write your components, how to do your API calls, how to work even with graph qL, or, or what sort of plugins you need with WordPress to make the API more complete. So this is headless WordPress is on level up tutorials.com. Right now, you can purchase it outright, or you can sign up to become a levelup pro and get access to that as well as all of the other awesome levelup pro series that are available right now as well. And all of the future ones as long as you stay subscribed.

65
00:50:59,880 --> 00:51:33,960
Wes Bos: But again, I am going to plug my Instagram. I've been trying to double down on Instagram lately, just because I spent a lot of my day on Twitter, but also, I've been on Instagram for years. And I love it for personal stuff. But it's really been taking off for for web developers in the last six months or so. So instagram.com forward slash West boss and I have a nice mix of pizzas, smoked meat, pictures of my kids and wife and web development stuff. So if you are interested in any of those, check it out. I instagram.com forward slash Wes Bos.

66
00:51:34,620 --> 00:51:41,670
Scott Tolinski: Yeah. And I'm at es talansky if you want to see breakdancing footage, and at level up tutorials if you want to see code stuff,

67
00:51:42,420 --> 00:51:46,770
Wes Bos: wicked. Alright, thanks for tuning in and we'll see you next week. Please

68
00:51:48,870 --> 00:51:51,480
Scott Tolinski: head on over to syntax.fm for a

69
00:51:51,510 --> 00:51:52,770
Unknown: full archive of all of our

70
00:51:52,770 --> 00:51:58,650
shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

