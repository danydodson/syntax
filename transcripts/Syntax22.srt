1
00:00:01,290 --> 00:00:02,790
Announcer: You're listening to syntax

2
00:00:02,820 --> 00:00:05,730
Unknown: the podcast with the tastiest web development treats out there,

3
00:00:05,730 --> 00:00:07,260
strap yourself in and get

4
00:00:07,260 --> 00:00:09,300
ready to live ski

5
00:00:09,350 --> 00:00:30,900
Scott Tolinski: and West boss. And welcome to syntax. In this episode, we're gonna be talking all about our failures, our thoughts on failure, our thoughts on how to recover from failure and what you can grow and learn from failure, how we've all failed on our projects, basically all things, both failure and success here.

6
00:00:31,380 --> 00:01:30,480
Wes Bos: This episode is brought to you by snip cart and dev lifts snip cart is Well speaking of failures, we talked about our the pain that we've gone through on our episode when we did online shopping carts and and accepting money online and the snip card is the perfect solution for when you're building a website, you don't want to have to deal with a back end. So if you're relying on our website in react, you don't necessarily have to create an entire serverless back end or any sort of Express back end to handle your checkout. This is a service that will do it all for you and it'll integrate directly into it. We'll talk a little bit more about them. Also, Dev lifts, we've talked about them on our fitness show, but if you're hearing this for the first time dev list is a they create personal training plans specifically for developers. So if you're looking to get in shape for the new year, definitely time to chat with dev listing and get that personal training plan up and running. So welcome, welcome. How you doing today, Scott? Hey, I'm doing

7
00:01:30,480 --> 00:02:01,290
Scott Tolinski: great. I I ordered some tea that was supposed to be here on like Friday, and then like to separate like Friday and Saturday, it was both out for delivery and didn't arrive. And I'm just like, I really wish I had that tea right now. It's just like pawing through my cupboards for like, five minutes being like, I have to have some tea in here somewhere. And I don't have any I'm completely dry. So I'm wishing they would just get here. I mean, yeah, but how about you other than other than the tea? I'm doing all right.

8
00:02:01,799 --> 00:03:05,010
Wes Bos: Oh, good. Good. I'm doing great. I just got back last night from Paris where I was@the.js conference, and it was fantastic conference really, really well done. The I mentioned last time that it's a different format. It's it's thrown by some developers who used to run TEDx conferences. So it was like 18 minutes 18 minute talk so you really didn't have a lot of time to I don't want to get into you we had enough time to get into what we're talking about. But I really had to trim the trim the fat from my talk and just just get to the things that will help people understand I did a talk on a sink await and I thought it went pretty well. And I got to go first which is always a little bit scary but overall fantastic conference I met a root bunch of really nice people. I met a bunch of really French people who who said that tasty treats my terrible accent but it was hilarious to to hear people come up to me and say hey syntax and then in try to be like I love it. tasty treat. That's Italian. Okay.

9
00:03:05,700 --> 00:03:08,430
Scott Tolinski: Anyone we need more bad accents on the show? Yeah.

10
00:03:11,790 --> 00:03:29,970
Wes Bos: We some like, it was really cool. So thanks, everyone who actually came up and said Hi, to me, it was it was pretty cool to actually meet some syntax listeners in the wild. Yay. Oh, not just cranking away getting ready for the holidays, and just working on some some fun stuff. So cool.

11
00:03:29,970 --> 00:03:31,050
Scott Tolinski: Yeah, that's how to do it.

12
00:03:31,380 --> 00:04:26,940
Wes Bos: So let's talk a little bit about or the entire show, let's talk about failure. And this is kind of interesting episode to me, because when it was first suggested, I've never been like one of those huge fans of of like, hashtag fail fast and writing huge medium posts about how we failed hard and, and, and all these things. And I always thought that was I don't know, I didn't I didn't really get it. But as I knew we were going to be recording this episode, I sort of started to think about it. And I've definitely had quite a few failures in my, in my career, it's just that I don't really look at them as like these devastating things. I look at them more as like great opportunities where I could grow as a developer and as a person and my my opinions around things and whatnot. So I think we're gonna, we're gonna spend today talking about like, when have we failed? And what our attitudes towards it? And most importantly, how do you how do you deal with failure? And and what are the benefits that can come out of that?

13
00:04:26,970 --> 00:06:33,329
Scott Tolinski: Yeah. And so one of the things is, is that failure itself when you're starting a project, right, even just the the fear of failing can cause so many projects to just never exist? And that that fear of failure can like manifest itself in a whole bunch of different ways from like, excuses that that people are making to why they're not going to do something like, Oh, well, should I start this blog? Well, I don't know if anyone's going to read it. I don't know if my content is good enough. I don't know if things are No, absolutely right. I don't know if my office looks nice enough to take photos, or video in my office or something like that. So a whole bunch of like stuff that you're gonna put up as a wall to sort of prevent yourself from even having that opportunity to fail, right? Just because you're worried that it's not going to succeed. And because you're worried that it's not going to succeed, it's never ever going to start. And if it never starts, then you never learn that it didn't succeed for various reasons. But you also learn, you know, you didn't have any learning experience, it just totally falls flat. It's dead, right. And that's one of the biggest problems about, you know, having this sort of fear of failure mentality where you can't start something. And because you don't start it, it just never happens. I mean, login level up tutorials, when I started creating tutorial videos, it was like, I wasn't necessarily considering that people. I wasn't, I wasn't thinking that if people didn't watch it, it would be a huge failure, because I was just trying to help. I was just trying to bring some value onto YouTube for having tutorials, right. And so that allowed me to start it and realize that it could be, you know, successful. But if I would have been worried about, you know, are people going to like the sound of my voice or these videos going to be good enough quality or whatever, it would have never started. And I'm just think about all the learning experiences I could have lost from that entire, you know, stopping that before it starts. Yeah,

14
00:06:33,329 --> 00:08:02,850
Wes Bos: I can't tell you how, how mad I am at myself for my first product, which was my sublime text book and videos. And nothing took me a year and a half to put together and I was just dragging my feet all around. Because not because I didn't know about Sublime Text, like there wasn't that like, for a lot of people. They're like, Oh, am I good enough is this is someone gonna call me out, this is gonna be totally, totally terrible. Like, I feel like and that's one thing that should not stop you either the fear of somebody calling you out, because that will likely never happen. And if somebody does have some constructive feedback for you, that's often great. Because they're willing to help you out. But it was just because I was like, Will anyone buy it? Is this any good? Will people get value from this, I feel like I'm ripping people off by charging the money for just, I'm just writing a book out of thin air and all these things. And then someone else came out with a sublime textbook at the same time. And I thought, like, oh, man, like, no one's gonna want mine ever again. And it took me a year and a half to sort of, like, build myself up to that, like, Okay, I'm just going to put it out there and see if anyone takes and it was a huge success for me. And it's really what got me started on this whole building courses and charging money for them. And, and I just kicked myself, because I really probably could have got that thing out in six months, four months, rather than than a year and a half. And I can't imagine now where I would be if I even had, yeah, an extra an extra year and a half of doing this kind of stuff.

15
00:08:02,880 --> 00:09:17,970
Scott Tolinski: Yeah. And so I mean, there's, there's high stakes and low stakes stuff, right? Like, you spend all this time reading a book. And that's like high stakes, because if it fails, it's gonna feel like a big failure. And but there's also like low stakes failures, too, right? Like, maybe I'm just going to make this little package on NPM that does, you know, x thing for me. But some people might look at that and say, like, well, what if someone's critiquing my code? Or what if nobody uses it, or whatever, at the end of the day, like, that's low stakes, right, creating an NPM package and whatever, but there's still a sense of failure associated with that, or like, what if it doesn't work? And the whole thing is, it's like high stakes or low stakes, you just got to go for it and and creating something that nobody uses in the big deal. So if it's like low stakes, you got to understand that the the results of a low stakes failure, absolutely non existent, right, like it doesn't matter if you fail something low stakes, and even if you fail something high stakes, it can become a total learning experience if you treat it the right way. So do you have anything else on like, project start, like starting a project and feeling um, how to get over that just,

16
00:09:17,970 --> 00:10:52,200
Wes Bos: I think you yourself, it needs to be aware of how does my procrastination or how does my feel of fear How does my fear of failure How does it manifest itself in my actual work, and that might be procrastination, that might be for a lot of people, especially in business, it manifests itself in listening to business podcasts and reading books and posting quotes on Instagram about about business and all these all these things where you're not actually doing the business thing. You're just trying to, to consume as much information and read as many blog posts and and stuff find these books as and at the end of the day, and even with even with coding this happens as well, at the end of the day, you just need to do it, which is the the whole idea behind my JavaScript 30 course as well is that like you cannot sit around and pontificate about these things for so long, that you're going to get better at it, the only way you're going to get better at it, whether it's business or whether it's web development is actually putting in the time and actually doing the work. So just be cognizant of, Oh, I'm starting to do these things, which is X, Y, or Z, and sort of try to catch yourself and don't don't be lying to yourself by don't even want to put our own podcast down. But don't be lying to yourself that listening to 14 episodes of syntax Oh, and on and is going to help you more than actually doing the doing the work. Right. Yeah.

17
00:10:52,320 --> 00:12:12,750
Scott Tolinski: Yeah, at the end of the day, penned pen to paper is like really like the most important thing I remember. I'm a terrible writer, I remember like being just huge amounts of anxiety about writing papers in college, right, like, you know, long papers. And yeah, I mean, the sense of failure there is right, if you mess this paper up, then you're getting a bad grade, and you pretend to pass this class and all sorts of stuff. And for me, I like I said, I'm a terrible writer. So that was always a huge lesson that I had to learn in college was like, I don't, I don't care. Like if I fail or whatever, I just need to start writing. And if you start writing, or you start coding, or whatever, that gets the ball moving in some sort of positive direction. And even if you end up deleting everything that you just wrote, or edit it or start over in your codebase, starting is going to get your brain in a much better space, and it's going to get you working, it's going to get things flowing. And it's going to remove this sense of doubts. And at the end of the day, like you mentioned that this is just about procrastination, right? And this failure can stop you prevent you from doing anything, you just got to get started. And that that will that will carry you through and the more you get excited and started about what you're doing, the less you're going to worry about the bummers of what could happen if it doesn't work out.

18
00:12:13,920 --> 00:12:15,360
Wes Bos: Exactly. Cool. So

19
00:12:15,360 --> 00:12:51,450
Scott Tolinski: let's say let's say you've gotten over that hump, you started the project, and things are going fine for a while, maybe you're starting to have a sense that it could it could become a failure, or that it could blow up and mid project. At that point, when you're getting these sort of vibes, what do you what do you think you should do at that point? Like, how do you progress? Should you progress? Should you just stop, like, middle of the project? Maybe this thing's not not working out? What is your mind go?

20
00:12:51,990 --> 00:15:27,600
Wes Bos: Yeah, totally. Because after you get that initial, you're often really, really excited about a project. And then as it starts to get hard, or you start to get into it for a couple weeks, and it stops getting as exciting. And it could very well be that the project is not a good idea. And you should shelve it. But I think there's just as great of chance, as you're just getting, you're becoming a little bit afraid that it might not be as good as you expected, or for whatever reason. So I want to encourage you at this point just to is first make that decision, it's likely because you got excited about it, this is likely something that you should try to finish. And I think that finishing things is the most highly underrated skill of all developers. I remember, like years and years ago, I was just like, trying to figure out how specifically Addy osmani how he does so much, because it seems like he's always cranking out amazing stuff. And he's got blog posts, and he's creating new tools. And he's doing open source work. And I'm just like, how does he do so much and, and I looked at it like a bunch of people who seem to just have this enormous amount of output. And it started to I started to figure out, it's that he just finishes stuff. He sees things through to the end, and finishes things all the way through. So if we You and I were to actually finish everything that we started, it would be likely that we would have an insane amount of actual output, right? Yeah. So I don't what do you do at this point? I think that what's important is that you get some sort of small wins. I think in life in general, small wins is really where you get your confidence from. And if you're building this monolith of whatever it is, you're building an app, you're building a product, you're you're trying to learn a new skill, you're not going to you're not going to get very far. So what are some examples of small wins? Well, when I teach to top the coding boot camp, one of the best small wins would be would be putting a code pen up, and that code pen getting picked which is putting it on the front page. I can't tell you how amazing that is for students to to get there. They're pen picked on the front page or to have somebody retweet who you really respect. Something that they've built, or just even getting a reply should like putting yourself out there saying, this is something small that I made and getting a positive feedback of somebody says, Oh, that's really neat. And how you did that I think those small wins, they just give you that little boost. And after a while, you start to get a little bit more confidence in yourself, and that will help you push that project through to the end.

21
00:15:27,900 --> 00:18:19,020
Scott Tolinski: Yeah, I totally agree. And I know when I first again started level up, tuts, you know, I'd put up maybe a handful of like, maybe like 25 videos and had like, nobody watched them for a little while. And then when Chris Epstein from compass, yep. retweeted one of my videos on campus, it was just like, whoa, hey, yeah. And that was like, that was a little when that we did that. But that point, let me know that people can find this stuff. And they you know, and they will like it, if they find it, whatever. But that little small wind just really, really, you wouldn't believe how much confidence it gave me to keep going. One thing that I think that's important bellick mid stage project, you know, you're worried about if it's going to fail or not, is to is to have the ability to look at this totally honestly. Because if you're able to pull yourself out of the motional state of a project and look at it, honestly, you can determine whether or not that it is a already a true failure, right? Because I agree, absolutely. Finishing stuff is superduper. Important. But like, if the train is on fire in the heading down the train tracks or whatever, like you got to, you got to stop the train, you know, yeah. And there's that, there's that hilarious image of the guy sitting in the room full of fire, saying like, this is fine. And you know, sometimes you're that guy, and you can put that fire out and keep going and other times that that fire is going to consume you. And so I think there is a certain point in which you need to be able to have some metrics to admit like a total project failure, and and shut it down. Well, whatever those are, I guess it has to do maybe with you personally, like let's say you have a project that could succeed. But if you continue to put time and effort into it, you're going to like, lose out, you're going to be hurt financially in a major way, because of it, you're not going to be able to put food on the table for your family. Well, at that point, yeah, you probably want to maybe shelve it, or abandon it or something or do something. So there definitely is like a point, but you need to be totally honest with yourself and remove yourself from the emotionless of it. Because there could also be a situation where this feels like a failure, and you're feeling upset just because of a small loss. And that small loss isn't a major loss. And it's not like a vertical loss. And that emotional state can push you into like, screw this, I'm going home, I'm done. But like, that's not a great way to be either. So you need to take a step back and be totally honest, truthful and evaluate from like an outside perspective, whether or not this project is going to be able to continue or not.

22
00:18:19,920 --> 00:19:03,480
Wes Bos: I think on that, that same note, in the business community, there's this idea of MVP, minimal viable product, meaning that rather than just guessing whether this thing is going to be a total failure or not, because like you can likely tell yourself, but if it's something that is going to be involving other people, like if you're building some sort of product, then it's you should what you should be doing is just building it and launching at the very minimal viable product that you can and seeing if this thing sort of catches on, if people get excited about it, and then if people are excited about it, if it starts to catch on, then you know, at that point, you can start to sink a little bit more time into it. And that just circles back to that that small wins thing where you're gonna start feeling a lot better about it.

23
00:19:03,720 --> 00:19:32,060
Scott Tolinski: Yeah, small wins. definitely important. Definitely good for that, like brain brain bump to get you keep going to get you excited and happy about something. And actually, one thing I forgot to mention when we were talking about like, starting a project is like, I feel like people might mention things like, like planning for failure, like do you plan for failure? Like, West? Do you plan for failure? Like on any project that you start?

24
00:19:33,180 --> 00:21:19,610
Wes Bos: Um, yeah, that was somebody asked me that the other day, they're like, have you ever had something that you've done that didn't do well? And I was just like, no, but then I like I thought about it a little bit more after that. And I was like, Oh, of course I have a huge I've got a huge list. Maybe we'll talk about it later of things that just totally, totally bailed and totally sucked and didn't get anything but I don't really plan for failure, but I think that I'm just fine with things. Not working out, because I know that like, I have a pretty good attitude towards this stuff. I'm not very I know a lot of people are self deprecating. And they know that they say I'm not very good at this stuff. And no one would ever like my stuff. And my wife told me once that I was unapologetically confident, just such a backhanded compliment, but it does describe my personality Well, in that if if it doesn't go well, then I'm fine with that. Because I know that I learned a lot along the way, I have a huge folder of just little, some tiny stuff from like, 20 minute code demos, to things that I'm just trying to stuff that have spent a couple days on. And then I realized that I'm going about it the wrong way. Or I have to shelve it, or even when I'm building my courses, I build the thing like four or five times in different ways. And, and I'm totally fine, because I think I'm happy with what I had learned along the way. Because I think my whole life is is more about course correction than it is big things that I try and fail from. So it's just like, oh, that didn't work, whatever. course correct. That didn't work, whatever. I learned a little bit here, learn a little bit there. And then as you go through life, it looks like a nice smooth path. But if you were to zoom in on that, it's just a bunch of little course corrections.

25
00:21:19,650 --> 00:21:36,000
Scott Tolinski: Yeah, I hundred percent agree. I don't think I've ever had like an escape route. For anything that I've started. It's not like, when this project starts, here's what's gonna happen the moment it fails. And if you are unapologetically confident, I would say I am ignorantly confident. Like,

26
00:21:36,050 --> 00:21:36,720
Wes Bos: exactly, yeah,

27
00:21:36,720 --> 00:23:05,430
Scott Tolinski: I'm not, I'm not confident because, you know, I'm confident because I I'm not thinking that it's going to failure, or I'm not like thinking about its failures, or not purposefully, not thinking about it, or whatever. But, you know, I don't I don't believe in building those, you know, exit hatches Unless, of course, you need to like legally, right? If you have like writing contracts and stuff like that, obviously, you want to make sure you're, you're covered. You know, you can't be on the hook for anything legally, like that. But yeah, like a project that I'm starting, I'm not thinking like, well, when this code inevitably doesn't work, this is what I'm gonna do. I'm thinking, when this code is super successful, and I have a million dollars in my pocket, this is what's going to happen, you know, yeah. But yeah, so I i think that is important to not planning for failure and not not worried about the cause of failure or whatever. Yeah. And so speaking of failure points, and things like that, are planning for failure. When we were both building our shopping carts, you know, I just wrote my own. And I like, didn't plan for when it didn't work. However, like, instead of building my own, I wish I would have, like, thought about what kind of systems could I use that would have helped me build a shopping cart and a little bit less pain than having to struggle through myself. And unfortunately, I did not know about snipped cart at the time, but I wish I had maybe I wouldn't have failed so much building my own over and over again. Fantastic segue. Yeah,

28
00:23:05,460 --> 00:24:43,200
Wes Bos: speaking of failures, when I launched my react course, there was a bug in my paypal library. And I was I probably lost thousands and thousands of dollars because of people couldn't give me the money. So our sponsor today is snip cart, which does online shopping cart right inside your actual applications. And SIM card is fantastic for if you want to start accepting money online, if you were to use stripe or PayPal or anything like this, at some point, you do need to have a server and you need to be able to integrate with each of those different things. So what snip cart is a full end to end shopping cart, you can still integrate it with your stripe and your PayPal and all those other payment gateways. But you can just sort of drop the cart into your actual website and this is great because you don't need a back end for it if you're using react or view or you have a website where you don't want to have to worry about maintaining the entire infrastructure of of selling on yourself or your client website. That's exactly what this is great for. So you drop it on into your website and it comes along with all the features that you would expect with any type of shopping cart so things like a reoccurring subscription so if you're trying to build somebody like Scott is if you wanted to Bill everyone monthly for access to your tutorials you totally good if you're doing physical goods and you need to do shipping and being able to calculate shipping for people it'll do that for you if you need to do I I talked about in the past when I've done entire I have built an entire coupon system and I probably put weeks of my life into building this coupon system where the coupons just work with all the

29
00:24:44,460 --> 00:24:46,500
Scott Tolinski: wish Yeah, yeah, I know

30
00:24:46,530 --> 00:25:34,380
Wes Bos: like multi currency is selling I don't do right now I charge everything in USD. So I don't have the ability to accept any other sort of currency which I don't know maybe that'll that would help my help my system inventory management if you're selling something like stickers. What do I have to do when I have no more stickers left, I have to redeploy my website, turn it over, right? invoicing, those European customers always asking for proper invoice, it will give you that. So all the features that you're looking for without you having to to build any of this stuff. So if you have an idea for a product or something that you want to sell, maybe it's a course people email me all the time, what do you use? Well, you can go ahead and just sign up for a sniff card and integrate that in in a matter of minutes. Rather than spending the time that you would have to build something totally custom.

31
00:25:34,410 --> 00:25:41,040
Scott Tolinski: Yeah. And I love it. I love that is just HTML and JavaScript, right? Yeah, no, there's no like platform lock in or something like

32
00:25:41,040 --> 00:26:11,670
Wes Bos: that. Exactly. It's all you have to be on WordPress, or you have to be on something like it, or you have to be on react, you just integrate it right into whatever it is that you're using on the front end, and the back end stuff. And they also have a whole set of API's as well. So like you can get up and running. But if you need to do something custom, you can hook into all their web hooks and all their API's and pretty nifty. So check it out at snip cart.com forward slash syntax that's going to get you your first month of production for free. Nice. Thanks so much for them to for sponsoring.

33
00:26:12,030 --> 00:27:03,960
Scott Tolinski: Thank you snip cart. Cool. So okay, we talked now about pre project, we talked about mid project, and let's say, you were in that event, where that room that was on fire completely engulfed in flames. And the the project completely just failed into misery. What are some next steps, maybe like, post post mortem, like, you know, the, at the event of failure after failure, that sort of thing to actually make this experience worthwhile. I know, I know, personally, I think this is one of the the most important parts of failing anything, and maybe, like the only important part about failing anything, because this is the part where you get to learn a whole bunch. And the learning experiences are why we fail anything.

34
00:27:03,960 --> 00:27:04,530
Unknown: Mm hmm.

35
00:27:04,590 --> 00:28:30,960
Wes Bos: So I'm gonna give a specific example for this. And it is one of the probably most expensive failures I've had in the last couple of years. And that is with Facebook ads. So if I, the Facebook is this a lure of this money machine where you put in $1. And for every dollar you put in, you'll get $1 50, back in sales, and you just can just put in as much money as you want, and you'll double your money or get 50% return on your money. And that's not true. I think it is true. There's a lot of really good stories out there for people who have cracked the nut and have figured it out. And it's this just machine for people. However I have, I've started to get it to work now. But I think I've probably spent about 15 grand on Facebook ads just to learn what doesn't work. And just to learn that developers are very hard to market to when you're trying to use traditional things like running Facebook ads, rather than the primary ways that I market myself now. So what do I do? Well, I sit there and I look at all this money, like this significant amount of money about 15 grand that I've lost, trying different things and trying to crack the code on these just Facebook ads. So do I sit there and what most people do at this point is they they throw their hands up in the air? I've talked to so many people and they say Facebook ads don't work. And I sit there and look, I'm like they do work. Yeah,

36
00:28:30,960 --> 00:28:32,220
Scott Tolinski: they clearly work.

37
00:28:32,250 --> 00:29:53,730
Wes Bos: Yeah, they work very well. That's why it's one of the biggest companies in the world. Because Facebook at the end of the day is just an ad company that sells ads on your feet. So if it did not work, they would be out of business instead of being one of the largest companies in the world. So they do work. It's just that you don't know how to do it. And the cost of entry into one of these things, for me was $15,000. And I had to spend that much money until I figured out how to actually make it work properly. And even now, it's not even like working super well. I've hired people I've paid. I've paid experts to try to figure it out for me, but I just haven't like cracked that nut just yet. So I think that you need to sort of look at these failures as the price of admission, whether that's your time that you've you've spent trying to invest in it. Sometimes I've spent a couple days trying to build something and then I realized that I need to scrap it. And as frustrating as that is when you you look back at it. Don't write that entire platform off. Don't write this code off. Don't write yourself off as not a developer, especially when you're first learning to code. Don't say like, I'm not a good person, that coding is just the cost of admission. And you sort of need to put in the time or unfortunately put in the money before you can get to that point where it's working out well for you. So you need to fail in a variety of different ways. First,

38
00:29:53,760 --> 00:31:26,160
Scott Tolinski: yeah. Yeah. And so I think that other like, failing on your own, it's always is easy to, it's easier to see when you fail on your own right, like, what I did wrong here, what what I could have done differently or this this price of admission, right? Like maybe I didn't do anything wrong, that's just that's just the the cost right to get started. But when you fail on a team, I don't know how much you've worked on large teams or anything like that, it's it's so much easier to skirt the button, like, I'm not responsible for this, so and so did this. And so and so did this. And that's why it failed. But I think with any failure of something that you are a part of, that you have some sort of responsibility in that failure, right. And I think it's important to be honest with yourself and accept that role that you had in that failure and take a look at it that way. Because even if like, even if the thing that you did was not the thing that caused it to fail, that didn't mean that like you couldn't have done things better to prevent it from failing. That doesn't mean you have to be hard on yourself, it means you have to learn from those experiences, and that you have to grow from those experiences. And so you have to be just again, like, like I mentioned before, you have to be honest with yourself about your failures, because that's the only way you're truly going to really grow from them. And so this is actually kind of hilarious. My wife and I decided to start watching the old seasons of Top Chef because I hadn't seen like the first like five seasons. I don't know if you watch Top Chef at all, top.

39
00:31:27,060 --> 00:31:28,980
Wes Bos: A more of a master chef fan over here.

40
00:31:29,400 --> 00:31:39,300
Scott Tolinski: Like master chef, do we do this? We play this game where the first episode airs, and then you pick two people for both math to Oh, nice. And then

41
00:31:39,330 --> 00:31:40,920
Wes Bos: yeah, we there's like money on the line. Oh,

42
00:31:41,130 --> 00:31:46,170
Scott Tolinski: we don't put money on the line. But there's a lot of pride on the line. Because we get really intense about it.

43
00:31:46,170 --> 00:31:48,960
Wes Bos: And then even more expensive in the Alinsky household. Yeah,

44
00:31:48,960 --> 00:33:15,930
Scott Tolinski: right. And, and if one person goes away, you get to pick another person. So your your people don't have to write out to them. Either way, if your person wins, it's big, big thing. So for buddy, we were watching Season Five of time, I don't know what season, I don't know, six Chicago season or something like that. And there's one chef halfway through the season. Like, I don't know, she forgets to turn off the burner for her rice. And then she comes back to her rice. And she's like, somebody burnt my rice. And it's like, No, you burnt your rice, like everyone and everyone on the show was just like, you obviously burn your own rice. And they're just like, no, not taking the blame. And then like later, her Rice was under cooked like two episodes later. And she was like, who moved my rose off the burner, like a totally separate incident. And like thinking like, maybe you should just keep an eye on your rice and take responsibility for your rights, because this was your failure both times. And so yeah, but it's just so funny, cuz it perfectly, you know, has to do with this, it's like, if you are making up all of these, you know, fictional scenarios to prevent yourself from accepting and realizing your failure, just because you don't want to admit it being a failure, then that's a major problem. Because you're not growing from that experience at all. Like, you need to take these situations that are your failures or your situations and grow from them. And you can't grow for them without accepting responsibility for having

45
00:33:15,930 --> 00:33:41,160
Wes Bos: that that humility to say, I screwed it up, it didn't work out for me as I had thought, or I made a mistake, or I just thought it would be different at the end. And and being okay with that and being able to eat that is eat your burnt rice, then that's, that's a that's a huge character trait that that I think every developer needs. And I guess every human in the world needs to, to grow. And

46
00:33:41,219 --> 00:34:44,340
Scott Tolinski: yeah, this is really honestly the most important part of failing, because you fail. And you can go from two routes from it, right? You can you can blame others, you can do whatever. And you can learn absolutely nothing from it, and then make those same mistakes over again, right? I mean, that illustrated in that same episode or two episodes of Top Chef, she made that mistake, she didn't accept responsibility for a couple episodes, she made a very similar mistake, because she didn't learn from her first one, right? So it's like, if you make a mistake, you got to learn from it. And you got to dissect it. And you got to figure out what went wrong, so that you don't make those mistakes again, and can you will you make those mistakes again, probably, but like, sometimes it takes several times to learn something, but as long as you're doing this sort of like post mortem, like what went wrong, and how can I do? Like, what can I do to fix this, right? Make sure this doesn't happen again. It'll be in your brain and your brain is going to make those connections a little bit better next time. And it's gonna prevent you from having more future failures, you know, exactly. And

47
00:34:44,340 --> 00:35:28,610
Wes Bos: to go back to the business community here that's called pivoting, right? There's a lot of businesses that started doing one thing and it didn't work out. So what do they do? They they pivot, meaning that they they change the course of their actual business, they change what they are doing as it business they change whatever focus they are as doing a business and then the sometimes they work out like a Twitter started. What did Twitter start as initially? Twitter started as something weird like a, like a social network for Bird Keeper or something silly like that right? And it didn't work but they after a while they they changed it to eventually it became what it is today, which is a spot for racists to hang.

48
00:35:28,610 --> 00:36:03,650
Scott Tolinski: Yeah, right. Yeah, exactly. Or like ello ello pivoted pretty hard because they were like, originally, like, they will, I think they were like, we're, we're coming for Facebook. Like, we're gonna be that the minimal social network or whatever. That's like, cool. But then, like, after nobody was using ello anymore for a little while. And it was just like maybe like the hipstery people on it. They were they were totally changed themselves into like a Pinterest for creatives. And they're like, the place to learn all this creative stuff. And now it's the place where I get like, you know, fake accounts, adding me all the time because nobody else is using it.

49
00:36:05,690 --> 00:36:10,170
Wes Bos: Yeah, I get those emails all the time. I think I deleted my account. Yeah,

50
00:36:10,230 --> 00:36:28,500
Scott Tolinski: I need to do that. Interesting. But yeah, so I mean, the those those pivots, yeah, it's super important. And those pivots can happen accurately without you understanding exactly went wrong. And knowing what you can go or what you can do to sort of move on from and fix things a little bit.

51
00:36:28,730 --> 00:38:52,020
Wes Bos: Let's take another quick break and talk about deadlifts. So deadlift is a company that will create you a personal I shouldn't say company developed as JC and that it's it's two guys who are nuts about fitness and are on a sort of on a course for making developers extremely healthy. And what they're doing and what they did for both me and Scott is that you have a chat with them, you fill out a questionnaire and they are going to come up with a personal training and a personal nutrition plan for you to hit all of your goals. So for me, it was I wanted to lose something like 20 pounds, which I'm 17 pounds in after about two and a half months. So far, I wanted to put on some muscle, which I'm looking pretty good and and I just wanted to and I think most importantly, I wanted to sort of like hack my energy, I wanted to be a little bit more on when I'm working and be able to to get a little bit more done. So that's exactly what they did. They changed my diet, they changed how when I'm going to the gym, and they really worked with me, because I'm like, I don't have a ton of time to go to the gym, I only have like, and what they ended up doing is I'm just going four days a week for 45 minutes. So I talked a little bit about my own journey in the fitness podcast, if you want to go back back and listen to that. But they sponsored the fitness podcast, and they had over 100 of you web developers sign up using the coupon code syntax, which gives you 50 bucks off, which is amazing. So they're sponsoring again, they're coming back. And they're they're looking for people who are interested in getting healthy in the new year. So I know we're we're launching this thing on December 6, it takes them about two weeks to take your questionnaire and convert that into a personal training plan. So if you're looking at maybe the last couple weeks of of 2017, or you're looking to kick off 2018 getting healthy losing some weight, getting that more energy, I would definitely check it out. It's at dev lifts.io. And if you use the coupon syntax, you're going to get 50 bucks off of that, which is amazing. It's a really good deal well worth well worth the money. I can can vouch for it myself, as well as the the hundred other developers that have already signed up in the and they're talking all day in the chat room.

52
00:38:52,050 --> 00:40:03,920
Scott Tolinski: Yeah. And one thing that I think is perfect about doing deadlifts like right now, is that you know, like January hits and I don't know how I know you're a member of a gym but like how many January's Have you ever been a member of a gym floor but January in a gym gets really crowded because everyone really wants to start the new year off, right and get them get themselves losing weight and feeling better and in gaining muscle and stuff like that. But what happens in February is that February the gym is dead. Because all those people that came in January, you know, they're just over it. But the best way to not get over it and to like really stick with it and make a big life change is to have a plan. And I think that's the the very best thing that deadlifts does is it gives you a plan so that you don't just go for a couple of weeks and you're like okay, I've lifted some weights, I'm feeling better. Now you're like, No, I have a plan that this is what I'm going to do every single week, day in day out and this is how it's going to go. And by February you're going to be feeling so so much better that you're not going to want to stop and I think that's just such a big thing as people go in there and they're just say I'm gonna go to the gym, you know, and then Yeah, a month later, they're meandering around the gym without a plan. So

53
00:40:04,050 --> 00:40:44,550
Wes Bos: this is actually that's what I was doing. I was like, I was just like walking around being like, what should I workout today, but like, for me now, it's so mindless, I just have the plan on my phone, and I walk into the gym and I scroll through it. And I say, today's Monday, I'm doing shoulders, I'm gonna go do shoulders after this podcast today, I'm going to do shoulders this many times, and like I do, the reps they have, they have the number of reps, the amount of times you just do it. So you just do that many, and you lift as heavy as you can. And then you go home, it's, it's awesome. You don't have to think about what you have to do or what you should be doing. You just follow the plan. And, and for me, that's that's what the real value was, because I just needed somebody just to sit me down and tell me do this, eat this. And you'll be fine.

54
00:40:44,760 --> 00:40:57,690
Scott Tolinski: Yeah, I know, you have to make any decisions. You can go put on some podcasts or some music and just like hang out and do your go down your checklist, do all your stuff. And like I said, a month or two goes by, you're going to just be feeling great.

55
00:40:58,800 --> 00:41:16,920
Wes Bos: Awesome. So again, that's dev lifts.io. Use syntax for 50 bucks off there one time purchases, it's not something you're going to be you're not you're paying for a monthly you get access to the slack room and the personal training plan and the nutrition plan. So sign up for that devilish.io thanks a lot to them for sponsoring.

56
00:41:16,940 --> 00:43:16,320
Scott Tolinski: Thank you. Cool. So okay, so we've talked a little bit about strategies for failing, dealing with failure, not dealing with failure at the beginning of things, ignoring failure, that sort of stuff. But let's talk about some of our own personal failures. Because we did a nice little list of both of us did a nice little list of things that we've totally failed on. Yeah, and I failed on so many things, I can't even I can't even list them all here both through code or not through code. And they've all been very, very impactful. And some have been very significantly impactful in my life, and others have been minorly impactful, but they've all had a positive influence in some way through learning things. So I think one of the things I would want to start off with is something that's that's big in my life is this breakdancing. I've been dancing for a long time, if you you've heard me talk about it. And for the first like four years of breaking, and this is like practicing maybe like four times a week going to competitions, like every other weekend, I did not win a single competition, not like the way these competitions work is their tournaments, right. So if it's a three on three, your group goes from like a top 16 and a bracket down to the finals. But I didn't win the single tournament for four years, and I entered tons of them. And it would just even even just absolutely, maybe not even getting out of the first round, just just failing, left and right. And then still this like, just keep going, just keep going, just keep going. And then the very first time I ever got to the finals, we won because it was like I'm at the finals. I'm not losing this time, you know. But those those failures, that by examining him and building off of them, you learn what to do better, the group got better because we looked at why didn't we win this, we watched the footage we built off of it. And eventually we won, then we won and we won and we won, you know, we want a whole bunch. So. So that was a big failure. For me that definitely, like taught me perseverance. You know?

57
00:43:17,880 --> 00:46:00,900
Wes Bos: That's, that's pretty cool story. I like hearing that, like, stuff that's not necessarily development related, but just like life life in general. Um, for mine, I'll talk about after I launched my sublime book and videos a couple years ago, I was like, This is going great. What will I do next? And then I thought like, I'll be like the tooling guy, I'll talk a lot about like, different tooling that you can use. And so I did the thing that everybody does, and that is started weekly email newsletter and try to be Mr. Peter Cooper of JavaScript weekly. And nobody, nobody cares. Nobody wanted to sign up for that at all. And like, I got maybe like 100 hundred and 50 signups from it. And I ran like a bunch of giveaways. And that didn't really work out well. And I was like, Okay, and then and then what I started doing is I started writing this like tooling book. And I had written a whole bunch about it. And I sort of just like, couldn't get like a grasp on like, what should it include, and what Shouldn't it include, and it started to sort of get away from me and I didn't really feel good about it. And I had, I had written a lot. So then I switched over to writing just a book about gulp. And I actually still have about 15,000 words, which my sublime book has about 20,000 words. So it was almost an entire book on just how to use golf. And then I was just I this was about like two and a half three years ago just sitting on it waiting for a golf for to come out because I didn't want to release this thing. When golf three was out, well, two and a half year later, gulps four still not out and I don't know if it will ever come out. And I still use golf every now and then. But I think that the the industry is slowly changing to things like web pack and, and whatnot. So I wasted many, many, probably at least a couple months on on all of this stuff thinking that it will be my next thing and, and right now it's it's shelf, it's I just put it on the shelf, and it's collecting dust. And it was definitely a big failure for me because I just didn't know what I should do. And I didn't know, like, what people would like. And after I had the success of my first one, I still didn't like feel all that good about it. So it's kind of frustrating to see that. But after that I had just started learning. I had been doing react for about six months a year and then I, I created react for beginners, which took off really well. And that really just that changed my whole career from writing books to creating videos because I'm one thing I had learned from the Sublime Text is people like the videos a lot more than the actual book, which is pretty cool. And, and I'm glad that even though I wasted all that time, I'm so glad that it happened.

58
00:46:00,930 --> 00:48:05,310
Scott Tolinski: Nice. Yeah, so a big failures for me. I mean, I've made what like maybe like 1000 I don't know how many videos 1000 plus something about on YouTube, I'd have to check my stats, it might be like 1200, or something. At this point, I made a lot of video tutorials on YouTube. And not every one of those is excellent. Like, especially a lot of them at the beginning are not excellent. And you know, when you're on YouTube, and when nobody's watching you, you don't get a lot of people reporting how bad Some things are. But when you people start to when you start to have a viewership, you get a lot of comments letting you know exactly what's wrong. So want to this is a, I've had a lot of these videos that have taught me a lot about what to do better on YouTube. And I've, instead of just ignoring a lot of the comments, I've take a take them in, and even if they make me angry, I sit on them and I don't get angry about them. And I figure out what the truth behind the comment is and how to improve. But one particular video is like my very first WordPress video, it's actually pretty old. I think it's like maybe like 2012 or something. It's an old video. But at that point, I was still sort of figuring out my format, and I was like, you know what I'm gonna start before I start this video, because I feel like people aren't getting the idea of what the series is gonna be like, before it starts, I'm gonna do an introduction to the series. And so I do this like introduction to the series, which maybe takes like two minutes, and then I start the tutorial about how to install WordPress. The video is titled How to install WordPress. And so all of the comments on the video are like, this guide takes two minutes, he's talking about all this stuff. And he's not showing me how to install WordPress, like the titles how to install and you didn't show it to two minutes in and like, oh, that that video might be my most disliked video and like the most angry comments to this day. I'll get comments on it maybe like once a month or once a week. And it's just like, well, what are you doing? Taking two minutes? Everybody jumped at two minutes and like, yeah, okay, I'm never ever going to do that again. Because,

59
00:48:06,660 --> 00:48:07,230
Wes Bos: you know,

60
00:48:07,859 --> 00:48:23,970
Scott Tolinski: sure enough, I could say well, okay, don't you want an introduction to this content? Okay, I guess not. So now I have the intros as a separate video with a major learning experience. And I don't have all those angry comments anymore. So it seems like a small one, but you would not believe how many comments I get about it.

61
00:48:24,569 --> 00:50:39,660
Wes Bos: Yeah, absolutely. So for mine, I'm going to talk about failure of blogging, because for many, many years, back in the day, blogging was the way to get rich, and I myself had a thought, wow, all I have to do is write these blog posts and stick a bunch of YouTube or not Google AdSense on it. And I'm gonna make tons and tons of money. So back before I was even doing web development, I had I had this blog called Craig nomics, which I used to flip blackberries on Craigslist, and he used to flip bikes, and I used to, I would do all kinds of stuff. It's funny, I should look back and see if it's cached. And I just like, I'm like, this is gonna be great, because it's gonna write all these blog posts about it. And, and it didn't work at all. Nobody cared. And nobody went to the site. And the no one found it via search engines. So I ended up going and starting blogging about web development, I thought, Okay, this is it. And I just had, I was just writing these crappy posts that were like, top 10 lists or anything like that. And it never had worked from that. So I'm sitting there looking at all these failed blogging experiences. And I'm saying the thing that I hate is blogging doesn't work anymore, or things like that. And it of course, it works. It's just that you're writing crappy stuff. So slowly through that I had gotten a couple blog posts that that did really well. And then I realized that the blog posts that do well are the ones that have good content, the ones that you're actually helping people learn new things or helping people figure out specific problems that they have with with the technology stack. And that's really what set the set the wave For what I'm doing now is, don't worry so much about like, you're starting to see it. Now I get emails from people all the time where they're like, just like spend a day recording a course. And I'm doing air quotes right now. And they try to just like, blow this thing up. And because they see I post how many people have bought my courses and they see it. And then they there's like, oh, that that guy just flips on a screen recorder and sells all these courses. But at the end of the day, like, I don't care about that stuff anymore. I care about how do I help people learn a topic as best as they possibly can, is, what I've learned is if you focus on that as the end game, then it's going to start to work out for you.

62
00:50:39,690 --> 00:51:45,360
Scott Tolinski: Yeah, I have something that's very similar to this is that I at different stage, you know, making apps was the key to getting rich, so I was like, I'm gonna make a whole bunch of apps, and I'm gonna throw some ads on them. And I'm gonna find some way that these these apps can, you know, be somewhat popular or whatever. And so I made an app that was simply just a club air horn, you push a button that gives you that burn, you know, because that's actually something I just wanted, like I wanted, when I wanted to learn how to make apps on Android, I also wanted to just, I wanted to have that. So I made that, and it actually got a bunch of downloads, and I made, you know, I was making like 40 bucks a month off of ads for it. And so instead of being like, this is great. Let me expand my learning, let me make better apps. Let me you know, take what I've learned there, I took that, and I was like, let me just reproduce this as much as possible. So I made a whole bunch of apps that did just just terrible functionality, they did nothing for anyone. And I was just thinking, I'm like, Okay, if I have, you know, 40 apps that are all making me $40 a month, like that will give me some money. And and

63
00:51:46,530 --> 00:51:56,400
Wes Bos: I always do those calculations, like if I can write 700 blog posts in here, and they each make $2 a day. Yeah. And I'll be drinking Exactly. On the beach. Yeah.

64
00:51:56,400 --> 00:52:42,690
Scott Tolinski: And the end result was is that most of the apps were terrible, they didn't service at the end, like nobody wanted them. So like, I had a couple of apps that that made me some decent cash and a couple of apps that were making me, you know, one cent a day, and it was just terrible, because I just wasn't focusing on the right things. And so, I mean, that that did teach me that, you know, quality wins out no matter what, because, yeah, you know, I'm definitely a quantity guy and make a lot of videos, but quality is is always going to win out. So yeah, it also taught me I'm not cut out to be an Android developer, because I don't have the Java background. But other than that, like, you know, if I, if I would have spent more time into making these apps more useful, then I probably would have succeeded quite a bit better. And who knows where I would be with that?

65
00:52:43,980 --> 00:53:24,960
Wes Bos: Exactly, exactly. Um, I don't have a whole lot else more, I just got some some notes here on just like, explanations that have fallen flat on specific things like I teach in person quite a bit. So I've definitely had some doozies of explanations where nobody in the class understood it or conference talks that didn't necessarily go as well as I had hoped or, or anything like that. And you learn from those and you move along. And I think that it's it's totally fine to to have these failures in technical explanations, because it's really helped me figure out and sort of anticipate different issues that people may be having.

66
00:53:25,290 --> 00:57:18,150
Scott Tolinski: Yeah, I had actually a major, major failure recently that I would like to talk about, before we get Yeah, I I invested maybe like a year and a half a year and a quarter of my life and a ton of hours more than I can possibly count into a startup. That seemed like it was an awesome idea. Right? The idea was really solid. The people behind it had excellent networks, right, we had one person who had a network of investors, we had another person who had a network of, you know, knows everybody in the industry, we're trying to sell to I'm not going to go into too much in depth about this, because I, you know, I don't want to call anyone out directly. But like, I was the developer, I was the only developer and although I was promised a lot of things, like, you know, further, you know, attempts at investment, and we're going to do this in this in this to market it. I worked my butt off and made something really excellent. That could have been much more excellent. If the other promises, were, you know, we're follow through what if we would have gotten some investment we were able to hire some people and but you know, a single person working on something for this long, can only make it so good. And so it's a bummer that I at the end of the day, I left the project, and I said I just have to be done with this. It's not a it's not a productive environment for me. I you know, put all of this into it. And I'm not seeing that same stuff coming back to me. And so this is a failure that, you know, I want to blame on the other people involved, right because I don't feel like it. I contributed to the project's failure, right? But at the end of the day, like, what could I have done differently? Like, I think in this situation, like, I was pressured, again to features, features, features, also the only designer on it. So instead of trying to always go with what they're saying, you know, we need these features. And these features and these features, I should have been much more directed like, this is what I need to be spending my time on, we can't do these features, we can't do this, or we can't do that. And I definitely, I don't think I was as strong with those points as I should have been. And that definitely led to the outcome of the project, which was, well, we have a project with a lot of features that needed to be much more stable and needed better design needed a whole bunch of more things, right. But overall, it was very disappointing, because I saw a successful idea, I saw what should have been, you know, a successful group of people. And it turns out that the group itself was dysfunctional, and was always going to be dysfunctional. And I should have noticed that from the start, and it's super disappointing, you know, it's super disappointing to have it now workout, but at the same time, I'm super glad that I'm not focusing on at all anymore, I'm 100% into my tutorials, and all this stuff that I'm feeling very confident and happy with. And at this point, you know, I can rely on myself to get it done, I don't have to rely on a sort of team and I can, you know, build a team of people myself, rather than having this this group here. But yeah, that was a huge disappointment, and I sunk so much time into it, the the positive outlooks for this, like, what I learned was one, you know, think really, really long and hard about who you go into business with and to, I learned a lot of excellent code techniques, it was the largest application I've ever built. It is taught me a lot about improving my own platforms in so many ways, just because of all of the things I had to learn from building such a large platform. So I learned a lot of new technologies, a lot of new skills, and I was able to apply that both within my tutorials, as well as in my own codebase. So those are the positives, even though you know, you sunk so much time into it, not a complete failure, not a complete waste.

67
00:57:18,930 --> 00:57:49,470
Wes Bos: That's always cool to hear what other people's like, big failures are, because it feels like sometimes, especially in the tech community, you just see people that are winning all the time, when the reality is, is that there's a lot of people trying to do a lot of stuff. And they have some very either time or money expensive lessons that they've learned along the way, but you look back at it, and it's it seems to be worth it in whichever ways like you like the ones that you've just explained. Sure.

68
00:57:49,500 --> 01:00:18,600
Scott Tolinski: Yeah. Yeah, like some, some are more expensive than others. And you you learn from it and make it make that expense worthwhile. Otherwise, it's just gonna be a big old expense. I also I also attempted to become a professional musician twice in my life, neither which times were going to work out. Actually one of them could have I was in a band for a long time. And my uncle was the editor in chief of Guitar World Magazine, which is like the biggest guitar magazine. And so we had a little bit of an end to the industry. And we recorded a really, like our band recorded a really like, professional four song album that we were selling, and we were selling like decent copies of it. And people in his office were like, liking it. It was getting passed around his office and like, people weren't sure who the band is. And he didn't tell anyone that was his nephew. So he wasn't like, I'm the boss. Like, like my nephew's band. Yeah. And we started to get some some decent calls. But then we like we're all going to college. And you know, we got to we were playing like radio shows for our local radio stations and stuff like that. And then everyone was just like, you know what, I'm gonna go to college instead. That was that was pretty much it. Nobody Nobody had the passion to keep it going. And then another time I tried to do it solo. I've released like three three albums myself, don't look them up, because I'm not good at singing. I like the music a lot. I'm just not i'm not cut out for it. It was one of those ignorantly confident moments where I'm just like, yeah, I'll just put this out here. It's pretty good and some of the stuff I listened to it I'm like yeah, I really liked this and some of it I listened to it. I'm like, What the hell was I thinking? So that was gonna happen. I did one concert as a solo artist and it was pretty sweet. It actually turned out much better than I thought it would have because I was playing this guy and then they had these rappers that went on before me and then I was not rap music, it's singing and stuff like that. And I asked the DJ if he could do some like turntable scratches over my music because I my music is like all pretty boy influenced like break beats and funk beats and then like, acoustic tired stuff like that. It's kind of interesting. Music and the DJ was like scratching over my music and it turned out so good. I was just like this. This made me so much better. I definitely appreciated that. So I tested it. It was never gonna happen. I don't I didn't I don't have I don't have the stuff but I definitely wanted it to happen.

69
01:00:19,230 --> 01:00:22,800
Wes Bos: Can you can you cut a little bit of your music into the end of this podcast?

70
01:00:23,430 --> 01:00:32,820
Scott Tolinski: Maybe? Yeah, I tweeted out about it there. The song I do at the beginning of every level of tut's video is like a modified version of one of my favorite songs that I've recorded.

71
01:00:33,090 --> 01:00:41,820
Wes Bos: bhana wicked, by the way, people are asking what happened to the hilarious sit, strap yourself in, we get that

72
01:00:41,820 --> 01:00:43,260
Scott Tolinski: back for the set? Yeah,

73
01:00:43,260 --> 01:00:50,820
Wes Bos: we'll add it back in for a couple episodes. Just keep you guessing. Yeah. keep you on your toes. Awesome. Well, do we got some sick pics today, Scott?

74
01:00:51,600 --> 01:02:31,800
Scott Tolinski: Yeah, so my sick pick today is cypress.io, which is something that was introduced to me at a local meetup here and is a basically a test runner for end to end testing who replace Selenium. Selenium is amazing. I never say it out loud, selenium, I think it would replace that. But what's so good about Cypress, this isn't an ad. By the way, I just really liked this. I hate writing tests. And I like this a lot. It, it runs your tests next to a video of well, not a video with like the actual browser running the tests. So as one person described in the meetup, like sometimes writing tests can be like trying to solve a problem or make sure a problem solved while being like blind and deaf. And in this point, you can actually see what's going on, you can see exactly what the browser's doing, you can jump back in time to when each test is running to see exactly what the state of the browser was at that moment that the test was running. And the syntax for writing your test is just like jQuery. So it's super easy. Does like automatic waiting for you. So if I say find this element on the page, and the elements down on the page, it will wait until the hell Oh, it has a timeout. But it waits for a couple milliseconds, see if sees if that element appears on the page. If it does, then it moves on to the next step. does whatever you have to do. But I found it to be like it's like writing jQuery and writing your tests. It's superduper. I don't know for someone who doesn't like writing tests and make me like really, really like writing end to end tests into integration tests here. So cypress.io check it out. Nice, nice, nice product right now.

75
01:02:33,450 --> 01:05:08,370
Wes Bos: Cool. Well, to check that out. We've had a lot of people ask about doing a show on testing. And I think it'd be pretty interesting to do something like that and talk about these different ways of approaching so I'm gonna try cypresses while out for myself. Yeah, I like it. My second pick today is a dash cam, actually, and I've been running it for for about a maybe about a year now or maybe maybe about 10 months. And I always like talking about this kind of stuff with other developers because it's not directly related. But we're all sort of interested in this like techie stuff, especially if you have a car and you want to put some tech into it. So the dashcam that I use is called a a dome d 201. And it's actually just a dash cam that comes out of China. And what's kind of interesting about this is that right now in China there's a lot of was a lot of movement in in camera chips and sensors, which mean that cheap little cameras are getting really really good. So things like your GoPro or any any sort of like alternative GoPros in your cell phone and in this case, now a dash cam, it's getting really really affordable to to pop a really good camera that records in your car. So the dome t d 201 was I think it was about 100 bucks Canadian for me and I'm just looking at it right now. So that's probably about 75 bucks American. And it's amazing because it's super good at recording in low light, it's super good at detecting when there's like a collision so what it will do is that if I if I accidentally slam a car door too hard, it turns on and immediately starts recording because it says oh someone just bumped into you and now they're trying to run away so try to grab their plate and I've actually caught two accidents on it already I luckily haven't been involved in any of them but I just look at the hundred dollars versus the like nightmare it would be if I actually did get into an accident and the fault was disputed. Whereas it's so cheap just to pop a little dash cam into your actual into your camera so it doesn't come with the SD card so you do have to pay a little bit extra ticket one of those but they're so cheap now. I think I can I think I have like a 32 gig card I can put something like 11 hours worth of footage on it. It records at 2020 560 by 1440 which is amazing. So big, big fan of, of this dash cam. So check it out nice. I've

76
01:05:08,370 --> 01:05:11,430
Unknown: always wanted to get one of those. So that's a really cool, yeah,

77
01:05:11,640 --> 01:06:16,890
Wes Bos: it's pretty cool. And I also owe one of the downsides to this is that it doesn't have an integrated GPS. So it comes with a GPS and the GPS is used for telling how fast you go. So it overlays the speed on top of the video. So that's I guess that's the downside to this. But what I what I actually did is I took the headliner down on my car, and then I ran, I just put the GPS in the headliner. And then I also ran all the wires through the headliner download pillar. And then I learned, I learned how to be an electrician. And I installed a what's called a pony fuse. So basically hardwired this entire, hardwired the dash cam into it so that there's no wires draping down or anything like that. And it's plugged right into, into the fuse box. Where my thing so I was, that was kind of an also, a neat thing to do is to learn how to hardwire a dash cam nice, super cool. And yeah, as you turn the car as you turn the car on, it'll it'll turn itself on as well. Oh, neat. Any shameless plugs? Oh,

78
01:06:16,890 --> 01:06:42,210
Scott Tolinski: no, I'm just, uh, I'm releasing a lot of videos on YouTube. Right now I'm doing a series on my favorite react packages. So a free series. So you'll see these videos sort of filter and I've only released one so far, but I'm just basically taking a video out to talk about a package I really like and then talk about why I like it. They're pretty quick and little bite sized videos to hopefully help you explore some new react packages. So yeah, check that out and level up tutorials on YouTube.

79
01:06:43,050 --> 01:07:24,810
Wes Bos: Awesome. I'm gonna try plugging my Instagram right now. Because I'm trying to diversify myself off of just being Twitter based. And I really like Instagram as a platform. I think it's kind of cool, especially as you get to see others developers lives outside of just coding because I posted a lot of non coding stuff on my Instagram. That's just me my family things that I'm doing things that I'm cooking meat that I'm smoking trips that I'm taking and whatnot. So if you're interested in that aspect, I'd love for you to give me a follow in I'd love to also follow a bunch of other developers as well. So I'm instagram.com forward slash West boss.

80
01:07:25,730 --> 01:07:26,400
Scott Tolinski: sick,

81
01:07:26,940 --> 01:07:28,730
Wes Bos: sick back or sick,

82
01:07:28,890 --> 01:07:29,700
Unknown: sick plug.

83
01:07:30,090 --> 01:07:48,480
Wes Bos: Sick pluck. Awesome. So that's it for today. I guess we will see you next week. And we're gonna be talking about 2018 or 2017 Year in Review. So stuff that happened as well as a review of what we did in the past year as well. Nice.

84
01:07:48,660 --> 01:07:49,350
Scott Tolinski: excited for that one.

