1
00:00:00,359 --> 00:00:24,480
Announcer: Monday, Monday, Monday, open wide dev fans yet ready to stuff your face with JavaScript CSS node module, BBQ Tip Get workflow breakdancing, soft skill web development hasty, as crazy as tasty as web development treats coming in hot here is Sarah CUDA, Bob and Scott Taylor taught totally at ski.

2
00:00:25,860 --> 00:00:49,590
Scott Tolinski: Oh, welcome to syntax and this Monday hasty treat, we're going to be talking about making yourself uncomfortable, to get better, to become a better developer to grow as a developer to grow as a programmer to be more efficient to do all these things that make you a much, much better coder. My name is Scott Tolinksi. I'm a full stack developer from Denver, Colorado and with me, as always, is Wes Bos.

3
00:00:49,710 --> 00:00:51,120
Wes Bos: Hey, how's it going, everybody?

4
00:00:51,120 --> 00:00:52,680
Scott Tolinski: Anyways, how's it gone?

5
00:00:52,920 --> 00:01:02,880
Wes Bos: Pretty good. Pretty good. Ready to talk about getting uncomfortable? Yeah. Which I really like it's it's a good spot to be in. And that's how you know you're growing, I think. Yeah,

6
00:01:02,909 --> 00:01:45,870
Scott Tolinski: yeah. Speaking of uncomfortable, and this isn't an NAD transition. This is just a fact of life right now. It snowed like three or four inches of like wet snow here last night. No way. Yeah. And like all of our bushes because everything's already grown leaves are just completely flopped over. We have a tree here that's like bent in an arc. And I I shook off all the snow even when shook off a lot of the trees last night at like 1130 because they had like covered in snow already. And they were all in the ground. And so if you let go on on Twitter right now or anything you're just seeing, there's like trees that got bent and broken fell all over the place. By the way. You are listening to this episode in June, we have recorded this episode in May

7
00:01:46,980 --> 00:01:52,260
Wes Bos: 21. We're recording this you have snow that sucks. It's like It's like beach weather. Yeah,

8
00:01:52,260 --> 00:06:17,460
Scott Tolinski: okay, here has been here and it will be again on Friday. But right now it is it is very cold and snowy all of a sudden. Now nowhere. It is not snowing in June dry for for the listener. But so today's episode is sponsored by one of our favorite sponsors over here is intact and a longtime supporter of syntax. And that is Netlify. If you've been listening to syntax for any amount of time, you know how much Wes and I love Netlify. Now what is Netlify, it's a host for all of your front end code. And it makes doing all of the hard things with your sites and applications. Easy. So if you want to deploy a Gatsby site, all you have to do is give it a GitHub connection, you just you connect your GitHub via the project and you click go and Netlify takes care of the rest, it throws it up on a free little domain there for you. And you can add your custom domain when you are ready to go and launch. It takes care of the build process and everything and takes care of your continuous integration. So hey, you push a new version to GitHub and Netlify says no, no problem, my guy, you let me go ahead and update that site for you. Yeah, and it makes it really great and easy. If you're doing any sort of headless site, all you got to do is push a web hook or something like that, and it's going to rebuild your static site. In addition to that, no hay has everything that you need to do user accounts via something called identity. There's forms via something called forms, as well as functions, serverless functions, and it makes them extremely pain less. There's also a really cool new thing called Netlify Dev, which allows you to do all of these things in your local environment. So check it out@netlify.com and see why we love hosting so much over here as syntax on Netlify. So head on over to netlify.com forward slash syntax and see why we love Netlify over here to host all of our stuff. Okay, so let's get into it. I think the the first thing I wanted to do is to talk a little bit about maybe like a I know, it's a parable isn't a parable is just terrible story here about the developer who, let's say they saw CSS. This is this is this is a few years ago, right? CSS preprocessors were coming out. And they were the developer who's good at CSS, I'm good at CSS, I can build all these great things. And now here comes this fancy new CSS preprocessor. You know what this thing is doing? It's getting in the way of how I used to work. It's it's adding a whole nother step. My CSS has to be transformed. Now I used to write just straight CSS, and now I have to write as CSS or sass or less or whatever, and that spits out CSS. And you know what, that's scary to me. It makes me uncomfortable. And I'm not talking about me personally, because I was. I was an early adopter. But there are developers because I worked with them who are very, very against CSS preprocessors. Now they were against them, in my opinion, because maybe they just didn't understand how it could make their life better. And it made them a little bit uncomfortable. And so as a defense mechanism along these developers would say, you know what, I'm good at CSS. I don't need some stinking Robot doing the things that I'm good at. For me, I don't need something automatically writing prefixes and all that stuff, I don't need that I can do those prefixes myself, I can copy and paste them from CSS three plays, if I so choose. But the end of the day, that person was held back. And I'm not speaking about a single individual here. But that type of person was held back from writing better CSS, from writing better code from writing more efficient code and from writing less code. Because the feature of a CSS preprocessor made them uncomfortable because it was outside of what they were comfortable with. So the whole premise of this episode is how you can become a better developer by identifying the things that your ego is getting in the way of and squashing those things so that you can grow as a web developer. So don't be that person who looks at the CSS preprocessor and says, I could do this without this. Because to be honest, the person was probably a slower, worse developer at the end of the day. And now that CSS preprocessors and everything are so commonplace here, you're you're kind of left behind. So I think the first thing I want to talk about is efficiency. So when are you most efficient in your development? Wes, like you personally, when are you when are you most efficient?

9
00:06:17,580 --> 00:07:01,290
Wes Bos: I think I'm most efficient when I know my tools. And I have done something maybe three or four times before. And I can sort of like see all of the different pieces that it is that I'm doing knowing and I think that comes from good planning in terms of like, what features need to happen and how you're going to architect that, as well as just like familiarity with the the different pieces of all the different tools and the code, and then the sort of the gotchas as to how they're so I always remember when I would tackle like a new client website, or if I have a new feature I want to build and know exactly what it is that I'm going to do. That's how I feel most efficient. So that's kind of where I find my best spot. What about you?

10
00:07:01,320 --> 00:09:19,550
Scott Tolinski: Yeah, no, absolutely. When you it's almost like your fingers. They just like know what to do with their typing it out. Because they've done it a whole bunch of times, you're very comfortable, you're very fast, you're very efficient, you get the work done. And that's great. I mean, that's really great for productivity, it's great for getting the work done. It's great for confidence, and it makes you feel good. All in all, that's where you want to be right. That's your comfortable spot. That's that's where you want to be as a developer, however, it's it's hard sometimes to take a look at that, and say, What systems here, what processes, what things Am I doing could actually be improved? What are the things that maybe I'm adding? And this could be even like speed, this could be efficiency, this could be code base, right? Maybe your applications are adding a bunch of libraries and stuff, because you may be maybe you're adding jQuery, right? Because you're just very comfortable with jQuery, but you don't need it. And it's it's adding size to your loading. So what are these systems or processes that you're doing that could be improved in your day to day work? And it's important to take a step back and examine these things and look for the things that could be made worse, or could be made better. For instance, I think there's some common pain points amongst developers. And these are different ones. And I see this a lot from users on Reddit or users on Twitter, or people just talking just around write about different things. For instance, I see people occasionally on Reddit say, well, CSS floats, float based layouts, they work well for me. So why would I spend the time learning something new? Right? Why would I spend the time to learn Flexbox or grid? Because I already know floats, and they work just fine for me. And I think this is just such a missed opportunity. Because floats add a lot of overhead to your code, right? And everything is so much more efficient now with Flexbox and grid that you're really being held back by just not going for it. And to me, that developer is avoiding the uncomfortable feeling that they don't know something. And they're avoiding that feeling of uncomfortableness, uncomfortable. ality? Yeah, there's the avoiding being uncomfortable, right? They're avoiding it, specifically, because they want to feel good. They want to feel like efficient, they want to feel awesome all the time. And that's not always the best, best way to grow. And the best way to learn, yeah,

11
00:09:19,670 --> 00:11:01,980
Wes Bos: I have this even with my own keyboard. So many times, I've wanted to change to a different keyboard layout, because like there's like before I can and all these other different layouts. And it's just like the whole the overhead of having to learn it, and they'd be slowed down. Like I bet, like if I were to take the next six months to learn it, the rest of my life would be much more efficient. But I don't know that I want to take that much time. And there's always this sort of like balance that you have to find where do I spend the time to initially become slower at something or do I have to put the time into learning this thing to get the greater benefit over the next couple of years? Or do I sort of just stick with what I what I have. And I think a lot of developers just like to say like, you know what, like, I'm busy enough as it is. I don't necessarily like having to learn new things. I'm very happy with the sort of whatever's going on with me right now. And at a certain point, I think that's, that's totally fine place to be totally. But at a certain point, you do have to always be continually improving your skill set and sort of ignoring these things or bashing them. It's funny that we use a Reddit because that's generally where I see this sort of stuff where people say I central silly, why would I ever want to do this? I'm totally happy with my current layout. And I don't know, like, do you have any sort of like, like guide to when should you just let something pass you by? versus when should you figure out that this is probably something that I need to be adopting? Because you certainly could adopt all of this brand new stuff, and just be spinning your wheels and wasting your time and have this thing deprecated in a year, whereas you could just be letting stuff pass you buy? And then before you know, you look up and your skill set is three or four years old? And you're not all that hireable anymore?

12
00:11:02,280 --> 00:11:49,530
Scott Tolinski: Yeah, I think there's there's a couple of aspects to it. For me, there's a few things where if something's a new standard, right, like flow, yeah, we're not necessarily made for layout, right? They were made for pulling out of the document flow. So when we got new layout, tools, and CSS, and those became the standard, like the moment those became the standard, that's when you should have learned them. Because Yeah, you can't argue that I can't argue standards right there. They're here, they're not going away. It's not a library, it's not a trendy framework, or something like that they're here. So if it's something like that, then I'm going to say this is the way or this is the this is the thing that I should be learning, this is the time to learn this. Other things are harder to gauge like that. However, you could see a sort of critical mass critical velocity.

13
00:11:49,530 --> 00:11:50,070
Wes Bos: I don't know

14
00:11:50,130 --> 00:12:18,120
Scott Tolinski: what that word for that is. I don't live like he got that. But I like a critical velocity. For I don't think it's mass, a critical capacity for things like CSS preprocessors, where it wasn't just, you know, a small percentage of people were using them. But every single job interview you'd go on, they would ask you if you're using SAS or whatever, every single meetup and everybody you're talking to, and if it starts to feel like that, then I would guess at that point, you probably don't want to ignore it.

15
00:12:18,300 --> 00:12:37,890
Wes Bos: I think this the seventh time we talk about something on this podcast, you should pick Yeah, you want a hard number, keep a count of how many times we measure and like what's something intersection observer, we've probably mentioned that maybe three or four times, two more times, and it's time for you to sit down and learn intersection observer.

16
00:12:37,920 --> 00:14:42,180
Scott Tolinski: Yeah, that's something that's a good example, too. Because let's say you know, a little bit of JavaScript, if you know a little bit of JavaScript, you know enough to go try to figure out some stuff with intersection observer, like, it doesn't have to be good and doesn't have to be easy or whatever. You can struggle through it and experiment a little bit here and there just to get a little bit of a handle on it. I think some of these things that people they like maybe some, some good examples would be like CSS cascading, like people who go through great lengths to avoid learning proper CSS cascading techniques, or, like I mentioned, grid and Flexbox, right? People are avoiding learning that they're saying, well, I can't use grid anyways, because it's not supporting the browsable, you can use Flexbox. So you should learn Flexbox, because that's way better than a float based layout anyways, or heaven forbid a table based layout in this day and age. But then also like doing things with jQuery instead of JavaScript, so many people feel very comfortable finding their elements and doing all of their processing with jQuery, when so many of those things. If you haven't listened to this episode, listen to our episode about why you might not need jQuery or I think it's called is jQuery dead, which is the greatest clickbait title. But you wanna, you want to replace that, because there's so many things you can do with just JavaScript now that we don't need jQuery. And that's an overhead in your application that could be removed. And even front end frameworks in general, I think there's, there's a point at which now where people are still denying the usefulness of front end frameworks. And I'm not saying you need to use a front end framework on every project, because that's not the case. But they are extremely popular for a good good reason. So whether or not you're picking up view, or felt or react, if you want to go with the most popular one, you're probably going to pick react, if you want to pick, I think the easiest to learn, you're probably going to want to pick view. But if you're picking one of the things he did, it's the point where you should at least have one of these in your tool belt so you can understand why because I think that's a big aspect of it is understanding why it's going to make your life better.

17
00:14:42,390 --> 00:16:16,590
Wes Bos: I think there's probably another thing to be said about putting yourself in uncomfortable places is you're not necessarily just ignoring new stuff, but it's just also pushing yourself into a spot where you don't feel comfortable is is how you're going to grow and I think that goes for everything with Like public speaking for me was a big oil, were saying here, it just makes my stomach turn as to how afraid I was to go in front of 12 people at a meet up and talk about JavaScript or doing like a speech at a wedding or all kinds of stuff like that. And really the only spot to sort of get rid of that fear is to slowly push yourself into a spot where you feel uncomfortable, even even with like, like saving money is another good example where like, like, how much money should you be giving away? Or how much money should you be trying to save enough that it makes you feel uncomfortable that you're doing that, and if that's the spot that you want to be, because it's going to push you to grow in whatever skill set it is. And I think that's how you can can like, sort of Supercharge Your, your your learning. So another example might be like, if you've never done anything with Canvas, or audio or video, yes, yes, try to go build something with that, you're gonna be super uncomfortable. It's frustrating, because you might think that you're a pretty good developer, and then you're you find out like, oh, man, I'm actually garbage at this stuff. And again, that puts you in a spot where you feel uncomfortable, where you might have to reach out to others and ask for some help. And again, that's going to really push you forward in your skill set.

18
00:16:16,620 --> 00:21:25,550
Scott Tolinski: Yeah. Because Well, what's better for you is that to do the same thing, you've done 100 times or to do something new, and push that that circle outwards just a little bit. They always like talk about when you get a PhD, that there's like the circle of human knowledge. And you're just making that circle, just a tiny, one pixel that bigger, but everybody who pushes that circle out is like increasing human knowledge. And I like to think about that in a personal sense, too, right? You have this circle of capabilities, or maybe it's like a graph or something, if you want to be a little bit more, not circular with it. But each thing you learn that's different, or you know, advances your skills will push that circle out just a little bit and help you learn or understand things in a different way. So that maybe next time you have a problem, you're going to look at it with a different set of knowledge than you might have looked at it last time. And it could allow for better, more efficient code. And again, like you mentioned, this isn't about learning new stuff. Absolutely not. It's about learning things that you're not good at, and you're not comfortable with and making yourself be in that place. Because, you know, oftentimes we get put in places in the times that we we learn and grow the best is when we're in our sink or swim situation, right? You're you said yes to this thing. And now Holy crap, you have to do it. I said yes to making this slideshow a few months ago, and I've never made a slideshow from scratch. But not only that, this slideshow in particular was like, very complex. And I was like, Okay, well, I've never made a slideshow. I don't exactly know where to start. But this one in particular has some interesting aspects to it, I'll just say yes. And I'm going to figure it out. And as I started going, I started coming up with really interesting solutions. I'm using Flexbox, I'm using viewport units, I'm using all the stuff I know and love. But at the same time, I was just feeling very, like, wow, I just built this and it wasn't that hard. But if I would have, I would have stayed in my comfort zone, I could have used a plugin or a package or something like that. And I could have taken that time and not learned anything and not grown at all, and just plop some code in there. So there there is like a balance. If you have the time and ability to make yourself feel uncomfortable. It's one of those things that you absolutely need to do. You need to put yourself in a place where you're not efficient, and you're not comfortable. And you will grow as a developer. And if you take this little strategy for life, in general, you're gonna grow in all aspects of life, you know, what's comfortable, what's comfortable is sitting in front of your your TV every night and watching TV, and doing nothing, right that's very comfortable, you know, it's not comfortable is taking that time and going out and taking a dance class or taking a cooking class or doing something beyond your limits, and pushing yourself a little bit and putting yourself out there. And I like that you mentioned the thing about public speaking, because that was a big thing for me. I'm really good at avoiding things like that. However, I'm also very good at saying yes to things without necessarily realizing their consequences. So like someone says, Hey, do you want to speak at this meetup? Sure. I'll speak at this meetup. And then like, 15 minutes later, what have I done? Yeah. Meet up now. What am I gonna do? And so I'm pretty good at putting myself in positions like that it was the same way it was for me with with breakdancing competitions or performances or something like that. One good instance is they have like our our crew scheduled to do a performance. And then like two or three people from my crew couldn't make it but we were still scheduled to do the performance. And then the the event organizer was a friend of mine, and she was just like, Well, how about you just do a solo performance? And I was like thinking Sure, okay, whatever. And then I thought about I'm like, wait, I have to do one stand up on stage by myself and do a solo performance but to I have to like right in choreograph a solo performance that I have to like, figure all this stuff out and I had to do it. I was uncomfortable and it was all fine. And I loved it every, every minute of it was great. And I wouldn't have done it, if I would have really, really, truly thought about it. So let's talk about some practical stuff here. Before we get out of here, what are the best ways to like, let's say, you've decided to make yourself uncomfortable here, what's the best way to pick up something or to learn something you're uncomfortable with? I think there's like two major ways of going about it. There's the maybe the research method, and then there's the like diving in headfirst. I think in some instances, let's say you're learning CSS Grid, you're already fairly experienced with CSS, there's really no harm in diving in headfirst and just writing some code, checking out the docs and writing some actual CSS because that's when you're going to see some of its benefits. But I think On the flip side, there's some stuff like let's say you're not great with JavaScript, and you want to learn about Canvas, you could get overwhelmed very quickly, if you get into writing code, if you don't know what the little bits and pieces are. So I think there's this other mode where you have to decide if this is something you're comfortable enough with to start writing code. Or if you're uncomfortable enough, that you want to maybe pop on a YouTube video and watch like a 15 minute basics on this thing, or maybe a few videos on just to get the lingo, the syntax, what's happening, and have a greater understanding of it, because I think that is a, that's something that could make you potentially feel more uncomfortable, right? You're feeling uncomfortable, you pop on some code, you start typing, it all breaks, and then now you're feeling totally defeated. And even even more

19
00:21:25,550 --> 00:22:39,060
Wes Bos: Yeah, my approach to this is generally just to first kind of consume and suck in as much as possible about the topic. So that might be reading four or five blog posts, or watching a couple of YouTube videos spinning up a couple demos that actually work. And then I when I feel like I have enough, you really just have to go ahead and do it, and start to go ahead and build something. So I kind of have a bit of both of those. Like another example for my real life is I'm trying to, I'm trying to make sourdough and bacon right now. And I actually just finished the bacon. And I had watched probably like 15 different YouTube videos on both of these topics. And I still felt like, I'm not sure I sure like there's lost so many steps. And there's all these things. And I just like, you know, I just have to go ahead and do it. And who cares if it turns out terrible. Yeah, no. And now I'm doing it. And I finished it. And it turned out great. And now I feel so much more confident in making bacon or making a sourdough starter from scratch. And it's kind of funny, like, I just looked back as to just like two weeks ago, where I thought like, man, I maybe I should watch more YouTube videos or something like that. And like, just do it. Just go ahead and do it. You've done enough YouTube watching the real learning will come when you actually put it into play. Yeah,

20
00:22:39,210 --> 00:24:51,120
Scott Tolinski: I know. It's like so true. And this advice can be applied for anything like and think about it, you have a nice camera, right? Well, maybe not you. But you might have a nice camera like a DSLR, mirrorless, whatever. Yeah. And it has all these buttons and switches and stuff. And you know what, it also has an auto mode. And sure enough, you could just leave it on auto mode and probably get some pretty decent pictures. Or you could turn it to any of the number of modes, you could start turning some dials, you could start pushing some buttons, and you could start seeing this thing actually being used to its fullest potential. And you could learn a whole lot about the process of photography and in the process of that. And again, in all of these things, it's it's just amazing. When you look at your life and you look at the stuff you're doing how many different things you can apply this knowledge and this process to of making yourself uncomfortable and feeling uncomfortable and being okay with that. One of the things I like to do to practice feeling uncomfortable, and somebody made fun of me on Twitter for saying this, but I think it's important. They're like, Well, why would I be uncomfortable? Well, okay, you have to be comfortable with feeling uncomfortable and taking cold showers or I like contrast showers where you're really hot, and then really cold is a great way to if you are feeling a little too comfortable to put yourself in that place to say, Alright, I can do this, I'm comfortable with this, I can take that knob all the way too cold and feel fine about it. So again, it's just about practice. It's about evaluation. It's about learning what your uncomfortableness uncomfortable with. And I think the the main point here is that we avoid the things we're scared of because it typically makes us feel smart, right? If I can write the same stuff over and over again, it makes me feel good. Makes me feel like I'm good at what I do. And if you're working on stuff that you don't know about, it makes you feel bad, bad at what you do. Okay, good, bad, okay. And feeling smart is not necessarily the same thing as being smart. And being smart requires you to grow as a human being. So don't fall in the trap of wanting to feel smart. You want to feel dumb, you want to feel like you're you're growing. So check your ego at the door, pick up something that you are scared of, and grow yourself as a developer and as a human being.

21
00:24:51,210 --> 00:25:08,310
Wes Bos: Alright, I think that's it for today's hasee treat. Maybe if you have something that you are going to push yourself with, tweet us at syntax FM I'd love to see what it is that people are are trying to learn or push themselves in or make themselves uncomfortable with anything else to add here, Scott,

22
00:25:08,340 --> 00:25:09,960
Unknown: I got nothing. All right. Thanks

23
00:25:09,960 --> 00:25:14,010
Wes Bos: for tuning in and we will catch you on Wednesday. Please

24
00:25:16,020 --> 00:25:25,800
Scott Tolinski: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

