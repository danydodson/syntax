1
00:00:01,320 --> 00:00:10,530
Announcer: You're listening to syntax, the podcast with the tastiest web development treats out there. strap yourself in and get ready to live ski and Wes bos.

2
00:00:10,949 --> 00:00:53,790
Wes Bos: Welcome to syntax. Today we have a you know, it's the podcast with Theseus, well, development truth, I don't need to say that today we have Adam Argyle on the show to talk to us about how does stuff get added to CSS, he said, you know, I'd be sitting there and you may be saying CSS needs a zebra stripe property, how would you go about getting getting that added to CSS? So Adam is here today to explain all of that. We'll talk about him and introduce him in just a second. But first, we are sponsored by Log Rocket, which is browser session replay. And Freshbooks, which is a cloud accounting with me, as always is Mr. Scott hilinski. How you doing today?

3
00:00:53,999 --> 00:01:04,470
Scott Tolinski: Scott? They don't good. doing very good. Just hanging out. You know, drinking some coffee, the reg. I got, of course coming out today. So you know, I'm on my normal gogogo mode.

4
00:01:04,859 --> 00:01:09,930
Wes Bos: Oh, yeah. Good. Congrats. So welcome, Adam. How you doing today?

5
00:01:10,139 --> 00:01:16,170
Adam Argyle: I'm happy. stoked to be here. It's weird seeing your mouth. Let's move with the sound because normally All I hear is.

6
00:01:17,700 --> 00:01:26,040
Wes Bos: Yeah, we only once if we ever put out that video of us recording because it's not that interesting. But maybe maybe

7
00:01:26,579 --> 00:01:29,010
Scott Tolinski: people ask for it all the time, though. It's not like Yeah,

8
00:01:29,040 --> 00:01:34,590
Adam Argyle: yeah. It's like a curiosity that I have to I have to scratch the itch. I'm just like, what do they look like? You know?

9
00:01:35,880 --> 00:01:45,540
Wes Bos: Yes, not very good. So why don't you introduce yourself, who you are, where you work, what you do things like that?

10
00:01:45,780 --> 00:02:11,970
Adam Argyle: Sure. My name is Adam Argyle. I'm a 34 year old dude from Seattle. I've been writing code and apps for professionally over 10 years. I currently work at Google. I'm on the Chrome team. And I love CSS with like this crazy fiery passion. I really just love making like good, smooth, tangible, gorgeous, buttery, silky interfaces. But you know, I do that at Google. And I and I teach and I talk about it. That's kind of mean a nutshell. I guess.

11
00:02:12,330 --> 00:02:15,530
Scott Tolinski: Man, I'm into gorgeous, buttery, smooth interfaces. I'll tell you that.

12
00:02:15,560 --> 00:02:22,800
Adam Argyle: Yeah, you are. Yeah, you do a great job with that. Hey, thank you. UX engineers we got to sweat those details right? Yeah, yep.

13
00:02:22,830 --> 00:02:24,500
Scott Tolinski: Yeah, yep. details

14
00:02:25,110 --> 00:02:46,199
Wes Bos: we shouted out your your Twitter account. I don't know a couple months ago, just because like you've been pumping out really good CSS content and like you see a lot of JavaScript content on Twitter but some of the like nitty gritty what's new and CSS things like that it doesn't always get surface so I think your Twitter account is one to follow for that type of stuff. Thanks.

15
00:02:46,199 --> 00:02:56,850
Adam Argyle: I really hope to be a hub for old and new sort of info, but I can't I love the new stuff. There's something new and shiny. I'm there I'm trying it out and I'll tell you what's good about it. Yeah,

16
00:02:57,569 --> 00:03:08,250
Wes Bos: that Twitter account so you can follow as Argyll Inc a RG while he e i n k? And is the ink because your wife is a tattoo artist? Are because he loved tattoos?

17
00:03:08,280 --> 00:03:38,819
Adam Argyle: No, it's actually really old. Man. I think I made it in 2002 or something like it's almost as old as like your aim handle. You know. Argyle ink was I think I just thought it sounded cool. It sounded like a business name like Argyle ink I NC. And so now all I have to do is correct everyone. It's okay. I just thought it was creative. Like if you ever seen Archival Ink, what would it look like? If you could paint with it? If you could paint with argon equal it would leave a pattern behind you know, like, Is it a mask into a pattern like anyway, so I just like to is provocative.

18
00:03:39,359 --> 00:03:44,759
Scott Tolinski: There was a video game Mario Paint, where you could paint with our girl patterns. So that was a

19
00:03:45,509 --> 00:03:53,100
Adam Argyle: that might need to be my new website video that plays is Mario or me maybe all show up and paint Argyle paint on the screen? That sounds awesome.

20
00:03:53,220 --> 00:04:01,410
Scott Tolinski: That would actually be a pretty cool project if you think about it, because you could just like do it like with a mask and have some art beneath it. And when you have the Yeah, to be a good background for my

21
00:04:01,410 --> 00:04:11,039
Adam Argyle: painting. Totally this Okay, Challenge accepted. You could even do it with pixels, so that it had like a soft edge to it and was like, Oh, yeah, like real paintbrush,

22
00:04:11,069 --> 00:04:27,450
Wes Bos: and yeah. Let's talk about CSS for the entire episode. So if there's something that should be added to CSS, one might think that the process of getting something added to CSS is go on Twitter and complain about it.

23
00:04:27,480 --> 00:04:28,470
Adam Argyle: holler at your boy,

24
00:04:28,499 --> 00:05:15,060
Wes Bos: right? Yeah, holler at your boy. Hopefully, the browser vendors see it and then implement it. But there's there's obviously there's an entire standards body behind CSS and there's proposals, things that people think should be added. There's like years and years like Flexbox and grid went through, I don't know something like six or eight years of development before we finally got it. So there's this whole process of back work that happens before it actually hits the browser and before we can actually start using it. So that's what I want to sort of understand today is like, how does Something like CSS variables or color functions or border radius even get added to it. So I asked him to come on. And he made the entire outline for the show, which is awesome. So do you want to sort of take it from here and start with start with what you got?

25
00:05:15,120 --> 00:06:08,910
Adam Argyle: Yeah, I just want to, like introduce it to like, in that design systems are a really hot topic right now. And you could almost think about the web and CSS as a part of the design system of the platform of the web, right. And it's been around 1520 years now has a governance model. And there's folks representing pieces of it, just like your design system. And so it kind of makes sense to think of it that way. Because the scale of what we're about to go over is kind of large, like, some things go kind of quickly through the process. And some things take ages, right, because they're huge, and they're big risk factors. And they have all these implications. So I just thought that maybe hopefully sets up the scale of what we're talking about as being reasonable. Right? It got here slowly, there was even at one point, CSS itself was a proposal. And that's just kind of really about Yeah, there were there was competition. One of them was jSs, EI, JavaScript style. Oh, yeah.

26
00:06:08,910 --> 00:06:10,170
Scott Tolinski: Okay.

27
00:06:10,290 --> 00:06:35,850
Adam Argyle: And it was a proposal, I think it was very similar to JavaScript style sheets, where you'd have something a little bit more imperative and less declarative, and blah, blah, blah. So there were proposals and folks met to, to hash out which one was going to be right and why. So anyway, we could follow a couple of things through the process. Or we could just go over the process. Do you guys mind? Or do you want to follow something along or, or just go through the process, you have a preference?

28
00:06:36,270 --> 00:06:41,490
Wes Bos: Let's go through the process and like, give like maybe a couple examples of things here or there? That makes sense?

29
00:06:41,550 --> 00:07:19,200
Adam Argyle: Sure. Okay. So like, I have a couple of proposals out that can help set up things to think about in terms of proposals. And yeah, step one, is, is essentially Yeah, you have to say what it is you want, right? And kind of the easiest place to go say that right now isn't a GitHub issue. So if you have a cool idea, which people do all the time, just go to GitHub, and articulate the problem. And your use case, and maybe a solution, you don't even have to have a solution for proposal, you can basically be like, this is a really common thing I build on the web. And man, there's nothing easy to help me out. If this one little thing was here. I cut out this whole chunk of code.

30
00:07:19,830 --> 00:07:23,550
Scott Tolinski: What's the repo? That you know, is

31
00:07:24,000 --> 00:08:12,660
Adam Argyle: CSS Working Group drafts? Let me Yeah, W three Cs slash CSS Working Group drafts. And yeah, it is it's as raw as open up a new issue and start typing, they'll help you guide it into getting proper tags. And just like if you were in some major repository, trying to contribute to a framework or something, right, they're going to have sort of processes that they'll help guide you into and stuff like that. But I like that the process starts with this like innocent conjuring of a concept. And you don't really know if it's good or bad until people start talking about it on that. So that's how you can start to gauge your proposal or your ideas, success, or whatever's how many people started to comment on it the first day, because sometimes a proposal will go out and it sounds awesome. Like I have one for motion blur. I was like, yeah, motion blur, who doesn't want motion blur on the web? Right, Scott? Scott, wink, wink, God,

32
00:08:12,720 --> 00:08:13,590
Scott Tolinski: I'm in, I'm in

33
00:08:15,750 --> 00:08:42,899
Adam Argyle: it, so I like I'm like, I'm dropping fire on the proposal, and then like, it gets some love. But then you have other things to get proposed. And all of a sudden, the comments are hot, and they could be hot in a bad way, or a good way. They could be hot in a bad good way. Right? anyway. So that's like a good gauge of interest from the community or interest in the spec authors themself is like, how provocative is it? Well, how much does it have to offer? How much is it anyway, so it's kind of a fun thing.

34
00:08:43,399 --> 00:09:04,110
Scott Tolinski: It's it's amazing that it's so I don't know, you think of this is CSS as being this this nun, an unchangeable thing that grows over time, but this thing that you have no control over. And it's amazing that, that it's that easy to just pop in there and throw in an issue if you have an idea or read through other issues or express your opinion on them. And it's just amazing that it's in 2028. So this open, you know,

35
00:09:04,980 --> 00:09:15,570
Adam Argyle: I agree, and GitHub has been an awesome spot for that conversation to be facilitated out in the open and yeah, open sources. It's sick, right? I mean, we're in a really, really fun time for all this.

36
00:09:16,080 --> 00:09:47,429
Wes Bos: I'm just looking up something that I asked, I don't know, maybe four years ago, I asked Rachel Andrew, she had the like, CSS, she had like an entire repo of just asked me questions about CSS Grid, because she was one of the few people that are that understood the entire thing. And I said, like, how do you select rows in CSS Grid? Or can you select rows and CSS Grid like I want us like every other row on wrapped elements. And that's not possible in Flexbox, or grid right now. And I'm just looking that up. It's 28 days ago,

37
00:09:47,429 --> 00:11:15,450
Adam Argyle: somebody proposed pseudo selectors for selecting elements based on which row they are in, which is kind of cool. That would be sick. Absolutely. And yeah, sometimes things can sit dormant for a while. Right, you can have like a real rad idea just chillin. And it's like incubating and it sometimes they're waiting for timing. Okay, timing is a huge one, I think we Okay, step two in this outline that I've put on the document was time. So we had a GitHub issue. And just really quick the bullets I had in here as you share your use cases, make sure the problem that you've had is really succinct. You can strongman a solution be like, wouldn't it be sweet if I could do this. And so if you go to like my motion blur, one, you can see me like, trying out fun motion blur syntax, I'm just being creative and trying to think about something that fits within the spec and is reasonable. And you can even make a JavaScript demo. So if you really want to go far with a proposal you'd like, here's the CSS I want to write, here's JavaScript, showing you the interactions that are the result that I want to get, but I prefer to do this declaratively. So you can kind of go polyfill yourself, just super rad. And then step two, so after there's a proposal, and it kind of gets into this, like public facing document, it Time, Time needs to happen. And this is where you might have someone else make a proposal against her proposal, like counter proposal, or they could fork and contribute to your proposal. Comments are going to happen, people are either gonna like it or dislike it, they're going to tell you where it's broken. And there's gonna be a lot of back and forth and maybe even some bike shedding. Hmm. Do you think any bike shedding happens?

38
00:11:15,899 --> 00:11:18,570
Scott Tolinski: Never. Ever

39
00:11:18,600 --> 00:11:31,140
Wes Bos: now, for our audience bike shedding is when people talk about what color they should paint the shed instead of actually building the shed. Is that a fair? That's literally Yeah, it's

40
00:11:31,140 --> 00:11:53,820
Adam Argyle: like the sheds not even done yet. And you guys are over bickering with your beers over What color? It should be. You know, it's Yeah. It's sometimes bike shedding is good, right? Like, look, look, the color of your shed and the color of your house. This is important, but maybe we should have the house done. So anyway, bike shedding happens. And at that point, it can be kind of nice or bad. Because it can hold something back. Like we have logical properties. Y'all did an episode on logical props, right?

41
00:11:54,120 --> 00:11:56,039
Scott Tolinski: Yes. Or we talked about that.

42
00:11:56,070 --> 00:12:41,970
Adam Argyle: Yeah, you talked to Okay, I remember you represented him really good. I was like, real proud. I was like, Wow, nice job. But like logic properties have a shorthand that currently is being it's had so much bike shedding, it can't move anywhere yet. So when you have logical properties, you can say margin block and do just the top and bottom margins and a shorthand, you can say margin in line and do just to left and right. But you can't say margin, and then do all of the sides with logical properties, you get all the sides in the physical instead of the logical. So they're bike shedding over how to do that, like people are gonna want to use logical properties on all sides in one shorthand, what's the word? And so there's like lm margin, or margin, colon, whatever. And then you put not logical at the end, and there's all the spikes shouting about like, how would someone say they want to use margin shorthand, but get logical properties out of it?

43
00:12:42,000 --> 00:12:42,690
Scott Tolinski: Oh, yeah.

44
00:12:43,110 --> 00:13:00,510
I actually used logical properties in a course lately. And when people were taking the course, they were like, this is the first time I'd ever seen this. Why can I do that? Like, specifically that use case that you outline? And it was just like, Oh, yeah, you're right. Yeah. It Yeah. It's funny that you you mentioned that exactly.

45
00:13:01,049 --> 00:14:08,520
Adam Argyle: That one particularly haunts me, because I want it so bad. Like I'm so in love with, like, logical properties right now. And then I'm like, oh, but oh, that's weird. I'm like, I'm, there's just one side of this. I can't do yet. Yeah, right. Yeah. So I went into that proposal just the other day, because right, it's in this moment of time, it's churning in time. It's not an editor's draft yet. So I went and I bumped it. I went and I just went to the proposal and like, this is meaningful. Let me go. Here was I actually tried to say something that I thought would be provocative, because I was like, let's spin people up. So anyway, you can go in there. I didn't even like shouted so much. I'm like, let's bike shed it this way. It'll be fine. Because I think I mentioned like leaky scopes, or something. And I was like, ooh, people love talking about scope leakage. Anyway, right. Our industry is fun. I love our terms. Okay. So anyway, things happen with time, right, multiple proposals back and forth. And if something kind of gets hardened, and it gets enough of a proposal that kind of feels solid, it can move into an editor's draft. So okay, let's pause for a quick question time. And then we'll bounce between this like asynchronous and synchronous stuff that starts to happen in this time zone. So no, any questions while we're over here?

46
00:14:09,330 --> 00:14:35,070
Wes Bos: What do you propose? Like what do you think about what you should do for logical properties? If you want to do them all in one go so that I guess we should explain to the audience The problem is that you can do block which is top and bottom, but if you're in Japanese, then it's left and right. But if you just do just margin, it's always top right, bottom left, and it doesn't switch if you are switching your, your document orientation.

47
00:14:35,159 --> 00:15:32,909
Adam Argyle: Yep. So my preference is I've kind of gone back and forth. And I and I think I like this syntax, it's margin colon, you know, one REM space, one REM space, one REM space, two REM or whatever is space, logical. And so you just sort of flag it a little bit like and here's the reasons I like it is because it is contextual to just that one instance of declaration. So just that much shorthand that I wrote, is articulated as wanting the logical property orientation. versus some of the other proposals have been like, well, I want to go into my style sheet just like at page flow relative or flow logical. And then you set the whole document, pretty much exclusively use logical properties and physical properties become the one you have to opt into. And so yeah, I like the one where it's sort of like, only have me modify the little pieces that I need to modify it one time, instead of doing something sweepingly, that might cover the whole page. But oh, yeah,

48
00:15:32,940 --> 00:15:47,640
Wes Bos: yeah, that's, that's kind of like, um, background size cover. I like once in my career have remembered the syntax to use background size cover on the background shorthand, there's like a slash in front of it, or something weird like that. Yeah,

49
00:15:47,640 --> 00:15:54,960
Adam Argyle: there's a lot of fun slash shorthands. In CSS, I like tweeting those two because they're, they're like, tricky, fun little separators.

50
00:15:56,309 --> 00:16:04,830
Wes Bos: Was that slash added, because they, they had to modify shorthand in after, after it had already been created.

51
00:16:05,490 --> 00:16:37,529
Adam Argyle: The slash is like a, I don't know, when the first one showed up, I feel like it's five or 10 years ago. But it's a separator in a special way, where it's like a space as a type of separator. And we have parentheses as containers for parameters. And the slash is, it's some sort of like explicit separator, I can't remember why. But the CSS Working Group has a very, very explicit reason that they like to use those. And you see, it showed up in the new color syntax, too. So instead of hsla, it's HSL. value, value value, slash opacity.

52
00:16:37,529 --> 00:16:39,510
Wes Bos: Oh, you're right. Yeah,

53
00:16:39,510 --> 00:16:46,200
Adam Argyle: there's there's new functional color notation is what it's called. So you think I've even heard of that? Oh, it's awesome.

54
00:16:46,549 --> 00:16:54,149
Wes Bos: An entire episode of these little nuggets like 20 things that are maybe are coming to CSS or something like that. Yeah.

55
00:16:54,149 --> 00:17:12,320
Adam Argyle: So I do think there's, there's so much to just little tweaks to they're constantly revising this in a really, really healthy way. I just, the more I get into the working group, and I hear these calls, and and I'd see these meetings, these folks are really, really considerate. It's the type of people you would want managing your design system type of thing when

56
00:17:12,350 --> 00:17:45,750
Wes Bos: you trust them. I'm just like searching all over this repo. Now. I know mind things that I want. Because like another thing I want to go vote Yeah, dead dead small opacity added to a hex color. Like right now, if you want to do like, Oh, yeah, you want to do like 50%? Yeah, yeah, it could be like a, like Fr. A. And you have to remember what the hex values are for like zero through 100% opacity. Yeah. And I would love to be able to do just hex for slash 0.5 or something like that would even be better. It'd

57
00:17:45,750 --> 00:17:50,190
Scott Tolinski: be like a transparency function. Right? You could just call it functions of trend. Why

58
00:17:50,190 --> 00:17:52,950
Adam Argyle: don't you pull those in the CSS Working Group drafts?

59
00:17:53,160 --> 00:17:54,630
Scott Tolinski: Right? Yes.

60
00:17:55,710 --> 00:17:58,170
Wes Bos: Is that Do you know where that's at right now? Because,

61
00:17:58,380 --> 00:18:08,250
Adam Argyle: yeah, I'm writing. Um, that is the first thing I'm an editor on. So I wasn't going to boast or anything, but that you brought it up. So it wasn't me. Yeah, I

62
00:18:08,250 --> 00:18:13,710
Scott Tolinski: want that. I want that. I also want to be able to use CSS variables in media queries.

63
00:18:14,040 --> 00:18:39,590
Adam Argyle: Ah, dude, that one hurts. I want that really bad, too. That post CSS will do it for you. It is a build step. But yeah, sometimes that's not good enough, right? You want it like in there for real? It's got to have it. Yeah, we're almost at it. I mean, we're sidetracking a little bit here, right? But we're, like our build tools are gone, right? It's just like, Ah, you're like, I use Babel, just for like that one thing. And then it's like, I use post CSS just for that one thing. Like, how long until they're gone? I don't know. Is he interesting?

64
00:18:39,660 --> 00:18:48,660
Scott Tolinski: Oh, in West as a Canadian, don't you feel upset that you can't use the correct spelling of color? By your? Yeah. So you had you have to use post CSS for that

65
00:18:48,690 --> 00:19:02,330
Wes Bos: we have both Gray's you have those grades, or something in my brain totally clicks. And I never spell it the wrong way. But I always put a unit when I'm typing it, and I never put a unit when I'm not

66
00:19:03,000 --> 00:22:07,200
Adam Argyle: nice, nice skills. Oh, though, I was gonna say that the color functions. One of them has an implementer Oh, snap that actually rolls that's really nice into the kind of the next settings here. So let's follow cold color functions a little bit. Okay, so what we said we have an issue. time has gone on, people have talked about it. Now let's talk about two two ways that time is being impacted. There's by community like Scott and West who are visiting these issues, and they're uploading them. And they're commenting. And they're saying yes, I have use cases for that. And the working group goes, look, we have interested users of a feature that's important to them to know that people want to use it. The other side of that is implementers. And then another role is people who are authors. So these are the ones bothering the spec itself. So you need interested users, like developers, you need interested implementers These are people that work on the browser, and then you need a spec person in the middle to sort of articulate and write up something that can meld these two folks together into a harmonious feature in CSS. So we have the editors draft right now for color functions, it's really it's color level five. So color level four. Anyway, there you can go look at what came in color level four, and what will be coming, that's still there not everything's out from color level four, Carlos color level five builds upon color level four, it's so much it brings in these color functions, one of the color functions has an implementer. So that's essentially the exciting thing I was going to get to as someone at Microsoft working on chromium now, right, we have two different big companies working on the same engine, fair, collaborative, they picked up color functions, they pick a color function so that they could fulfill a use case that they had. But ultimately, these things are, they're moving. And I think it's really exciting that if we could have that in our CSS, it would make make theming, and all these sorts of things. For design systems, right, you get to articulate your brand values in one spot, and then just build off of that strong foundational route a whole system into your app. So that's coming, where it's just gonna be all managed in CSS, no build steps, super optimized, editable in dev tools, the whole nine. So we have the editors draft, it's being written right now by just people. So that's right now it's me, you know, Leah, and Chris. And we're each writing different parts of this editors draft, we communicate and contribute together on GitHub. It's very public in the open. So this spec it's getting written is for developers and for implementers. And we're trying to do it in a space where everyone can talk about it and contribute with us. And what you need after a draft is to get implementer interest. So you need to convince a browser developer to start prototyping with it. And At which point, they begin prototyping with it, you'll start to see tweets that go out like intent to prototype it up, you'll see these and that means a browser is putting a new feature behind a flag, and you can open up Canary and turn on and try a new CSS or a new JavaScript feature, because there's an implementer. That's implementing something against a draft spec. So this is why it's declared as intent to prototype and not intend to ship intend to ship comes later in this process once there's been some hardening. So I'm going to take a little pause and breather, and we'll reconvene? I don't know.

67
00:22:07,770 --> 00:22:32,880
Wes Bos: That's why they have they got rid of vendor prefixes, right is that people were vendor prefixes were initially meant for testing this stuff and sort of putting it out there. But then everyone just started to go ahead and use it. As soon as it snuck its way into one browser. And then we'd be like, I totally am chrome every other browser socks. And that's why vendor prefixes are pretty much not a thing anymore.

68
00:22:32,910 --> 00:23:30,600
Adam Argyle: Is that correct? That is correct, they're gone. They also just didn't encourage, like, we want people to use things unprefixed because then you're not sort of championing one browser over another. So we're, then you're not playing any favorites. And so it's kind of nice to get rid of them. And then do you guys know origin trials, it's like the next more hardcore version of experiments. So I see we have prefixes, that's like the old school really easy way to get started with an experiment. We have experiments, which you can go into Chrome settings and turn these on about flags. So Chrome, colon slash slash flags, and you can go turn on a bunch of fun experiments. And then there's origin trials. And this is something where you can work with Chrome itself and enable your domain. That's why it's called an origin trial, like your website would get special treatment from Chrome. And it would automatically turn on a bunch of cool flags for every visitor, cool, your visitors will attend your site and get a flag that you want. And so that you can prototype with this. It's like a canary sort of like scenario. Kind of cool.

69
00:23:31,080 --> 00:24:36,780
Scott Tolinski: Yeah, very cool. Awesome for experimenting. And if you want to experiment with your site, make sure that you use an N service to make sure that your users can give you good feedback about whether or not your site is actually working. And I'm talking about Log Rocket. Now, the cool thing about Log Rocket is that your users don't have to explicitly give you that feedback, you just get it because Log Rocket takes a session replay of your site whenever anything goes wrong. So let's say you heard us talk about something fancy CSS wise, you just throw it into your site without even thinking and well, that thing doesn't work just doesn't flat out exist. So your site's broken and ugly. Maybe you threw in some bad JavaScript in there, too. And the user clicked on something and you actually get to see visually that not only does your thing not work, but it's also broken and ugly. So you can see this all with session replay via Log rocket.com. You also get access to your Redux store, network activity, console logs and errors all that more. And it even works with everything that you know and love. So check it out Log rocket.com forward slash syntax, and you will get 14 days for free. So check it out.

70
00:24:37,440 --> 00:24:41,190
Wes Bos: So what's next after the implementer?

71
00:24:41,580 --> 00:25:56,100
Adam Argyle: Okay, so we've got the editors draft. And the next phase is called the Working Draft. And the Working Draft essentially means it's not a draft anymore. It's hardened. It's been reviewed enough times it's gone through. So here, let's even talk about the conference calls and face to faces that happens sort of as everybody's in GitHub and doing all this typing and all this commenting. We have conference calls there once a week. And there's usually about 10 items to be talked about on there. And those will be issues and proposals from GitHub that we talked about as a group. And so that can be, well, sometimes it's emergency items, like things get injected to the top of the list. And sometimes things get kicked to the next. So like, there's some really, you know, niche edges of the web that don't always get the attention of the group. And then there's also face to face. So four times a year, well, it was four times a year, I don't know what we're doing anymore, while we're doing virtual face to faces. But this is where we would meet face to face and talk about these things, people will present their proposals, they'll present items of their draft, and get consensus and feedback immediately. And so the goal there is like, crush issues, that close issues. And so the conference calls in the face to faces are all about resolution, now synchronous resolution, and then we go back to the asynchronous sort of time workflow where things happen and GitHub. Okay,

72
00:25:56,100 --> 00:26:05,910
Wes Bos: what like, where did those happen? Is it like, in different like, you guys go to Hawaii or something on on big CSS box or something like that? Right.

73
00:26:09,540 --> 00:26:36,810
Adam Argyle: I mean, I'm lucky I'm on Google's book, but yeah, they are around the world. The one that was in the middle of COVID was supposed to be in Ireland. I was supposed to go to Ireland. I wanted I still want to go to Ireland, Ireland. Can I go to you still? A little sad. But yeah, they are around the world. They try to move the time zones to be courteous and considerate of all the members who are international. And we, you know, sometimes it's a really big bummer for my timeline. But other times, it's great for my timezone. So

74
00:26:37,440 --> 00:26:58,650
Wes Bos: that's cool. And is there any like, I remember once I was at like a j Cray conference, and we were in an elevator with like, half the core team, and someone's like, this should this should not be happening is if something goes this elevator were to plummet, like, half of the juice behind jQuery would be gone. So is there like some rules where you can't all eat the same food or

75
00:26:58,650 --> 00:27:08,190
Adam Argyle: something like that? Nope. In fact, not only think about it, there was a time we were all on a roof. And yeah, that could have been catastrophic. It's just one gust of wind. Do we all fly?

76
00:27:08,790 --> 00:27:09,540
Scott Tolinski: on a roof?

77
00:27:10,710 --> 00:27:12,330
Wes Bos: It's kind of morbid. Apologize.

78
00:27:12,360 --> 00:27:14,460
Scott Tolinski: Yeah, yeah, you're taking this?

79
00:27:15,420 --> 00:27:18,840
Adam Argyle: What about this this show? If you guys were gone, this show would be a bummer.

80
00:27:22,080 --> 00:27:24,180
Scott Tolinski: Let's keep this conversation going. Thank you.

81
00:27:24,450 --> 00:28:30,780
Adam Argyle: All right, back to CSS. Well, here, here's a fun thing to think about. We've thought about these proposals. And then we've talked about an editor's draft, we have a working draft of the next stage as a candidate recommendation. And then the fourth thing is becomes a standard. And I want to just briefly talk about how those are kind of aligned two stages, like we have in JavaScript, I find the stages in JavaScript really meaningful and helpful. So this is things like stage zero, stage one, stage two, stage three, stage four, these are in Babel, where you're sort of articulating how risky of a cool feature Do you want to play with. And those can be kind of similar to what you see here in CSS as an editor's draft is like stage zero or stage one. I mean, it's pretty risky for you to go work and and assume that that CSS as it is in that spec is going to live in the standard. But you can go play with it anyway. So like post CSS has a lot of that stuff for you. Then there's stage two, which is more equivalent to a Working Draft. And a Working Draft essentially becomes a Working Draft when the working group decides it. So they say, Hey, we want to promote this. We think it's hard enough. We've gone through all these things. It also starts to get tests written. Did you guys know there's unit tests for the web? Now?

82
00:28:30,930 --> 00:28:33,930
Wes Bos: Yeah, there is that that smiley thing is? The smiley

83
00:28:33,930 --> 00:28:36,330
Adam Argyle: thing is called an acid test.

84
00:28:37,830 --> 00:28:48,270
Wes Bos: You Yes. And like basically it just like it says, like, border, right? One PX green, and then it checks that that actually renders out like one PX green, right?

85
00:28:48,300 --> 00:29:45,600
Adam Argyle: It's the same as visual regression testing. Yeah, where you're, you're comparing a golden screenshot with something else. And so the way that you do that in HTML, so they're called web platform tests, WP T's and you do you go write a little HTML file that makes an assertion, it draws something, and you have a control and an experiment. And they get rendered automatically through ci, CD and GitHub, I think they're all actions now. And you can know if you broke the web and in one of your features, and it's a good way to get what you want done is to go write those, like FOR FLEX gap, for example, I pushed for flex gap for so long, and everyone's like, go away. And then I was like, okay, you know, what I'm gonna do, I'm gonna, I'm gonna go write the web platform tests. So that read starts to show up on all those developers console. And you know what a developer hates tests. They don't want to see he'll read. And so I felt like it was like a subliminal way that I was trying to encourage a feature was to just go just inject some read another console and annoy them. I don't know if it worked, it seems, seems good.

86
00:29:46,710 --> 00:29:48,150
Scott Tolinski: Amazing, very amazing. What

87
00:29:48,150 --> 00:29:49,800
Wes Bos: what the acid test then

88
00:29:50,010 --> 00:30:21,480
Adam Argyle: acid test was like, that was some early browser days where you would have it was like a cork exposure. You were intentionally building like this little DOM node thing that you knew was going to render differently. And all the different browsers or at least it wasn't supposed to. And then it became a joke that it did. It's somewhere along those lines, like it had good intentions at the beginning. And then just slowly sort of turned into because it was a face, right? So you'd be like, hey, browser under this face, and you'd go to like Netscape. And it just looked like this distorted Picasso. And you're like, Yeah, I don't think to CSS is rendering. Very good.

89
00:30:22,610 --> 00:30:28,230
Wes Bos: That's funny. I never knew that. Wow, you're like a CSS historian. Yeah. Who would have thought?

90
00:30:29,490 --> 00:31:07,650
Adam Argyle: Okay, wait. So we got web platform tests, which are totally like unit test. I think they're really cool too, because they're very bite size. And all the browser's run those against their own browser. So you can go see how Safari and Firefox and chromium are comparing in their web platform tests. This is very much internally, the way that the browser implementers know how well they're doing. So right. So there, we had those roles. We had like implementers, the ones building it in the browser, us who is just like the community. And then we have the community working group that sort of sits in the middle. And it's nice to know that those web platform tests ensure that this feature goes out and will be hardened for the future. I went and wrote a bunch for flex gap. And I found bugs in Firefox. And they were happy. They were like, thank you.

91
00:31:07,950 --> 00:31:09,120
Unknown: Yeah, that's amazing.

92
00:31:09,120 --> 00:31:22,290
Scott Tolinski: That's a, I don't know, the whole process is so fascinating for me, especially because I'm coming in, like I know, like, very high level of how things happen. And now I'm getting to see how the sausage is made a little bit. And I'm excited about it.

93
00:31:22,950 --> 00:31:24,210
Adam Argyle: I'm glad this is interesting.

94
00:31:25,470 --> 00:31:33,570
Wes Bos: So what about if something gets to stay age three, that's when the browser's start to implement it right.

95
00:31:34,260 --> 00:32:33,690
Adam Argyle: Sometimes, too, sometimes editors drafts, so that color function we're following that's in an editor's draft state, I can send you a link to it. And there's an interested implementer. Now, it's only one interested implementer. Let's talk about what you need in order for something to graduate as a as a proposal as you need to implementers This is crucial to the life of the web. And this is why if we lost our third primary engine, it would be very detrimental, but kind of right now, we're in an interesting majority scenario. Does it make sense what I just said right there, because I'm like comparing engines, chromium WebKit, and Firefox, right. And so, you know, like chromium can't just go make standards, chromium can't deploy a new feature, release it in the browser, not behind a flag and call that anything of a standard that it has to be in to implement implemented in two browsers that both passed the tests for it to become the basic start of a standard, it really needs to be implemented at all of them before it gets to Super official stamp. But yeah,

96
00:32:34,560 --> 00:32:45,750
Wes Bos: yeah, that's what I was gonna ask is like, what happens when Safari just says no, because like, we've seen that happen yesterday, or they they drag their heels? What happened? What happened yesterday?

97
00:32:45,810 --> 00:33:41,850
Adam Argyle: Oh, no, you haven't seen this big one. Okay. So, and I'll explain it in the perspective of them, because they're coming from a meaningful place. But they literally just said, they're not going to build like 10 things. So anyway, the reality is, what they won't do is due to fingerprinting. So what they've identified is that by tracking something like your preferences on your phone, let's say it's a Data Saver preference, or it's a prefers reduced motion preference, or it's some sort of preference, right? This is a thing that you have identified and is unique kind of to you. And what they'll do is they'll take all of those, and they'll track them around the web, and they have these scripts in these different examples that show how from JavaScript or from wherever people, you know, even on a server, just sniffing your headers and what they can get from you, and how they can start to track you. And so Apple has said, here's a huge list of features that are suspect that we won't do until they figure out how to fix the security issues on them. Hmm.

98
00:33:43,230 --> 00:33:49,500
Scott Tolinski: Yeah, so one of them was like, mini mini stuff that would, that's the one thing that caught my eye, but I didn't see the entire list.

99
00:33:49,530 --> 00:33:51,330
Adam Argyle: Yeah, there's a, that's a bummer. But

100
00:33:51,360 --> 00:34:46,650
Wes Bos: I remember, like, the first one of those that came out was, you cannot get the color of visited link in JavaScript. Because that's the issue. Like somebody put out this website where they just styled all visited links block, and all unvisited link, display none. And then they just came up with a list of websites you had been to. And then they pulled that list via JavaScript, they were able to just basically scrape your browser history on that. And that was a huge security issue. So I could see where they're coming from, like, then the browser ended up fixing that by just saying, like, you cannot use get computed style in JavaScript to get the color of a link, when it's based on its visited property, or I think I think you can only get the color property, not anything else about it. Yep, that's literally the exact set, same scenario type of thing that they're going for. And so it's amicable, I

101
00:34:46,650 --> 00:36:49,290
Adam Argyle: think, I mean, it's, I think we want that we want privacy on the web. So the interesting thing is not like it's not like chromium has these features, and they're unsecure. I think it's just they want more security. So just kind of enjoy But yeah, so we went through the stages, we went through web platform tests, we went through the kind of ways that you can get to these features, whether they're behind a flag, we talked about intent to prototype, and then we can talk about intent to ship. So you'll see eye to s, there's even like a Twitter account, you can go follow. And that's where they say that's where a browser has to, okay, so, as a implementer, even to do an initial implementation, you have to create this intent to prototype. This is a public facing declaration where you say, here's the spec, here's an explainer of what I'm going to do. And you kind of package up this intent to prototype and then you, you share it to the world. And so this is all the different working groups and the different w three teams can see that you, as a browser are officially prototyping this spec that's in draft mode, or it's in this mode. And then after your draft, after your intent to prototype has gotten really well. And maybe it's in another browser, you can then file for an intent to ship. So this is again, like you filing with the the government that you want to become a bigger, better business or whatever. And you have to show proof. And if that goes well, you're intend to ship as well. And it lands in a major browser. So flex gap had its intent to ship like last month, it's in Chrome stable 85, I think. And it's all done, it's pretty much good to go. So that one had to go through the same thing and tend to prototype prototyped behind a flag, then had an attempt to ship at which point everything stabilized all the web platform tests were passing, this is very sound should sound really similar to like, when you make a PR to a repo, are your unit test passing or your integration test passing? Have you filed the SLA, right? There's like a process and you have to follow it because it is meaningful. And that's where the CSS has like the same thing. So you'll make all these same declarations and things move through. And now I'm just rambling. So,

102
00:36:50,249 --> 00:37:04,590
Scott Tolinski: no, I think that it, no, it's very interesting. Especially because Western I just say, Hey, we want to flex gap, gimme flex gap. And that's pretty much all we do. So yeah, just come on, just just push the button and get get us the the flex gap, please.

103
00:37:05,360 --> 00:37:22,230
Adam Argyle: I'm happy to receive all those requests, who by the way, in anyone, listeners, listeners, follow me if anything, yeah, just holler at me, I'll do the formalizing of the proposal or whatever. And I'll let you know, you know, very nicely whether or not it's going to be something I know. Yeah, I'd love to help you guys out. So ping me.

104
00:37:23,580 --> 00:37:57,210
Wes Bos: Yeah, I think that that's that's what like you're, you're in Developer Relations. Is that right? Yeah. Yeah, that's, that's what a developer is and should should do, right? Like, you should be able to like to talk to somebody who can actually make a difference in this rather than like, I'm, I'm probably not going to go through all of these steps or something like that. But I will voice to people like, hey, would be really cool. If we could style specific rows, or have have the same have flex gap on it or standardized gap, things like that. Did it end up being just the gap property? Or is it flex dash gap?

105
00:37:57,330 --> 00:39:28,830
Adam Argyle: It's just a gap. Yeah. So depending on your display type? Yeah, you may get gap or may not. I want to share to real quickly a success story to sort of encourage folks who think that it sounds long and grueling, because it, it is. So I mean, that's not like it's not the reality, it is a big process. So it is kind of daunting, but there are like superpower moments where things can move through really quick. And so I don't know if you guys follow h. j. Chen on Twitter, just phenomenal individual to follow at CSS. And they went on to the GitHub issues and proposed, hey, you know, there's this data saver mode that I really like to browse the internet with. JavaScript has access to it in the headers, and you know, through client hints and these other things, how come I can't do that. And CSS can CSS has a way to know what my preferences about datas data preferences and maybe load SVG instead of a big, you know, JPEG or maybe a PNG instead of a JPEG, like how many megabytes, I could probably save a lot of megabytes in my CSS. If I had a media query that let me know. And this came way after prefers reduce motion and prefers, you know, color scheme and some of these other like OSL preferences. And so it was almost like everyone went and looked at the proposal, like, oh, duh, why don't why don't we have this, this seems like an easy shoo in. And all of a sudden, this thing went from proposal into a draft into the candidate recommendation. And like this really fast time, so just like joined its friends, and has this really fast path. So it can happen, things get missed, you know, we need your input, it can be really, really valuable.

106
00:39:29,100 --> 00:39:45,030
Scott Tolinski: Yeah. It's amazing to hear it. And it's probably a testament to just how the system how well the system works, if you're able to, you know, sort of rush the system in a way that is not rushed, and it's secure and whatever. That just says that the system itself is working right?

107
00:39:45,650 --> 00:39:50,820
Adam Argyle: I think so. Yep. And that particular one showed up with the rest with the privacy issues on safari, but

108
00:39:51,570 --> 00:39:53,250
Scott Tolinski: yeah. Oh, interesting.

109
00:39:53,690 --> 00:40:02,850
Wes Bos: Is there any example of something that maybe went too fast or didn't get thought over and you saw Oh, that that's a mistake in CSS, and now we have to live with it.

110
00:40:02,850 --> 00:40:04,230
Adam Argyle: Oh, yeah, they

111
00:40:04,230 --> 00:40:06,690
Wes Bos: have a document for that. Really?

112
00:40:06,710 --> 00:40:12,840
Adam Argyle: Let me see if I can find it. Yeah, I tweeted it at one point, because it's really fun to go read every once in a while, but it's like CSS mistakes.

113
00:40:12,900 --> 00:40:13,470
Unknown: Yeah. Yeah. You

114
00:40:13,470 --> 00:40:21,810
Adam Argyle: know how that really sweet JavaScript was the node cat did a video on 10 reasons or 10 things I'd change about node. Have you seen that video?

115
00:40:21,900 --> 00:40:23,690
Wes Bos: Yeah. Ryan Dahl, Ryan DAWs.

116
00:40:23,690 --> 00:40:29,730
Adam Argyle: It's a great video, right. dcss had a blog post just like that before his they did a first CSS to the person. You heard it.

117
00:40:31,410 --> 00:40:31,940
Wes Bos: on there.

118
00:40:32,480 --> 00:41:24,330
Adam Argyle: Yeah. Okay. So it's a wiki dot CSS wg.org slash ideas slash mistakes. I retweet this right now. I'll just shoot that back up to the timeline. And yeah, there's a lot of really good stuff in there. It's very honest, and there's still backtracking some of it. So some of it can't be backtracked. But some of it can like, let's think about color functional notation. Like we have new syntax for HSL and hsla. Like why? Well, it's because we made a lot of mistakes with hsla. There's too many commas. And it's kind of annoying that you can't put percentage in there. You have to use like a decimal value or whatever. There were like these weird edge cases. And they were like, so the CSS Working Group has a couple of wars right now. One of them is a war on commas. And I like wars on things like semicolons, and commas. So yeah, they want to they want to get rid of them. They're like less commas.

119
00:41:24,360 --> 00:41:31,860
Wes Bos: There's I call it that other thing. Box sizing should be border box by default. That's a simple one. Yeah, bang. Important. But

120
00:41:31,860 --> 00:41:37,080
Scott Tolinski: wouldn't that break the entire? Like, wouldn't that break a lot of CSS? Like, yeah,

121
00:41:37,110 --> 00:41:56,070
Wes Bos: yeah, that will never be able to be changed. But other things like current color should be current dash color, because it's, I think that's like the only thing and yeah, mole case. That's funny. Yeah. Important. Should important has a bang in front of it, which to most developers reads as not important. Not important. Yeah.

122
00:41:56,070 --> 00:41:59,280
Adam Argyle: I love It's like a charm to CSS at this point, though, right?

123
00:41:59,850 --> 00:42:00,980
Scott Tolinski: Yeah, right. Yeah.

124
00:42:01,350 --> 00:42:06,210
Wes Bos: Like sometimes pseudo selectors have to cop to colons. They have one yeah,

125
00:42:06,210 --> 00:42:16,350
Adam Argyle: this little sentence between a pseudo class and a pseudo element. It used it kind of got beginning and they backtracked and said that a pseudo class is one and a pseudo element is two I think,

126
00:42:16,350 --> 00:42:18,090
Wes Bos: I don't think I've ever used to

127
00:42:18,440 --> 00:42:25,670
Adam Argyle: so now that that's just visual delineation. I think you can't screwed up. The selectors were always land but yeah,

128
00:42:25,730 --> 00:42:26,340
Wes Bos: okay.

129
00:42:26,690 --> 00:42:38,850
Scott Tolinski: Yeah, it was funny for a while. It was like, Okay, well, the pseudo elements exist, but Oh, yeah, nobody, there's support for them doesn't work on, you know, older versions of IE. So just use the one anyways. And it was almost like a meaningless change.

130
00:42:39,930 --> 00:42:43,290
Adam Argyle: Yeah, I could definitely see that. What are some other good snippets in their West?

131
00:42:43,320 --> 00:42:51,170
Wes Bos: This is cool, man. That there's a whole there's a whole show in here. I think Skyler can do a hasty on little CSS mistakes. These are really interesting.

132
00:42:51,359 --> 00:42:52,350
Adam Argyle: That's a good idea.

133
00:42:52,460 --> 00:42:54,840
Wes Bos: z, z index should be z order.

134
00:42:54,860 --> 00:42:57,780
Adam Argyle: So true. You need your son to do the Add transition.

135
00:42:58,050 --> 00:43:00,210
Scott Tolinski: Yeah, Landon. You wanna say hi. Hello.

136
00:43:00,420 --> 00:43:02,520
You've never been on an episode Say hello.

137
00:43:03,750 --> 00:43:07,380
Adam Argyle: Now, that's what my son does, too. He clams up. He freezes. He's like,

138
00:43:10,320 --> 00:43:15,170
Scott Tolinski: your favorite but? Nothing? No. Okay.

139
00:43:15,960 --> 00:43:17,630
Adam Argyle: Still a good transition? Yeah.

140
00:43:18,420 --> 00:43:21,860
Scott Tolinski: It was a good transition taken in daddy's footsteps here.

141
00:43:22,650 --> 00:43:23,900
Adam Argyle: treating me Oh, no, no.

142
00:43:25,530 --> 00:44:15,420
Wes Bos: Yeah. Freshbooks feel the magic of cloud accounting? Oh, yeah. So fresh books is a cloud accounting for your small business. If you are a freelancer, or you have a couple employees, or you just doing a couple of side jobs, or moonlighting and do I need to keep track of a couple expenses or tons of expenses. freshbooks is what you need. So I use it myself to do all of my invoicing, all of my expenses, all of my tax reports. It's awesome, because I know that it's all in fresh books. And at the end of the year, I can just export all this stuff, it sends up late payment reminders for you. So you don't have to be the big the bad guy sending emails be like, Hey, can I get paid? It's awesome. Check it out. freshbooks.com for slash syntax and use syntax in the How did you hear about a section and that'll get you a 30 day unrestricted free trial. Thanks so much to fresh books for sponsoring sick

143
00:44:16,050 --> 00:44:16,710
Scott Tolinski: sick

144
00:44:19,140 --> 00:44:26,910
Adam Argyle: sick Oh, there's like the only thing we didn't get to is roles. And I'm not talking about the roles the eat talking about the roles you beat.

145
00:44:27,330 --> 00:44:28,080
Scott Tolinski: Oh, yeah.

146
00:44:28,710 --> 00:45:19,590
Adam Argyle: It's so yeah, we have spec author. So these are folks that they're nominated. And they so to become a spec author, you need to be officially labeled as one so the whole working group you know, kind of knights you with a sword and they say yes, you shall edit to spec. So that that was just my dream I had when it happened. That's cool, though. Give me a community member. So in the working group, you can be a specialist or a generalist, which is pretty normal and some of the specialists it's really nice to have them in the group right? They are specializing in print. And they're making sure that the web and everything that we add to it can always be printed onto paper, which I think is a fantastic power of the web. I go. So side note does revisit people and they print out web pages and put them in drawers now. Last time I did that was when I printed MapQuest, Adam.

147
00:45:20,400 --> 00:45:21,930
Scott Tolinski: Yes, yes, MapQuest.

148
00:45:22,860 --> 00:46:31,080
Adam Argyle: decad did you have like community members who specialized in color internationalization, box models, accessibility JavaScript API is like there's people in the CSS Working Group making sure that the things that JavaScript is getting, or the things CSS is getting, have a jsapi. So we can assess it imperatively renderer, specialist layout specialist, and you have implementers. And these are the folks that go write the code in the browser. And that's sort of it. So the spec, author, community member implementers, and those that trifecta, and the way that they work together, happens asynchronously in GitHub, and then works synchronously in the calls until we roll this thing over and over and over until it turns into a pearl. And we get our feature at the end of thing. So I think that recaps everything pretty well, we went through the kind of mock stages. So CSS doesn't have official stages. But you can simulate them, if you think about editors, drafts and working drafts and kind of being in along that same line. And then just like Babel can enable, you know, you to use latest syntax, but output something usable in older browsers, you can do that with post CSS, preset E and V. So I wanted to pitch that really quick as a way to use these features today. And it's really slick. And I love it. And I'm a big fan.

149
00:46:31,440 --> 00:46:46,470
Wes Bos: That's great. I got a question about the implementers. So let's say we want to implement border radius, or a new box shadow or CSS color functions like, like, What language is that written? And that's like, dependent on the browser. Is that right?

150
00:46:46,770 --> 00:47:36,870
Adam Argyle: That's dependent on browser and chromium. It is. I think it's C sharp. Oh, c++. Okay. See, Oh, I should have known that it's not C sharp. I'm not a dotnet. Okay. which honestly, isn't that crazy, kind of fun little side note, I am an implementer. Also, I actually didn't realize it until I was preparing for this episode, that I'm a member and an implementer. And I'm not sure what the rules are around them. And the thing I implemented was I implemented the prefers reduced data and media query, I had help. Obviously, it's not like I'm a chromium engineer. But I got chromium building on my machines. I edited source code, and I made a CL that got merged into chromium. I have coated chromium, and it's behind flag, you can so cool, play around with the prefers reduce data media query. And yeah, I'm kind of hungry for more like what else can I

151
00:47:38,040 --> 00:47:38,610
Unknown: cool?

152
00:47:39,900 --> 00:47:48,480
Wes Bos: Do you ever tell people that are just like your, like regular friends that aren't developers? Like they're like using an app on their phone? But, you know, I wrote part of that app?

153
00:47:50,640 --> 00:47:59,700
Adam Argyle: I do. It's hard to tell them what to do sometimes, right? It's like, Hey, I got code in chromium. And they're like, what's chromium? Like? Oh, man, who cares?

154
00:48:01,110 --> 00:48:14,070
Scott Tolinski: Yeah, I know. It's funny. It's weird, cuz I always say like, I teach web development, like, and they're like, oh, what's web development back? Okay. Well, you know, like, Netflix. It's kind of like Netflix. But computer programming. That's what I do. Okay.

155
00:48:14,400 --> 00:48:18,540
Adam Argyle: Yes. deverill is funny to death row. What is dev REL

156
00:48:18,570 --> 00:48:19,980
Scott Tolinski: dev dev REL? Yeah.

157
00:48:20,070 --> 00:48:23,130
Adam Argyle: I talked to the developers. I'm a people person. Yeah.

158
00:48:24,690 --> 00:48:33,630
Scott Tolinski: I don't know if Wes will get that. That reference. References. Yeah, he doesn't like Ramiz office space. Space. Oh, I've

159
00:48:33,630 --> 00:48:39,240
Wes Bos: seen that. 100 times. So yeah. People.

160
00:48:39,629 --> 00:48:42,060
Adam Argyle: Yeah. What would you say you do here at?

161
00:48:44,100 --> 00:48:57,810
Wes Bos: work with the people? Man, I forgot that. That is great. I also want to ask about Houdini. This is, yeah, I'm taking advantage of you here. What's the status on that? And like, are we gonna get it? Is it thank you?

162
00:48:59,070 --> 00:49:27,810
Adam Argyle: Yes, yes. Yes. And yes. And I had it in here as as like a side note. Because Yeah, it's part of the CSS Working Group, face to face happens all the time about Houdini where they'll be like a little side SWAT team that goes and talks about Houdini. And yeah, just to recap on a previous episode, you said if anyone wanted to really like establish a moment in their career to stab it and grab the reins on something, who DD is still a very good thing to do that so that was a hot tip. That I'm just gonna retweet for on your podcast here. Can you verbally reach out?

163
00:49:27,899 --> 00:49:29,790
Scott Tolinski: Yeah, yeah.

164
00:49:30,030 --> 00:50:59,430
Adam Argyle: So Houdini Okay, so where's Houdini? You can go to the website is Houdini ready yet. And there's some good news is that the paint API, for example, has really great support and new Safari is leaning into Houdini, which means Oh, we are progressing forward. every browser is interested every browser has an implementer things are active. Now chromium has more to play with. We have the animation worklet and the paint worklet can both be played with it. I think the layout worklet can also be played with but it is. Here's the interesting part about the layout worklet. We did two massive refactorings in the chromium code base of about layout, because if you remember, as another history moment, I guess is chromium is a fork of WebKit. So it's almost like Chrome is a child of safaris browser. So that comes with, you know, the apple doesn't fall far from the tree. And so, as we've grown, we have deviated more and more, and parts of that old tree became hard for us to manage. And so we did these big huge refactoring on layout specifically, which is like the touchies code and all the code base. And with that refactor, it was basically with the intent of maximum empowerment of Houdini. And so that layout was not only performance boosting for international languages, it was an enablement for the API. So Houdini needs to give y'all the true power to really grab the reins and make like a masonry layout that's animated off the main thread type of stuff like so. He's still alive, kicking butt.

165
00:50:59,460 --> 00:51:11,220
Scott Tolinski: Well, this Houdini website is really kind of blowing my mind just how many things have already shipped with for you need that I didn't realize any of it has shipped. So this is this is this is very exciting. For me specifically,

166
00:51:11,280 --> 00:51:23,280
Wes Bos: I didn't realize there was so many parts to Houdini, there's the layout API, the pain API, the parser API, the property value API, the animation worklet, the typed om not sure what that dilemmas sick.

167
00:51:23,280 --> 00:53:03,900
Adam Argyle: Let's make sure we cover that before we're done. It's so good. All right, what does it talk to him? Okay, so when you work with CSS and JavaScript, and you're like, Okay, JavaScript, go transform that by 50%. The way that you tell that node to do that, and is with a string, and it is a bummer, you're sort of just like building this string and assigning it as a style. And then if you want to get that style back, it comes back as a string. And this is annoying, because you're exploding and joining arrays over and over again, or, you know, using template literals and trying to get the job done. But ultimately, what's really hard is to get a unitless value off of an element like what is your transform, what is your margin, right? And with the type of M, you can ask for those values, and you get it back in a rich object that's split out for you. It says, here's the unit type, and here's the value. And so it can be this really, really powerful way for you to use JavaScript to interact with elements because you're getting an API that's not string based. It's object based, oh, title. And that's it. That's important. So it's a typed object model, what they're doing is they're typing all the values. So you're not just getting 15 pX as a string, you're getting 15 as a number, and PX is a string. And that type to them comes with the ability to convert it comes with the ability to manipulate values, just like you do in CSS and have it do the conversion, you can calc. So it's a it's a typed interface into the CSS object model. It's really handy. And that unlocks Houdini to be passed a rich object of values so that it can do a calculation and return it. So now Houdini isn't, you know, string defying and unstring and fine. But in its worklet it's doing less work, because you're getting rave reviews. Man

168
00:53:03,900 --> 00:53:14,220
Scott Tolinski: we got to do with you and I both have to sit down and do some serious homework on Houdini and come back and do an all timer explainer episode. Because this stuff is so deep. And I'm so into it.

169
00:53:14,280 --> 00:53:16,230
Wes Bos: So cool. It's cool.

170
00:53:16,230 --> 00:53:34,290
Adam Argyle: So just a couple of warnings is you know, Dev Tools. So you'll animate something with the the animation worklet. And then you go to inspect your animation. And it's visible. And it's because well, how is dev Dev Tools isn't ready to show you the interaction screen. So there are some rough edges, but it's fun to be on the edge. Right. You

171
00:53:34,290 --> 00:53:36,600
Scott Tolinski: get to Yeah, you know, yeah.

172
00:53:36,600 --> 00:53:38,430
Wes Bos: That's where I live my life.

173
00:53:38,520 --> 00:53:45,840
Scott Tolinski: Yeah. That's good. into the edge and back. Kita Yeah, yeah. Oh, man. Well,

174
00:53:45,840 --> 00:53:57,960
Wes Bos: that is there anything else that we didn't cover today? There's like so much information here. It's amazing. There's so much stuff I didn't know. And I thought I had a pretty good grasp on how this stuff happens. But clearly, it didn't.

175
00:53:58,530 --> 00:54:34,020
Adam Argyle: There's definitely shows on Well, honestly, a web platform tests show would be super sick. That is one of the best ways for you to contribute back to the platform. If you love this platform, and you're like, Oh, I wonder how I can contribute or whatever. And I'm sure that's not how you sound. That's just how I make myself sound in my brain. A web platform test is a really good way to do it. And just making one is really valuable. And so I don't know, that could be a cool show. But there's definitely shows on nested moments that happen in the Working Draft here or even just like following a certain spec and seeing where it's at and looking at its history, but I don't know maybe that stuff's not as fun as your other topics, huh?

176
00:54:36,270 --> 00:54:45,600
Wes Bos: Always fun. Always fun. All right. Well, let's Let's end it there. And we'll probably have you back at some point to talk about some more stuff because there's clearly a lot love here.

177
00:54:45,690 --> 00:54:46,710
Scott Tolinski: Yeah, that'd be sick.

178
00:54:46,830 --> 00:54:55,410
Wes Bos: Let's move into some sick pics. Now. I know that you came prepared with the sick pick. This is like the first time we didn't have to spring it on all of our guests. Yeah, normally.

179
00:54:55,470 --> 00:54:58,800
Scott Tolinski: What do you normally we're just like, by the way, you have to come up with something right now.

180
00:55:00,000 --> 00:55:47,100
Adam Argyle: on my desk what's on my desk? Well, I got this cool arty boy here. This is a sick pic. Oh yeah. Oh, boy in the palm of your hand. That was not my sick pic but that would be my friend check back I would take it my sick pic is a walk. And I know that Wes is a barbecue or griller and man my walk I seriously I'll go in the back I got this hot, open flame. I feel like this super rad chef that's in this heat. And in five minutes, I get to sizzle these raw vegetables with a tablespoon of oil and a tablespoon of sauce. And it's the bomb just seriously the most amazing vegetables repeatedly ever. And it just blows me my wife's mind will eat a pile the biggest bowl of vegetables you'll ever see in your life. And it's just because that walk it's magic. So that's my second pick. I'm

181
00:55:47,100 --> 00:55:58,200
Scott Tolinski: into this I we recently retired our walk and then just bought, you know basic, basic, basic walk from Costco, and I need new I need some better walk life. You know,

182
00:55:58,230 --> 00:56:04,770
Adam Argyle: oh man, I seasoned mine. And it is gorgeous. It's this black iron. Oh, it's so cool.

183
00:56:04,830 --> 00:56:20,370
Wes Bos: He has that's like the proper one or you properly season. It's like a cast iron pan where I'm like, Yeah, I've been thinking about getting one because like, I've got the Big Green Egg. Yeah, and that thing gets hot as hell. You can get it up to 800 900 degrees. And I've seen videos of people just

184
00:56:25,110 --> 00:56:27,000
Adam Argyle: stressful, but it's also really fun. Yeah,

185
00:56:27,240 --> 00:56:35,340
Wes Bos: yeah, there's a Tasha for the Big Green Egg that you can put it on. And it just gives you this little ring and then you can kind of go to test. Sick dude. Do it. Yeah,

186
00:56:35,400 --> 00:56:37,590
Scott Tolinski: yeah. Ready to walk out of that? Oh, good.

187
00:56:37,710 --> 00:56:43,500
Adam Argyle: Yeah, the intensity is part of why it's fun. It's like this thrilling. So you know, I don't know. Love it.

188
00:56:43,500 --> 00:56:46,290
Scott Tolinski: So So what is your walk? Well, what is the walk?

189
00:56:46,680 --> 00:56:53,370
Adam Argyle: Oh, right. You guys need a link. I could give you a link to my Amazon while it was like a $35 walk. And it was just all about how I said I think

190
00:56:53,430 --> 00:56:56,100
Scott Tolinski: yeah, that's what I got to get that got to get that

191
00:56:56,130 --> 00:57:25,290
Adam Argyle: and I did I did eventually get the outdoor propane scenario. So like I was cooking inside. So here's my tip is don't season your walk indoors, it stinks. And it's really smoky. And so I bought a propane propane burner for outside. And that way I can really crank the heat up. And that's super nice. So and seasoning it that way to only took like 45 minutes or so or when I season to my first one inside. It took a long time. So yeah, let me get a link to that. Just put in the show notes.

192
00:57:25,800 --> 00:57:35,070
Wes Bos: The propane burners key too, because you can you can do deep frying outside. Sorry about deep frying indoors always scares me. Yeah,

193
00:57:35,250 --> 00:57:39,330
Adam Argyle: we've got the airfryer we've been we've been air frying inside, that was almost my other sick pet.

194
00:57:40,170 --> 00:58:26,970
Wes Bos: Haha, there you let it sneak out. That's great. I'm going to sick pick something that I think all devs that are hackers should have. And that is a set of security bits. So if you like or like me, and you like taking taking stuff apart, there's nothing worse than running into a screw or bolt on something that you can't undo because there's a security bit in it. And I recently just bought 100 piece set of security bits just to have on hand so that when you run into not even just like the the standard torques and Pentalobe that you find on Apple stuff, but there's some really weird ones that that come on. Like there's like torcs bits that have a circle in them. If you want to be able to open that.

195
00:58:26,970 --> 00:58:28,950
Adam Argyle: Oh, yeah, those are annoying. Yeah.

196
00:58:29,370 --> 00:58:48,510
Wes Bos: And it's like, I don't know, 1015 bucks for like 100 set of security bits. Like this is one of those tools that you want to just like buy and have on hand. Because when you're trying to fix something, you don't have the two days to wait for it to come deliver it. So doesn't matter which one you get, but just some sort of nice security bits that I'll link up in the show notes that I got

197
00:58:49,020 --> 00:58:50,700
Scott Tolinski: nice security bits cool.

198
00:58:50,700 --> 00:58:51,870
Wes Bos: What am I use got,

199
00:58:52,320 --> 00:59:42,450
Scott Tolinski: I am going to take pics kind of funny. I do a lot of you know stretching and stuff. I'm big in big stretching person. And I've always like done a lot of like lunge stretches my knees on the ground. And in fact, actually I lower my standing desk down to the point where I can like kneel or do like a lunge while I'm coding as low as it goes. So I can do some stretching while I code and my knees have really taken a beating. So I ordered one of these giant thick foam pads that you see it like the PTS office. It's fantastic. It's this giant, thick piece of foam that will save your knees if you're doing any sort of mobility stretching or anything like that. So it's turtles coming off the board pic but it's something that I am getting a lot of use out of and it's saving my butt so I'm really into this balance in a balance pad. I guess they're calling it even though it's like a foam pad.

200
00:59:42,900 --> 00:59:46,290
Adam Argyle: rad I got bad knees so I'm down with that tip was good.

201
00:59:47,010 --> 00:59:48,030
Scott Tolinski: Yeah, balance pad.

202
00:59:48,030 --> 00:59:56,640
Wes Bos: That's cool. Hey, it totally unrelated but there's a Roque, a guy that works for rogue that listens to the podcast and

203
00:59:56,670 --> 00:59:57,480
Scott Tolinski: no way.

204
00:59:57,630 --> 01:00:14,190
Wes Bos: Yeah, he he DM me on Instagram. He was like during the Coronavirus. He was like just like working in the warehouse because like everybody wanted equipment. So they're like all hands on deck. Working in the warehouse was all Jack's everything I thought that was so cool.

205
01:00:14,219 --> 01:00:32,700
Scott Tolinski: Well shout out shout out to rogue fitness. Unfortunately, I buy a lot of rec fitness things which is like their direct competitor. But they are local, local to Denver and they have a warehouse so I get like super warehouse deals by going to be able to pick it up, you know, drive by and oh, yeah, nothing personal broke. I mean, I'm in I'm into your products.

206
01:00:34,170 --> 01:00:43,890
Wes Bos: Cool. Um, shameless plugs. I'm gonna shamelessly plug all my courses. Wes Bos comm forward slash courses, grab yourself, of course, Use coupon code syntax for 10 bucks off,

207
01:00:43,980 --> 01:01:12,630
Scott Tolinski: hey, I'm gonna shamelessly plug all of my courses. I actually have a course on CSS design systems using CSS variables. That's coming out today, as we're recording now. Yeah, it's really, really super cool. We talk about writing absolutely minimal CSS to create some really amazing full themes with like, just the The goal of the course is to write as little CSS as possible, while having like as full featured of a system as you can. So it's very, very cool. Check it out, level up. tutorials.com.

208
01:01:13,290 --> 01:01:23,340
Adam Argyle: And you were speaking my language there, right as little as possible. That's my whole mantra. I was like, I love code. But I love you so much. I want to not write as much of you I want to write as little as possible. Yeah,

209
01:01:23,400 --> 01:01:46,320
Scott Tolinski: yeah, I know. We, we like rewrote the and like, we had levelup tutorials that's existed for a while right with its current react setup. And we actually just stripped the CSS entirely while keeping all of the JavaScript in layouts and just rewrote the CSS from scratch the last year and it was like the best exercise and like really pruning things up and figuring out what can be systematized and all that stuff.

210
01:01:46,470 --> 01:02:05,790
Adam Argyle: I love refactoring. I'm just gonna say that right now. It's like, sometimes people code with this intent to never refactor. They're like, Nah, I will code once now. And it will live until the end of time. I'm like, that's hard to do. I just assumed my code is gonna break somewhere and someone write as little as possible. That's how I prevent bugs. I try to just not write code.

211
01:02:06,090 --> 01:02:07,560
Scott Tolinski: Yeah, right. Yeah, exactly.

212
01:02:08,910 --> 01:02:39,750
Adam Argyle: Those a great tip. My shameless plug is I have a podcast also with Yuna. Yes. It's called the CSS podcast. And we go over in about 15 minutes or less. Sometimes it goes over pretty intense CSS topics. And we talk about them like they're kind of computer science, because it is computer science. And I would put us into the base CS podcast, but we are about CSS, and it's computer science and abilities, as opposed to JavaScript and crafts and stuff. So check it out the CSS podcasts, do it.

213
01:02:40,170 --> 01:02:53,010
Wes Bos: I like it. Wow. If you Google the CSS podcast, it gives you a list of podcasts that have CSS in them. And then Yours is the first one. So it is that's cool. Um, yeah. Good job.

214
01:02:53,010 --> 01:02:54,000
All right.

215
01:02:54,000 --> 01:02:56,970
I think that's it for today. Thank you so much for coming on. That

216
01:02:56,970 --> 01:03:02,100
Scott Tolinski: was excellent. And also thank you for clearing up that your last name is Argyle, and that article,

217
01:03:02,129 --> 01:03:04,710
Wes Bos: I'm still gonna call you are gonna pronounce things right.

218
01:03:04,730 --> 01:03:09,870
Adam Argyle: Our goal is what it's like, Hey, is Mr. or Mrs. Our goal there? Sorry. There's no one here by that name. I'll see you later. Yep.

219
01:03:11,610 --> 01:03:16,470
Wes Bos: Awesome. Cool. Well, thanks again and we will catch you on Monday. Please.

220
01:03:19,080 --> 01:03:28,860
Scott Tolinski: Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

