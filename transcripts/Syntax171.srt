1
00:00:00,359 --> 00:00:24,480
Announcer: Monday, Monday, Monday, open wide dev fans yet ready to stuff your face with JavaScript CSS node module, BBQ Tip Get workflow breakdancing, soft skill web development hasty, as crazy as tasty as web development treats coming in hot here is Sarah CUDA, Bob, and Scott Tolinksi ski.

2
00:00:25,890 --> 00:01:06,950
Scott Tolinski: Oh, welcome to syntax. In this episode, we're going to be talking about publishing a react library. This is something that I'm currently doing. And I'm getting more and more interested in this. And I've been really impressed with just how easy it can be if you let it. So we're gonna get into all about some of the key things, some of the ways to get off the ground running. We're going to talk a little bit about doc libraries. There's a lot of stuff in there. And just a little bit about the projects and in how you can maintain a project here as a new, somewhat open source developer. So my name is Scott Lynskey. I'm a developer from Denver, Colorado, and with me, as always, is Wes balls. How you doing?

3
00:01:07,170 --> 00:01:20,280
Wes Bos: Hey, everybody, I'm doing great. I'm excited. I've actually never published one of my modules. Like when I'm sorry, one of my react components to NPM. So I'm very curious to see what the process of this is like.

4
00:01:20,400 --> 00:01:38,670
Scott Tolinski: Yeah. And this, by no means is the definitive process. This is the process that I did a little bit of research and found and really was impressed with just how quick and easy it was. So first and foremost, I think we want to talk a little bit about our sponsor this episode, which is going to help you along the way of writing some good code.

5
00:01:39,000 --> 00:02:31,310
Wes Bos: Yes, the sponsor is century@sentry.io. And they're going to do all of your error and exception tracking. Basically, what it is, is something you install to your app front end back end, any end that you have, you're gonna install it. And what it will do is it'll sort of catch any errors that happen and collect a bunch of info as to what happened, where did it go wrong? What made this thing happen, and then you get this amazing dashboard that allows you to filter and look at aggregate details about what happened and basically is just a treasure map to to what the bug is. And with that insight allows you to fix your bugs much faster. So check it out. century.io use the coupon code at tasty treat all one word, that's going to get you two months for free. And that will work for existing users as well. If you haven't used that yet, make sure you pop it in. Thanks so much to Sentry for sponsoring.

6
00:02:31,709 --> 00:04:58,560
Scott Tolinski: Hey, thank you century. So okay, let's get this started with what I found to be the fastest way to get a library going. And that's through a library called create react library. crate react library to me is really super cool. You can just fire it up directly from NPM you know, just NPM crate hyphen react hyphen library. Next thing you know, you have a repo fired up that uses roll up it bundles c j s and s modules, it basically you know sets up Babel for you. It has a create react app built in so that you can fire up a quick little site to do testing and examples. And like I said it uses bat roll up for bundling it uses Babel for transpiling. It has just configured. It supports complicated peer dependencies, CSS modules, optional support for TypeScript source map creation. And there's a lot of people working on it, this thing's pretty, pretty, super cool. I fired this up. And in two seconds, I have actually a YouTube video where I show this thing going. And it's maybe like a five minute process of having a thing growing, and then all sudden you have your component. Now, just like any other create react app or any other thing, you sort of have this going in two ways. It's pretty cool because you have your package, which is one bundler, and then you have the Create react app that's built into it. And they're all linked up. So you can import directly, immediately and start using it. And so the development process goes a little bit like this, you have your app, j s, or whatever it is and your create react app. And you can just throw the component on the page. And then in the other bundler, while you're, you know, writing your component, they'll all auto update. And it's just like working in one site. Now, the cool news is, is that that's pretty much all you need to do to have a package here. And this thing just basically gets everything set up for you except for the NPM stuff, it names it, it sets up your bundler, and it sets up all of the paths and directories, everything to be okay. Now, I did find some pitfalls a little bit with the version of create react app is kind of all balled, and there's some weird dependency stuff. I tried to use hooks and some stuff broke. So I had to update the versions for everything and then react was complaining that I had two copies of react running, which is a really unhelpful error. I'm just gonna say that it says you have two copies of reactive running and then you're like, Okay, thank you for telling me that. But I have no idea where the the copies of react are coming from or how to fix this. So I guess I'm just gonna have to

7
00:04:59,130 --> 00:05:00,570
Wes Bos: capitalization issue.

8
00:05:01,130 --> 00:15:18,180
Scott Tolinski: No, it was an issue where the one bundler, the bundler for the Create react app, and the bundler for the library itself, were both using react. And because of that, I get, so I had to link using NPM link, my react to the package, I'm going to do a video on it. So for anybody who's interested, there'll be a video on my YouTube channel showing the exact process I did, because it was a giant pain in the butt. And there was like a Stack Overflow issue that Dan Abraham himself answered, but like, the answer didn't work for me. So I was just sort of like, oh, okay, great, it didn't work. So I guess I'm not doing this manually. But I figured it out. So that said that, that's pretty much it. And other than that, if you want to get it published on NPM, which is also easy, you just need an account on NPM, I created a organizational account for mine, you may have seen those popping up with the at sign, like it'll be at testing library or something rec testing library, mine is AP level up tuts forward slash the package, which is named fresh is the one that I'm working on. And so you create your your NPM account, you create your login, and then you install mol you already have NPM installed. So you don't need to install NPM. But you basically just sign into NPM using their csli. And then you can publish your repo, and then it's available for anyone in the world to install on their application. So just like that, you could create something that's very simple. And so for me, I just started a little forms library. And it was amazing to me that I could get it up and on NPM and have people using it in about two seconds. So this is the process that I've been taking. And I've been loving this. And then it got me into improving, developing and changing the package. And I ran it ran into a bunch of issues around how to document this thing, right? Because we all know documentation is a big deal. And honestly, I want to turn this into a community project. I want other people to work on it. I want it to be documented well and people to get the idea of what the library is. So I started to dive into documentation libraries of which we could probably do an entire episode on because that is a deep dive. There was a lot of different documentation libraries, from style guides, just react style guide, best story book, you know, there's there's a doc xe docs, and there's there's some others docs, yeah, dogs. Yeah. And let me tell you, none of these really worked super, super well. I know storybook works well started books the exception but it is kind of a bit more of a pain in the butt to set up than some of the other ones. Because you have to do all this storybook specific stuff style guide, just I think just like scans your repo for MDX files, like you don't have to tell it where things are. And then even the doc z one, that configuration is pretty minimal. You have a doc xe folder, and then you have markdown files in your app like anywhere in your app, and it will just find it and use those that said, Every single one of these that I tried has some sort of weird issue going on, like dogs Z's, that, like, man, their team has created something really super cool. And like, let me tell you duck zzz dogs is really cool. I really liked it. But there's a lot of open GitHub issues. And you will run into a lot of those open GitHub issues, even just following their install instructions from their homepage, or from their getting started, like didn't work, just the bundle, there didn't work, I wasn't doing anything interesting, just did flat out didn't work. And then I found a second set of instructions to do the same process. So my guess is that it's just outdated or, or legacy documentation. Because I tried the second process, I just started from scratch, and was slightly different, but it worked. So maybe I should be submitting a pull request. I don't honestly know enough about the repo to assume those kind of things. But there's a lot of open GitHub issues. And I personally have found a lot of them, you'll see me commenting saying I'm also having this issue in there that said, I like this system and dogs these Doc's maybe the most storybook is great, it's a little bit heavier, it's a little bit more intense. And to be honest, I find a lot of storybooks that this is more of like an indictment on the people who write libraries that are like, not health, like they'll show the component in action. They'll show the knobs which have all the props, and but then they don't they like wrote some like obscure code to get it to all just, you know, generate each one because you have to write essentially, like code to use your components for each one. Like I get to that code. And then they wrote, they wrote a bunch of helper code, and it's not actually how you would really use it. So it's like, what's the point of doing this? If you can't actually, you know, I have to like inspect with the React dev tools to see the actual usage. So storybook is great. It's an awesome platform. I just don't know if I'm ready to bring that in just yet. I want something that like sort of does things for me a little bit more. There's also doc Saurus. I think it's called doc you source that a lot of libraries use I believe, just uses it react testing library uses it. If I'm being entirely honest, I don't like the documentation that any of those platforms have been in the source. But that's that's a personal issue on my part, you very well may like it. That's the only reason I didn't pick it, it looks like a really solid platform. Again, this is a thing I could talk a lot about. All of these platforms have a lot of like really good people hard at work on them. And so hopefully nobody takes my comments as being derogatory towards entities because I thought they were all excellent. It's about finding the one that's right, right for you in your library. So right now, I'm just really working with, essentially, my GitHub README. My GitHub README is a nice little props table, nice little basic README. And I think as long as you give people the options of what props are there, what are the components they can use, and maybe some examples of how to use them that that work, then they'll be happy. And you don't need an maybe necessarily huge docks library until this thing gets a little bit bigger or something. So maybe let's get into a little bit of what I'm building, I'm building a forms library. Why? Because there's a billion form library. And I think their API's could be a lot more simple, just like looking at some form libraries. And their basic example of a form is like 15, lines of code long to just get a text input in the form going, it's like, I just write this myself, like, why do I need a library to do this. So my library, the API is really simple. I built it for me. And that's the kind of stuff that you want to do for these things, right? Like not every open source project needs to serve the entire community, or serve all these people or serve a billion people. One of the things I found about this is that I can take this thing, this code that I may have written for level up tutorials, anyways, as a form library, right, I might have wanted to just use this as my own personal form library level up tuts. But by creating it as a react library, and then distributing it, and linking or whatever, it's turning it into something different, something the community can work on, something that I can, you know, grow from, because the code is going to be public, but also something that is going to be useful for other people, you know, it's like, why would I spend all this time creating this thing that is just useful for me, when other people, you know, if it if it fits their fancy, they can use it too. So I think that's a big lesson is that you don't have to create things for everybody. But you also don't have to create things for just yourself. And it's really opened my eyes to maybe some parts of my platform that I've written, that you're really I think people could benefit from, right? Or even just other projects, right? Imagine this, I have all of my react, styled components living in a folder called elements. They're all totally self contained. That's my entire CSS, all of my level up tutorials components. Well, why wouldn't I just turn those into a node library. And then anytime I'm doing a level up tutorials, video series or something, I could just install my own my own elements. And I'm so familiar with those elements. It's like my own personal bootstrap. And it would take two seconds, it would take creating the library, copying and pasting the elements in there, publishing it, and then installing and importing. That's pretty sweet. And so you might be concerned, because you might be thinking, well, well, how do I work on these things, right, like, let's say I'm local, developing level up tutorials, then do I have to update my package, change the version, publish it to NPM, and then install the new update from yarn or node or whatever. In my package. Note, you don't have to do that. If you are developing locally, there's this really amazing thing called link. Now, if you've never used that link via NPM, or yarn, it's super simple. If I'm in my library, let's say my form library, which is called fresh if I'm in the fresh library, from the root of that library, I just do NPM link or yarn link, it's just different. But if you're using yarn on your site, use yarn link. So you do link NPM link, that's it. Then you go to the directory of your project, whether it's level up tutorials, or whatever. And then instead of typing NPM, install, whatever you do NPM link, and then the package name, or yarn link, and then the package name. That part's essential, because what it does is that links the local package build to your site. And this is really super cool, because now you can develop your site. And it's going to be linking the package directly to there, you don't have to worry about NPM, or any of that stuff. So I've been loving this because I've been using this form library already in level up tutorials on some really basic stuff. And it's taken me No time to get this up and running. And it was just really exciting to be able to drop it in there. If you want to see this process. I have a video on YouTube right now that illustrates this process and shows you exactly how easy it is. In fact, we create a library in two seconds, and then I drop it directly in level of tutorials using link. I'll link to this video in the show notes here if you want to check that out. But it's just so easy. All this stuff is is easier than I expected. Because every single time I've looked into this, I've looked into adding it all from scratch, like, Okay, I gotta set up my Webpack config are gonna do this, I got to do that. And like now I have a create react library that I can just click once and get my app going. And then there we go. The things I'm looking forward to in the future with this are more community involvement of which we have done right. Somebody mentioned that it'd be really great to have releases and milestones so that you could see what The plans are where this is going. And then maybe people could work on it that way. So that's something I'm going to be doing, taking advantage of more of these tools that exist that you see in open source libraries. And really just try to cut my teeth learning a lot about this, maybe we'll do a follow up after I've been an open source maintainer for a little bit longer than one week.

9
00:15:20,250 --> 00:15:57,390
Wes Bos: That's great. I love hearing how easy it is to push these things. Sometimes I do make these simple little components, I even have a little react component called dump. Just is is sort of like the the PHP equivalent of like the pre print are, where it just dumps like an object onto the page so you can see it. And when I did that, I didn't publish it to NPM. I just said just just literally just copy paste it into your project, because it's so simple as to what it does. But maybe I should try and go the route of putting dump on on NPM people could just npm install it. Yeah,

10
00:15:57,420 --> 00:16:08,460
Scott Tolinski: yeah, no, it's uh, I don't know it. It was so much easier than I was expecting. You. If you already have the code written for dump. You could get dump on NPM as Wes was

11
00:16:09,750 --> 00:16:12,840
Unknown: at West boss at Wes Bos. Yeah, Wes Bos dump. You

12
00:16:12,840 --> 00:16:18,120
Scott Tolinski: could put an S on there, too. You could just do at Wes Bos dumps? And then that would be that'd be pretty funny.

13
00:16:21,600 --> 00:16:28,020
Wes Bos: Oh, it's funny because I have I have a very popular package called Wait, which has become one of those one line NPM

14
00:16:28,020 --> 00:16:30,300
Scott Tolinski: packages actually used wait before

15
00:16:30,360 --> 00:16:44,400
Wes Bos: Yeah, it's it's it's been installed like a quarter million times or something silly like that. And it's really funny. I should have like at Wes Bos Wait, at Wes Bos dump, just like just all these different verbs of things that can happen in your app. Yeah.

16
00:16:44,640 --> 00:16:46,320
Unknown: Yeah. That's funny.

17
00:16:46,650 --> 00:16:54,120
Wes Bos: Beautiful. Well, that is such a helpful little primer. I'm gonna try it myself. Do you have anything else to add? Or should we wrap this up?

18
00:16:54,210 --> 00:16:55,140
Unknown: Let's wrap it.

19
00:16:55,320 --> 00:17:22,530
Scott Tolinski: Let's wrap it and nothing else. I'm interested in anyone's tips or tricks for hosting or maintaining any open source projects. As somebody who's really getting really feel on the flow for this. I'm liking it. I'm interested to hear what people who have already gone through some of these processes have learned. We can share those pre decided syntax on syntax FM on the Twitter and I will give you a retweet and wellness journal, all that good stuff. So yeah, that's all I got

20
00:17:22,770 --> 00:17:23,330
Unknown: peace.

21
00:17:26,219 --> 00:17:36,000
Scott Tolinski: Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

