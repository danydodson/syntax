1
00:00:00,359 --> 00:00:24,000
Announcer: Monday, Monday, Monday, open wide dev fans yet ready to stuff your face with JavaScript CSS node module BBQ Tip Get workflow breakdancing, soft skill web development hasty as crazy as tasty as web development treats coming in hot here is Sarah CUDA boss and Scott Taylor. Totally.

2
00:00:25,920 --> 00:00:52,620
Scott Tolinski: Welcome to syntax in this Monday hasty treat, we're going to be talking all about CSS frameworks. And this is going to be sort of the CSS style based version of the same podcast we did about JavaScript frameworks. So when and why you might want to use them and what the heck they even are, how they can help and how they can hurt your application. My name is Scott Lenski, I'm a full stack developer from Denver, Colorado with me, as always, is Wes Bos. Sup Sup? How you doing?

3
00:00:52,799 --> 00:00:54,450
Wes Bos: Doing fantastic. How you doing?

4
00:00:54,650 --> 00:03:13,770
Scott Tolinski: I'm doing good. This episode is sponsored by Stackbit, which is a fairly new sponsor to syntax. And let me tell you, this is one of those ones that you need to head out to their website. Not only is their website gorgeous, but the service they offer is going to be right up the alley for those of you who are big fans of the jam stack, because what this allows you to do is quickly use any theme in any site generator, without any sort of complicated integrations. Basically, you need a theme for your site Stackbit has you covered if you're working in the jam stack. After the first time that Stackbit sponsored an episode of syntax, we actually got a tweet back from us. And that was a really hilarious that says, Thank you syntax FM for the Stackbit beta offer. I hooked up a theme with Gatsby Netlify CMS and Netlify hosting faster than my Keurig makes a cup of coffee. So if that's not a ringing endorsement, I don't know what it is because we talked about how awesome Netlify is to get you up and running. And Stackbit is just right up there with their with one of these cool service that allows you to throw on a theme to your Gatsby Hugo Jekyll, whatever you're working with and connect it to any sort of headless CMS and get going just effortlessly. And you're going to want to check this thing out@stackbit.com. And if you head to stackbit.com, forward slash syntax FM, the link will be in the description of this video, you're going to get to have access to the beta of Stackbit. And you're going to get to try out these themes for your static jam stack site. It's well worth your time to check this out, head to the website. I'll go at their beautiful design here and get this thing going in your project. This actually is fitting so well with this episode too, because we're going to be talking a lot about these CSS framework type things that make your life easier. If you want the easiest possible way to get set up something like Stackbit is going to be even the next step further than a CSS framework. So check it out@stackbit.com forward slash syntax FM. So CSS frameworks, let's get into it. What the heck is a CSS framework? And where the heck did they come from? When was your first experience with a CSS framework? Because I think most people's was bootstrap? Yeah, the very first initial version of Twitter Bootstrap. I remember when Twitter Bootstrap came out, everyone sort of perked up and said, Hmm, this is actually really super cool.

5
00:03:13,980 --> 00:04:03,090
Wes Bos: Yeah, I had my own like, little like basis, CSS that I had all my utility classes in and things like that. But when Twitter Bootstrap came out, everyone goes, whoa, like, first of all, at the time, that design was absolutely beautiful. The way that it worked, maybe we should describe for people that haven't used it before is it's just a whole bunch of CSS. And it also came with a bunch of JavaScript plugins as well. And you take these classes, and you would apply them to different parts of your website. So you had alerts and errors, and sliders and headings, and navigations and drop downs and buttons. And it just had like, everything pre built for a website, you could just slap it in your your website, and you'd be up and running with a pretty good looking website. So yeah, bootstrap was my big one. I did mostly foundation after that. What about you?

6
00:04:03,209 --> 00:05:21,830
Scott Tolinski: Yeah, I, I never got too heavy into these. I used bootstrap on the initial version of people tools. I have used foundation on some little projects here and there. But for a little while foundation and bootstrap were the two big ones there. They the two big CSS frameworks. They were sort of the pioneers, as you might say, the the framework sort of game. But what it really did, in my opinion, is that allowed developers who aren't good at designing to put out things that don't look like pure garbage with absolutely no effort, because for a long time, and those of you who are newer might not remember this time, it was really easy to just throw up a website and so many developers websites just look like trash, because you don't have those design skills. And you know, it's it's not a problem because, you know, you're not expected to learn everything. But it's really hard for a really skilled developer who may not have the CSS chops to have their thing look nice. Because what are they going to do, they're going to pay somebody else to do it, or they're going to struggle through it themselves have some crappy design. So these things allowed people to get a blog, get up, whatever, get up some code samples, get up a little project going. And they allowed them to do it effortlessly, just by using the built in classes using the system, you don't have to think about margins, you don't think the only thing you're overriding is maybe fonts and colors or whatever.

7
00:05:22,070 --> 00:06:11,640
Wes Bos: Yeah, the idea behind like, specifically bootstrap and foundation were that you'd get like a variables file. And then you'd go into the variables file and set all of your own variables. So fonts and colors and spacing, and you change all the blues to your own blues and all the reds, serum reds, and, and then the idea is that it will just spit out your own unique website, but very few people actually took it that far to do that. Or maybe it is that when you go to websites, and it's not looking like default bootstrap, then it actually does look like a custom basing, it was sort of a nice, I think, what people liked it because it was an opinionated way to approach your CSS and it gave you some really nice defaults, you sort of just got to go in paint the paint the roof or not paint the roof. That's a dumb thing to say. You paint the walls, choose your fonts, and you're up and running with it.

8
00:06:11,850 --> 00:07:36,690
Scott Tolinski: Yeah, I don't know, if you, you probably do remember this. But there's a time when like, every startup that came out was like using bootstrap. I remember going to us that you'd go to a startup site, it was just almost automatic. They have the hero billboard up there, they'd have the buttons. And it would be like, Oh, yeah, this is clearly bootstrap. So there's actually the CSS sort of framework game has evolved significantly since then. And there's now basically CSS frameworks of a whole bunch of different shapes and sizes. So we have that full on all encompassing, just add this CSS file to your site. And all of a sudden, you have all these classes, you still have that kind of framework, but you have different kinds of frameworks as well. There's also things that in my is kind of a dumb name, a functional CSS, I think that's kind of dumb, or utility, first, CSS, which is the less dumb name, where you have like a ton of little micro classes that say, Alright, dot Sarah is now going to be all your Sarah fonts. And then you also have the sort of frameworks that are based on CSS free or a CSS preprocessors, where the framework sort of is built out of the code, aka the stuff that you're using in the preprocessor. You set some variables, variables, whatever, and it spits out some some code. So you don't have to have a bunch of extraneous CSS in your code. And there's also things that are based in jSs, j, s, CSS, and j. s, like styled components based systems. So do you have any experience with some of these functional or utility frameworks?

9
00:07:36,720 --> 00:09:11,820
Wes Bos: Yeah, there's all kinds of them out there. And with most things, functional CSS, the way that it looks is if you just look at your, your HTML, there's these classes, and you just see classes like background, white, font, size, 20, border bottom, red, and there's just like millions of classes, and you can just add classes to all of your HTML and sort of just click together what your website looks like. And what happens is that almost immediately, everyone goes, Ooh, that's not supposed how it's how, and I did it myself. And I listened to Adam Watson's podcast, and he is he has a one of these frameworks called tail winds, and it ends up like, like, he's like, sort of challenging the norms of like, you're supposed to have beautiful HTML. And like, who says, right? Like, who says, we need to have beautiful HTML? Why can't you just add a million classes to it and click it together. And he's obviously a really smart guy. He knows what he's doing. He's amazing PHP developer, and he sort of looked over at CSS and goes like, Hi. Like, I think I can figure out something that works really well. For me, I personally don't like it myself, just because I'm really happy with the way that I'm at it. But I definitely have had my eyes open as to why people use this utility thing. Because I think you can probably get about 90% of your website done by just generating this tailwinds library based on your own colors and fonts and stuff like that. And then writing a little bit of CSS to do things like media queries, and animations and stuff that you just can't do by adding classes to elements. Yeah, I'm

10
00:09:11,820 --> 00:10:38,190
Scott Tolinski: gonna go and say I don't I don't like it either. Yeah, and I'm, it's not that I'm not inclined to, I'm not inclined to try it, I will try it, I will be happily trying it. But it's one of those things that I understand the benefits. And I understand that it's challenging all this stuff, and I understand how it works and why it works that way. But at the end of the day, it just doesn't feel right. To me, I don't like having a bunch of classes. I like having my code a little bit cleaner than that. And to be honest, you know, it's just not for me, I like it, in the sense that it exists, and other people seem to be very productive with it. I could see how fast it would make things, but I just don't, I just don't like it. So I'm not inclined to use it. But there's other systems for those of you who will, I mean, if you're interested in that, there's certainly a lot of systems that utilize that. But there's certainly other systems too. We have something that's like pre processor based bootstrap really moved, I think it was like version four of bootstrap. I'm not positive. Don't quote me on that. When bootstrap moved to preprocessor based, aka you're setting everything in sass. That was a big change for bootstrap is when it moved to sass. It was sort of the point when everybody realized that sass wasn't just a fad, and it was going to be sticking around and it was going to be some serious business. So when bootstrap moved over to SAS, I think it was a big deal. I think zurb actually has the crown for moving to SAS first, but I think these kind of things are really cool. I haven't been using SAS lately myself just because of style components. So I have not had any experience with these recently. But it seems like they're still continuing to grow and evolve.

11
00:10:38,460 --> 00:11:30,900
Wes Bos: Yeah, I worked on a project once where we would use like all of the SAS base extends. So we would take, oh, yeah, something that's built at a foundation and then create our own class, and then extend it based on that. And we thought it was a great idea at the time, but it just turned out to be a nightmare for maintainability. And trying to figure out like, oh, an immediate query, like this thing was not being overwritten, I had a smaller break point. And it was just much more complicated than it actually needed to be. And I think that I was trying to use all of the different tools and whatnot. And then after a couple of years, it ended up being a little bit hard to maintain the thing. So I probably I don't even reach for all of the different extensions, and even installed components, there's a lot of advanced features that I just never touched, because I'd like to keep it as simple as possible. And it's much more maintainable for me at least that way.

12
00:11:31,170 --> 00:12:42,450
Scott Tolinski: Yeah. And next, I want to talk a little bit about styled components based ones I know, not everybody's using styled components. But this is this is an interesting space, because you can provide these full on utility, or these these libraries full of elements. So no longer are you using classes to do your thing, you're importing a box, a card, a button, rebase j s, every base js.org is definitely probably the biggest one that I think exists, there's probably a ton more of these, we're probably leaving a lot out. So rebase is really interesting. They call it as a primitive UI components built without system, somebody describes this the bootstrap of react. So it's, it's very primitive, it's a lot less full on design for you, and a lot more of like, here's some components that have some basic functionality or some basic look to them. And on top of that, it's built with this styled system, which is by the same team that did rebase know style system is an interesting thing. Stealth system, in my opinion, is kind of ugly. I don't I don't want to, I don't want to be mean here, because stealth system looks like super good. And a ton of people seem to really like it. I just again, just like some of this utility based CSS, I don't know if I can get behind it

13
00:12:43,350 --> 00:12:47,370
Wes Bos: lays out the actual CSS that outputs are like the the code itself,

14
00:12:47,400 --> 00:13:55,800
Scott Tolinski: the code is of it. It's not that it's ugly, I guess ugly is the wrong word for it. Because I mean, many people would look at it and say that's not ugly. That's, that's really clean. It's just weird. It's weird to me. And maybe it's just that I haven't tried it, because I've heard that this is the best way to develop a design system in react. But then again, I haven't tried it. And it sort of scares me, which is maybe a good thing, I guess I don't know, a lot of things that scared me in the past ended up being really good. So I can be convinced on this either way, if you are like a diehard styled system person already, and you think this is like the future, let me know, because I'm interested in diving more into this thing. But to get into it, you do a lot of configuration with it. And then when you use things, when you do your style components, instead of writing out CSS, you just bring in the properties. So you're importing, let's say width from your styled system, and then you just have the dollar sign bracket with string interpolation inside of your component. Oh, yeah, I want to take over everything. And to me, that's a little iffy, because it wants to take over so much. I feel like you'd have a hard time moving off of it. But that's maybe a bad concern. I don't really know I'm really interested. This thing kind of scares me. And I kind of like it. So let me know what you think about style system.

15
00:13:56,460 --> 00:14:26,730
Wes Bos: Yeah, it's interesting. You could so you, you have like a wrapper that you pass it your breakpoints in an array, and then and then you can pass. If you have margin or padding or font size, you can pass that in an array of the same size, and it will automatically create the media queries based on those inputs seems kind of interesting. So it says it works with does components or emotion I'm going to talk about this is sort of related in a tangential way. But there is a library for emotion called face paint. And it does media queries, just like that.

16
00:14:26,730 --> 00:15:05,790
Scott Tolinski: I've been looking really hard at face paint because it's really super cool. You pass in essentially an array of breakpoints, and then instead of having to do you know, dot above breakpoints out above or whatever like you are doing in styled components, you say the color property has a value and that value is an array of things and that array matches up again just like in we just talked about installed system. And it looks like it's really slick. I could see myself loving this essentially like you you're passing it in all of the values that different break points and it just sort of takes care of it. This is not a framework or anything, but it seems like a nice little utility library for building design systems that way. Hmm,

17
00:15:05,820 --> 00:15:49,770
Wes Bos: yeah, I'm just looking at this styled system a little bit more, it seems cool. Like I, I don't think that I, I want this, I just like writing CSS as CSS. And that's why I like style components, or just writing their regular SAS file or something like that. I'm afraid to write something like this off, because I've definitely been wrong in the past. But this is just definitely one of those things where I'm just kind of wait and see. Because there's a lot of things that you may adopt. And then a year later, people are a year into a project and go, Ah, you know what, this is causing a lot of growing pains. So I would say if you are thinking about whether to adopt something like that, maybe just sit on your hands for a little bit until we figure out a little bit more about this.

18
00:15:49,800 --> 00:16:39,930
Scott Tolinski: Cool. So let's get into why you might want to use a CSS framework now that you have all of this, this knowledge about what the heck they are, what they are, who the players are here. Again, if we left off your favorite framework, let us know, the one thing that CSS frameworks do better than anything is it makes building something that looks nice, super fast. And we touched on this, it makes people who aren't good at designing things. Or maybe you just don't even have the time, you can throw something together, throw a couple of classes, bring in some components or whatever. And all of a sudden, you have something that looks nice with no effort. So it's really super good there. It also can make some hard things easy, right? Let's say you have a responsive grid, and you don't want to have to deal with CSS Grid or learning any of that stuff, you could throw in some grid classes of different sizes, and it just pops it in. And again, it takes out all of the guesswork all of the design system stuff. And it just makes it super duper easy.

19
00:16:40,050 --> 00:17:15,510
Wes Bos: Another benefit is that often these things will have themes. So if you're building a specifically like for back end, if you're building like a back end, where you need lots of stats in a big dashboard, it's really easy just to go grab a theme and slap it in your back end. And things look good. And a lot of people don't have time or resources to actually design some sort of back end. So it's great if you can just slap in a thing. I think that if it's just a utility, and it needs to look good, I think it's a really good use case for something like this, versus something where it's like, it's a marketing website, it's your actual application, you probably want to put some time into figuring out how your users actually work on this thing themselves.

20
00:17:15,660 --> 00:17:45,750
Scott Tolinski: Yeah, slap it in your back end definitely keeps your own CSS minimal and organized is that one of the key things because it has a system for you, these are the things that like it does for you. So you don't even have to worry about building a system, you can have a framework tell you how to do it stout system fills right along with this, because it's like, you just have to follow along with what they're doing or rebase, or any of these really, it's it's sort of follow along with how somebody else has already determined how it should be. And you don't have to invent all that stuff yourself if you're not into it.

21
00:17:45,900 --> 00:19:09,830
Wes Bos: last little point we have here is that lots of people are using the same CSS. So just like NPM, installing a JavaScript module, it's sort of battle tested in that there's a lot of people have used it, it's fairly refined, you've probably found all the weird edge cases in IE six, or whatever browsers are being supported. There's definite benefit to having power numbers behind something versus some CSS that just you wrote in. Because at the end of the day, there's something to say be like, we're all just doing the same stuff. We're all building the same navigations. We're all building the same three column layout. So if you find yourself using it, I myself haven't, I'd be curious to see what you I haven't reached for a CSS framework myself in quite a while. And I think that was because what most people use the frameworks for was their grid layout where they had columns, and you'd say call seven, yes, span four and push eighth. And as we got CSS Grid and Flexbox, there was a huge push for like Flexbox based frameworks and grid based frameworks. But you don't need a grid framework. When you're using grid, you just use grid. And my opinion at least I know that there's other people out there that think otherwise. But I don't think that you need that. And as I dropped that, I also just dropped the, the need for any of this other stuff, because I just made my own button component. And I made my own navigation component. And I just feel a little bit better. Having made it myself. What about you? Yeah,

22
00:19:09,900 --> 00:19:57,590
Scott Tolinski: I've read along with you, I don't end up reaching for them that often. The times that I did were like typically side projects and things like that, if I'm building something from scratch or building my own thing, you know, I typically don't one of the things that you can get into like some of the reasons why you might not want to get into these is that you can get in and we've heard of callback, hell, maybe class hell, because you have just like 10,000 classes. This is font sizes small this is red. This is their This is like all these different fonts. And next thing you know, you have like HTML that spans 120 characters for one div or something like that. So you can definitely end up writing a ton of CSS classes with these, especially some of these utility based to CSS libraries. Again, some people might not see that as a con. I don't like it. Just me. You can like it if you want. It's up to you.

23
00:19:57,990 --> 00:21:10,710
Wes Bos: I don't think another big thing is that stops from learning how CSS actually works under the hood, we see this as well with any type of framework is that people will start asking questions as house a lot in, in the bootcamp, we specifically didn't allow bootstrap, because people will come in like, Can I just use bootstrap, like I like it better. And then we're like, Fine, go ahead and use bootstrap on your project if you really want to, and then the questions would start rolling in. Why is bootstrap doing this? And you're like, Well, do you know how floats work? And no, I just applied a class to like, do you know how, like padding and line spacing and all of these things that work? And the answer a lot of time was no, I just, I just use bootstrap. And I think that's a bit of a crutch for a lot of people, which stops you from actually digging deep into actually how CSS works. And I definitely see the benefits. But if it is stopping you from learning how the underlying language works in the browser, you're going to have a bit of a hard time when you run into actual issues when the issue is not how bootstrap works is the issue is the browser's interpreting the CSS that you wrote, and something is conflicting, and being able to figure out what's conflicting, you need to know how it works.

24
00:21:11,090 --> 00:22:05,730
Scott Tolinski: Yeah, definitely. And I think this, this next one is a little bit, it's been mitigated quite a bit as these things have grown, when they first came out the size, the sheer size of some of these trademarks was monstrous, you'd throw in all of the CSS and all of the J s. And then you'd have this huge download that you have to have this entirety of bootstrap CSS, even though you just using the buttons in the headings or something. And they since made this way easier through the use of pre processors or just like bundling them, there are different ways, you could say, hey, just give me this or give me that. So this isn't always going to be a problem. But it's definitely something you need to think about when you're evaluating whether or not to use a CSS framework, or maybe picking one is just how much additional size, how many cavies, you're adding in there to your site, it gives a getting into MBs. I hope it's not getting B's. But yeah, so you wanna, you want to make sure that you're not just throwing a ton of stuff right into your site. And that's, that's a good argument for writing it all yourself, because you know how much you're putting in there.

25
00:22:05,760 --> 00:23:39,420
Wes Bos: Yeah, you can use though there's, there's libraries out there, purify CSS is the big one, you can run your website and your CSS through that. And then it will, it will detect the class names in your PHP react, whatever it is that you're using, and then it will filter out the CSS that's not needed. So that's good, because if something like these functional libraries, like tailwinds, they're like 300 320. k, and you probably shouldn't ship all of that to the browser, because it's got a selector for margin, bottom one, margin, bottom two, margin, bottom three, right, there's a selector for absolutely every single thing you could possibly want to do in CSS. So you obviously have to filter those out. So that's not really a big issue. And then there's also you need to understand that a lot of these functional ones are, are duplicate content. So like, if you write the word background, 7000 times in your CSS, it's not actually going to deliver the word background 7000 times over the wire, it's going to compress it into the word background once and then it's going to put a pointer to that word every single time. And the the big one is G zip. Also, there's a new one called broke broseley. Broadly, from Google, interesting, this comes for free, if you have CloudFlare turned on, or you can go into your CloudFlare and turn that on yourself, I think, and that will compress it as much. So I don't think that's a really good argument anymore. Because there obviously is good solutions to fixing that big CSS bundle issue. Yeah. And

26
00:23:39,420 --> 00:23:49,140
Scott Tolinski: it's it's something you have to be cognizant of. Yeah, more or less, right, that you are potentially adding this sort of thing? Not necessarily like you're sunk because of it.

27
00:23:49,260 --> 00:23:54,870
Wes Bos: Yeah. Because if you don't know, then you just might accidentally ship a seven Meg website and not know it. Right.

28
00:23:54,900 --> 00:23:57,870
Scott Tolinski: Yeah. messed around and shipped a triple double. You might be.

29
00:24:00,240 --> 00:24:00,870
Wes Bos: That's good.

30
00:24:00,900 --> 00:25:50,760
Scott Tolinski: That's a good one. Yeah. And another one is you might be overriding a ton of this stuff. Like, you have all this CSS, you're bringing in a bunch of CSS, and then you're having to override a whole bunch of stuff, which just adds two more to the bundle, right? Yes, adding more, not only that, but it's such a pain in the butt. You know, it's like overriding the the button, the button like the in browser button. CSS is like one of my least favorite things in the entire world. I don't know why but having to do background appearance, none. I'm just like, why are you here? background appearing? Yeah, I don't want you to be here. If you get away, nobody likes you. But you know, it's, it's one of those things that again, you just want to be you want to be aware of that you might have to be overriding a ton. And if your design is so much different from bootstrap, then maybe you don't want to be using bootstrap at all, because you're just going to be overriding it funny. One of the one of the ones we didn't mention that you probably wouldn't override a ton would be material UI. I know a lot of people use material UI because it just follows Google's material design guidelines. And then chances are you're not going to be overriding a ton or just changing some colors here or there. But that wouldn't be a good one to check out to have you on like a clean stuff. I've actually used that before myself. But the last one you have here is you like writing only the code and nothing else that you don't need, right? Again, some of these tools that you mentioned the brotli, purify CSS, they're going to remove the unused CSS stuff for you or make you aware of it. But again, why even have it in the first place? Maybe you're taking this minimal approach of like, I only want the stuff that I'm going to use and nothing else in my codebase. And I don't want to think about anything else. So you know, I don't know, final thoughts on this was, I think my final thoughts are, you know, I'm not going to judge you either way. If you're using a framework or not using a framework, you do you, whatever works for you. If you can work fast, with CSS using a framework, go right ahead and do it. However, you do want to be aware of some of the potential pitfalls. I don't use them myself. But you know, I don't I'm not a hater, not hating on them.

31
00:25:50,880 --> 00:26:38,670
Wes Bos: Totally. I'm the same way as well, um, I see why people would want one. I personally don't think that the benefits of using one outweighs just writing it yourself. Right. And I say that as someone who I think I'm pretty good at CSS, so. And I know that a lot of people who do use these things are maybe beginner at CSS, or they just have totally different thoughts and approaches as to how to approach CSS. So there's many different ways. I think one funny thing about the whole CSS community, or maybe just JavaScript developers who talk about the CSS community is that they feel like there's one good way to do it. And there's not there's so many you might write you might write sass, you might write regular CSS, you might write CSS and j. s, you might have some sort of functional approach many ways to approach this thing. And I think they all work fairly well. Yeah,

32
00:26:38,760 --> 00:27:01,560
Scott Tolinski: yep. Cool. I'm right there with you. I don't have anything else. So I think that wraps up today's hasee treat that bundles it up. We can store it in the fridge for leftovers tomorrow. If you want. Lots of good stuff here. Send us your favorite CSS frameworks. I want to see some of the ones we didn't mention. I know we didn't mention a ton. So if there's a bunch of CSS frameworks that you're wishing that we mentioned, go ahead and share those to us and we will retweet you with those. That's all I got. Sounds

33
00:27:01,560 --> 00:27:04,410
Wes Bos: good. All right. Thanks for tuning in. We'll see on Wednesday.

34
00:27:07,020 --> 00:27:16,830
Scott Tolinski: Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

