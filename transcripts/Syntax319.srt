1
00:00:00,359 --> 00:00:01,350
Unknown: Monday, Monday,

2
00:00:01,350 --> 00:00:03,060
Monday Open wide.

3
00:00:03,989 --> 00:00:06,990
Get ready to stuff your face with JavaScript CSS

4
00:00:06,990 --> 00:00:07,620
loadmodule

5
00:00:07,620 --> 00:00:09,060
BBQ Tip Get

6
00:00:09,060 --> 00:00:09,839
workflows right

7
00:00:09,839 --> 00:00:10,440
dancing,

8
00:00:10,559 --> 00:00:16,710
soft skill web development hasty as crazy as tasty as web development treats coming

9
00:00:16,710 --> 00:00:21,660
in hot here is when Sarah Khuda boss and Scott L.

10
00:00:23,610 --> 00:00:24,480
Totally ski.

11
00:00:25,920 --> 00:00:55,680
Wes Bos: Oh, welcome to syntax. And this Monday hasty treat, we're gonna be talking about CSS typography and systems, how you can quickly get up and running with a system of typography that will take all of the guesswork out of your CSS sing around typography, which we all know is not a ton of fun if it's not your specialty. My name is Scott Tolinksi. I'm a full stack developer from Denver, Colorado, and with me, as always, is the Fantastic Mr. Boss.

12
00:00:55,710 --> 00:01:07,080
Unknown: Hey, yeah, happy new year. We're back at it. This is the first one we're recording in 2021. So feeling somewhat refreshed. I'm excited to be back to work. After a couple weeks off. Yeah,

13
00:01:07,080 --> 00:05:37,170
Wes Bos: I spent the entire break rewriting my platform. So I wish I could say necessarily the same thing. It's in a healthy thing. But at the end of the day, I didn't have a whole lot of time to do, you know, just like nothing for some reason. I don't know, we had like 800 projects going around at the house. So it was like, Oh, we got to do projects. We got to do this. We got to do that. And then it was like almost like coding in the evenings. For me like was like, almost like relaxing. For some reason. It was like a chill thing. So our sponsors today for this episode are Sanity and Sentry those who of you who have been listening to syntax for a long time have known that we love both Sanity and Sentry. So with a little bit about Sanity is Wes Yes, Sanity is the structure content, CMS, they've been coming out swinging with all kinds of features. So if you got 2021, and you're working on a project, you got your next project, you need a headless CMS, for your project, check out Sanity, it's awesome as well, the way that it works is that you, you set it up and you create a project. So all of Sanity is done in the code. So you define all your schemas, you define all the inputs that you have, you define how they relate to each other. And then when you run this thing, you can also get this additional thing called Sanity Studio, which is the actual CMS and Sanity Studio man, they have spent a lot of time working on this as a CMS, it's pretty slick, because so Sanity is both an API a graph qL API, they also have this thing called grok, which will it's another language or syntax for querying the data out of Sanity. And then you get Sanity Studio, which is a react JS based CMS that you can use to edit and manage all your data and that CMS is really slick because your your clients, your users, whoever is actually managing the data at the end of the day, they will use that you can put your own custom React.js components in it. So I am challenging you in 2021. I want you to pick up whether it's a client project or a side project or whatever, and try Sanity out in one of your projects, go to sanity.io forward slash syntax that's gonna get you double the free usage tier. Thanks so much to Sanity for sponsoring. Cool and this episode is also sponsored by Sentry. Now Sentry is the error handling and exception service that Wes and I both use. In fact, I use Sentry every single day. It's so funny with Sentry and Sanity, I'm trying really hard not to say the word Sanity here, everything. So I really love Sentry. I really love this product. One of the cool new things that they've added recently is this performance tracking. And one of the cool things about the performance tracking is it really gives you good insight, along with graphs and tables into just how fast every route that your site has. A I don't know if people in the past have gone through Google Analytics to look for this type of thing. But for me, I think this is a much more helpful view, it fits a little bit more into the site of monitoring of your website rather than analytics or something to me, this feels really nice and even gives you a really cool user misery score, which lets you know which of your routes are the most problematic. It's very, very cool, it breaks it up. And it gives you all have the kind of metrics that you'd like to expect from something like this. So you can see quickly at a glance, the time to first content, full paint, the largest content full paint, the first input delay, the cumulative layout shift, which Who the heck likes layout shift? I don't think anybody does. So you're gonna want to head on over to sentry@sentry.io use the coupon code at tasty treat all lowercase all one word, get two months for free and start monitoring not only your performance, but your errors and exceptions and more with Sentry. Okay, so welcome back West is feeling like I need to start doing some like warm up stretches here to get going. And also with just our luck notion happens to be down so we're gonna get through this with we're gonna get through this first. So the big question, I Want to answer in this episode is how do you define type in your projects? How do you define type in your projects, font sizes, font families, those types of things? How do you define them in your actual projects? But also, how do you come up with the systems? And how do you create these things in a way that they end up being essentially helpful to the lifecycle of the project without becoming bloated? It's a common trait of CSS to Okay, do a little patch here, then a little patch here, the next thing, you know, 10 years from now, your entire CSS system is not a system, but just a randomly assorted, just lots

14
00:05:37,170 --> 00:08:00,900
of times. Yes. This looks pretty good. And I think for some people are still styling text in that sort of way, where they're saying, Oh, yeah, this looks good. Let me just set it to this random value, or whatever it seems about right. And in my experience, designing on a type system, and a system that can be created for you, especially when you're new to this kind of thing, is one of those things that will set your designs apart from feeling amateurish, because part of the things that really can make a design feel amateurish is bad use of spacing, and typography. And unfortunately, typography is a difficult topic. So you can't necessarily expect everyone to become a typographic master from the very get go. So I think we would want to start this off with like, how do you set up your types personally, and maybe answer some questions as we go? Like, how many font sizes? Do you define where and how do you define them? What units do you use? And how does this fit into the overall picture of media queries for your particular application or your sites. So for me, I usually create a typography dot CSS file in my project, whether I'm using scoped CSS style components, or whatever, I'll always have like a one file and that file will do both all of my global styling as well as export any custom typography values that are used throughout the site from there. And I really like doing that, because, like you said, it can get out of control, I find that putting it all into one file, or even one folder, lets me know that okay, if I'm fussing with the font size on this thing, I should try my darndest to go back to those base things that I've created, and adjust them in there. But so what I'll usually do is I'll set up my HTML tag, and I usually set the base font size on my HTML tag to be 10 pX, you'll also see people do that as 62.5%. And we've talked about this in the past. And the reason behind that is because the the default font size in, in the browser is 16 pixels. And it's really easy to set that to, like as a Canadian, I'm used to saying measurement systems and doing things based on 16th. doesn't make any sense to me doing things Yes. 10 threads What is going on? Oh,

15
00:08:00,900 --> 00:08:02,910
Unknown: it was like, what,

16
00:08:02,910 --> 00:08:14,940
what did they do they set the base font size to be 16? Because of it was an American that didn't or just because that was like a good read. That's a good readable size, I guess, if you don't have any CSS applied?

17
00:08:15,000 --> 00:10:58,470
Wes Bos: Yeah, I think that's probably it. Yeah. Anyway, so by setting the base to 10, then anytime you use a RM value, you can always do it 10 base. So 1.5 REM is very easily calculated as 15 pixels, it is very easy in my head. years ago, there was a difference between using 62.5% and 10 pX, because the percentage allowed users to scale up their font sizes accordingly. That's not true. That hasn't been true for like five years, people always like to bring it up. Yeah, people are like, what about accessibility? Do you a blind people? And it's like, no, that's that's not a thing anymore. Because the like, try set your base font size to 10 pX and then zoom in and out with your plus and minus keys, and it will still go up and down. So that's not a that's not really an issue anymore. What else? So once I have that, I'll go through all of my base styles, paragraphs, lists, buttons, set a base font size on that usually like a 1.5 Ram on that. I'll usually use rems by default, and then I'll kick over to using EMS, if, if I find that I need to make a component where everything scales up accordingly. Although I was doing EMS the other day, and I switched it to using CSS variables and calc. Man, I was hitting some like weird like half pixel issues with EMS, and I switched it to calc and CSS variables and those issues went away. And I was like wow, that's maybe I should not be using EMS anymore. Maybe I should just use using variables and calculate the font size based off that. Then I go through all my headings and set them all up h1 through h6. They all have a file I don't have like a value that I increment by be curious to see If you have a more of a formula for calculating those I started, just kind of eyeball it and see what looks good. And then I'll also make classes where you can style an h2 as an h1. And I think this was the silliest thing ever, because there's probably even a tweet of me being like, why would somebody say like, h1 with the class of h2, and now I get it, it's because you want your headings to be appropriate nesting values for accessibility for Google SEO and things like that. But you sometimes want an h2 to look like an h1. And if that's the case, you don't just use an h1, use an h2 use the appropriate tag, but then you style it to look like like an h1. And then past that I just create variants. So sometimes I'll have like a hero h1 or a large text, I'll just make a bunch of little utility classes, I can slap on things. So I'll usually have just a handful of those that are used throughout my project and try not to get too carried away. Otherwise, like you said, Scott, it gets too messy. And

18
00:11:00,780 --> 00:11:20,100
Unknown: have you ever opened up a CSS file and seen that like font size defined in every single class, like every, every single class because everything was so specifically defined that like people are just overriding have to override it. And the only way to fix that is to just write it all from scratch? That's it.

19
00:11:20,190 --> 00:12:03,750
Wes Bos: Yeah, actually, I don't have like a rule where like, you should only apply font size to text nodes, like a paragraph or something like that. And not to like a div. But that's sort of the way that I swayed. Do you have like a rule like that where you don't set a font size on a div? Yeah, I do not set font sizes on divs. Definitely don't do that only on individual elements. And to be honest, I don't know how many times I even set font size like I. Yeah, I guess I do have a fair bit of font size overrides, but not like a ton ton ton. So for me, I do only assign them to specifically type based elements. So I'll define the font sizes on paragraphs, headings, those types of things. But that's pretty much it. Occasionally, a span span.

20
00:12:03,810 --> 00:12:15,060
Unknown: Sometimes he gets spammy, getting spammy. That's mine. It's not like a huge thing that I do is just sort of a little system like, what about you? Do you have a bit more of a defined system? Or is it similar?

21
00:12:15,180 --> 00:16:43,200
Wes Bos: Yeah, so we, at some point here got to rewrite all of the CSS to be CSS variable lies, CSS variables to do the whole thing. In our CSS, we do not define any font sizes that are not based off of a CSS variable. So every single font size in our scoped CSS, so to say, is pulling from a CSS variable and our CSS variables we have, let's see, it's really interesting. The way that I have done it is I have, I have nine different font sizes ranging all the way from 3.05 to rems, to 0.51. To rems, I do not use that 10% thing, just because I set the malware Yes, the only way. The only way the only place I know I, I'm picking it up, the only place I define the font sizes in the variables themselves. So it's not like I'm having to think about rems ever in my site, or thinking about rems pixels, anything, everything is based off of a couple of variables. So I have base font size, which is set to one RAM, I have base Nam size, small font size, smallest font size. And then from there, I have all of my headings set, heading 1234567 all the way down to seven. And these are just heading sizes. So again, no correlation to the semantic meaning of those element tags. And then I have a couple of extra ones which are are kind of like when I really need something big. That's not like my normal h1 size, I have an extra heading and then I have an extra big ass heading or anytime I need to like really get some big headings going. So that's really how I define my my font sizes. So I do them in rems, the values here you might be wondering like 0.5, to whatever rems like that's sort of, you know, odd, I got these values from a generator. So these values again, they did not come from my brain, they came from a generator, which we'll talk a little bit more about in a second. So I define them all in my variables, I only use the variables and I don't do any calculating. So I'm not calculating the size based on one thing or another. And since they're rems, they're all relative to the base rather than just using the variables correct. Like that. And like like to be clear, it doesn't matter that it's 0.554 or five rems because Scott doesn't remember that he remembers extra big ass large. Yeah, right. Like that. Anytime we're doing CSS and we see like font size, you'll see font size, base, nap size, font size, small font size, font size, like base font size. So like yeah, and you're defining that that in the CSS, it's so readable. And not to mention, it really keeps things hard on a system which is What I'm all about right now, how do you scale up and down with media queries in your system? Do you just change the body font size? Because I think that's all we do we change the body font size. Since we're using rems, the, and then ever so occasionally, we'll update one of the CSS variables, let's say the base nap size got to 80 bitty on mobile, when I yeah, scaled down the base font size. So then I have to like, override that one in particular. But since there's so much stuff based on that size, it just kind of all flows back together, you go bigger on when you go on mobile or smaller. It honestly depends. So my base font size, I set HTML to 18 pixels by setting the base font size to whatever you want, you can scale up the whole system up and down since it's all on rems, right. And then on the HTML tag. Yeah, I'm trying to find where I have my immediate query for that. I don't necessarily see. I don't know if I even update that I just said I did. But I don't know if we do anymore. What I should do is I'll bring my headings down, especially for like my marketing pages where my headings are like, like totally the whole entire width of the Yes, yes, the thing. Yeah, and I'm thinking about like those websites that I build, and I usually bring those down quite a bit. Or if you use, like v, w values for for your headings, then they'll just scale down based on the width of the thing, which is kind of nifty, because then you don't have to like write like four or five little breakpoints where you're like, Alright, bring it down a little bit more or a little bit more a little bit more. So that's what I do. Sometimes I'll bump the font size up a little bit on mobile, but I don't don't do a whole lot of touching past that on the the different font sizes. Yeah, for

22
00:16:43,200 --> 00:20:20,130
what I'm seeing, I'm only overriding the base font size for my my HTML, I'm only overriding that base font size in the largest screen, and I'm making it larger. So look out mine does stay at 18 pixels all the way down to mobile. So hey, that's how I did it. So let's talk a little bit about systems. Because now that you get a little hint on how we're both doing this. Why are systems important within CSS, as well as typography in general, I'm a huge CSS systems fan. Big, big, big fan of this, because when you write your CSS onto a system, it enforces consistency. And one of the things that people don't realize with aesthetically building something nice looking, is that one of the things that makes things look nice is consistency. Right? If you have a slight difference in your font sizes, here and there or wherever, then that slight difference is going to add up and it's going to look weird, it's just going to look off, it's going to look and same thing with like spacing, right. Some of those like really low hanging fruit in designing us, CSS that looks nice, is like if you have a system for your typography and a system for your spacing, then as long as you have that system, it's going to be consistent. Now, of course, that system could be too tight or too open or whatever. But as long as you have that system, that consistency is going to be there and it's probably gonna look a little bit better overall. Another one is it takes all of the guesswork out when I'm starting like a new component. And I need a specific font size that it's not allowing me I know that my options are not every single number in the history of numbers, dot pics or whatever, I know that I can set it to base font size, smallest font size, any of my headings, and you know what those are my only options. So, but I have like nine font sizes. So if you can't find the correct size in nine font sizes, then that's a problem. It's true. Another like little benefit I was just thinking about your method of using variables is that you can easily scale up the font size for accessibility reasons without scaling up the rest of everything on the website. Because if you've like just use zoom on your computer, then it zooms up borders, margin, padding, images, literally everything else. And for a lot of users, they just want a bit larger font and not bit more Porter, right? Totally. So back in the day, these were popular, we have like the three little A's and you can allow someone to scale up or down the font size, you can make those really really easily by just incrementing your your base font size, and not incrementing everything else off that. Yeah, I love things like that man. Again, it just it makes it easy. You don't have to think about it. I know we have a lot of problems with like decision fatigue, we make too many decisions in a day. And the last thing I want to do is be making a decision on like each individual font size. So like if I can take any of that like decision making out helping reduce decision fatigue and making choices while coding without having to worry about if it's going to look nice. Like I already have designed, quote unquote, the system. So why do I need to design this individual thing as an individual thing? Like it should just fit in the system? I think also like if you are not good at design, picking a system like this really helps you make something that's not super ugly. Yeah, I think that's something we see like we were talking a couple episodes ago about like, just like things You know, people are like I'm sending him 1000 resumes and I can't get noticed. And there's sometimes things like drop shadow and whatnot that just turn off on your website. Another one is inconsistent font size. You might not even see it yourself. I Oh, yeah, this looks weird. Yeah, if you have a system, the system will save you have faith in the system.

23
00:20:20,400 --> 00:22:50,580
So the last one I want to talk about is how do you actually design one of these font systems? Because all including my font system, which is really what, like 10 lines of CSS in here, I'll include mine in the show notes. But like, how do you design something like this, because I sure as heck did not come up with 2.411 dot RAMs, like I didn't come up with that. So one of my favorite tools on the web is a place I've been going to for a very long time. And there's a handful of other resources that do this exact same thing. But the one I really use and love and what we teach in my course, is a type hyphen, scale calm. Now type scale.com has this really basically gives you every font size you could need. And then if you need one more, there's a plus button at the top or bottom. So if you need to go bigger, you can always click plus and add on additional, larger ones that fit within the system. And they're all based on ratios. So like their major third minor, second, perfect fourth, Golden Ratio. And these these ratios are actually what defines the scale. So in the little sidebar, you can say, all right, I want a base font size of 18 pixels, I'm going to pick a perfect fourth, and then it has every Google Font ever. So you can set your heading font. And then you can set your body font. Or if you don't have those picked out, you can experiment with them in here to see what they're going to look like. So you can set all of your body font type and your heading font type, and the scale. And guess what it spits out an example on the right column bar that shows you body paragraph text with all of the different heading sizes and how it's all going to look. And you will see visually there that it's going to look nice, it feels like I'm like shilling for this website, I have no connection to Jeremy church who wrote this website, it's really nice resource. At the bottom of the page, there's a grab the CSS button and an edit on code pen button. So I always just grabbed the CSS, I grabbed the CSS directly. And that's what gives me all of my sizes. So this is really how I do it, I rely on tools like this, that are really just doing some math behind the scenes for me, that calculates how big each thing should be. And it gives you the the RAM and pixel values. So like whatever you want, if you want to do it all in pixels, they're all here and allows you to visually see that this thing is going to look nice. I don't think I would ever define a type system without something like this simply because I am just not trained in typography. typography is something that people spend their entire careers doing. So like, it would be very arrogant of me to be like, Oh,

24
00:22:50,580 --> 00:22:57,090
Unknown: can I can just create this all myself? Because I'm too I don't know.

25
00:22:57,150 --> 00:24:14,010
Wes Bos: Yeah. But when you're a type head, though, I mean, you you're good at typography. So did you use any sort of tools when coming up with this? Or are you just like, straight up? I know, it looks good, because I've always looked at your designs. And I always really, really love the typography and all of your designs, how did you come up with that stuff? That's a good question. I just kind of fuss around with it until it looks good. That's not fair West. That's not a few. But I think that's a little bit different for you, you're probably referring to like my, like course websites like with, like, marketing and things like that. Yeah, like those things you can I think you can be a little bit more up and down with the font sizes and see whatever because like I do go one by one, and adjust those as needed. But then like, I look at something like my own website and the blog, and I have a much more defined type system for that. Because there's blog posts, there's headings or subheadings, and things like that. And that's more of a website and a publication that needs consistent type sizing, whereas my marketing websites is they're always different colors and different sizes and they're skewed and rotated and, and things like that. So yeah, that's unfortunately I don't have a scientific method for that it's just the good old eyeball and good ol eyeballin

26
00:24:14,039 --> 00:24:19,110
Unknown: Yeah, in like for somebody like you who's just like very skilled in design, like that.

27
00:24:20,280 --> 00:25:18,870
Wes Bos: My wants in design have always been much greater than my abilities. So like I want it to look a certain way but I don't like it. I'm not really good enough to aesthetically look at this and know how to tweak it so some people always say your stuff looks really good. You are a designer month one just kind of pick and values out of a generator here. But um, thank you. Yeah, it's good. It's, it's, that's, again, that's the whole point of the type system, right? It saves you from maybe yourself if you don't necessarily know what to do, the type system will tell you what to do. Totally cool. Well, this is a CSS and type systems. I have a lot of thoughts on CSS and CSS systems in general in terms of the consistency and all these things. So maybe we can do some more of these. We can talk about color systems. I've done some neat stuff with hsla recently. So font size is definitely one. I think we have a lot more things to cover in terms of like, how do you come up with your shadow system or your z index system a year? the very worst? Yeah, good margins.

28
00:25:18,900 --> 00:25:25,320
Unknown: Oh, do you got a couple of BS variables in my thing, and everyone always asked what they're for. And it's sir box shadow

29
00:25:25,770 --> 00:25:26,670
box shadow.

30
00:25:28,080 --> 00:25:54,750
Ours our level we have level one, level two, level three. that's appropriate is appropriate. All right, that sounds good. Thanks so much for tuning in. And we will catch you on Wednesday, please head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

