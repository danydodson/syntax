1
00:00:01,319 --> 00:00:10,530
Announcer: You're listening to syntax the podcast with the tastiest web development treats out there. strap yourself in and get ready. Here is Scott, ski and West boss.

2
00:00:10,559 --> 00:00:21,990
Wes Bos: Hello everybody and welcome to syntax the podcast with the tastiest web development treats out there. My name is Wes Bos and with me as always is Scott Tolinksi. How you doing today, Scott?

3
00:00:22,049 --> 00:00:28,740
Scott Tolinski: Hey, doing good. Just got back from vacation. I think we both just got back from a vacation. So

4
00:00:28,769 --> 00:00:29,340
Unknown: yeah,

5
00:00:29,340 --> 00:00:30,960
Scott Tolinski: yeah. How was it? How's yours?

6
00:00:31,019 --> 00:00:48,119
Wes Bos: It was fantastic. I went swimming. It was hot as as heck. People don't think that Canada gets hot, but it gets really really hot in the summer and really, really cold in the winter. We're basically complaining year round. And but it was amazing because I just like swam the entire week. How about yours?

7
00:00:48,419 --> 00:01:55,170
Scott Tolinski: Nice. Oh, yeah, it was great. We it was it was as as relaxing as a vacation with a one year old can be. So we we did a lot of hiking, which was great because we borrowed this hiking backpack from a friend that was like, just this big rig on my back so he could look at the bag. Yeah, yeah. And so he had like sun protection. He had a good view. He had like a little cage around it in case someone was to like bite it and fall he'd be you know, safe in that thing when in collapse or something. So it was a really like really sweet rig. And a Yeah, we did some really, really long hikes. One was just like five miles up a mountain. And we were walking up the entire way. And it was took all day, and eventually got the top and we had some sick views, but it was luckily it was mostly shaded too. And we're following rivers the whole time. So it was just like following waterfalls and rivers and and just absolutely destroying ourselves. It was it was a tough hike with a little child on your back. But no kid is pretty much worth it. So yeah, ready to get back into it, though. Ready for the week?

8
00:01:55,409 --> 00:01:56,580
Wes Bos: That's a workout.

9
00:01:57,119 --> 00:01:58,710
Unknown: Oh, yeah, I'm still feeling it.

10
00:02:00,120 --> 00:03:16,110
Wes Bos: Awesome. So today, we're talking all about advice for beginners. And if you're not a beginner, don't turn it off just yet. Because I'm sure as an intermediate advanced developer, you get questions all the time from from beginners, and it's nice to hear some, I don't know, maybe another couple people's perspective on the issue. So we'll be talking about advice for gaining skills, advice for applying to jobs, advice for knowing what to focus on advice for imposter syndrome and, and kind of just a mixed bag of all kinds of different advice because I don't know about you, Scott, but I get like, I get these emails from people where it's their like life story. Like I wouldn't be surprised if it shows up as a hardcover bound book. And I it's it's frustrating for me to to get these like people pouring out their heart to me and and at the end of the day, my advice is very similar to almost everybody in the situation, people tend to think they're in fairly unique situations, but isn't at the end of the day. And I think that a lot of the advice that we have today will be very applicable to absolutely everyone who's who's maybe in it for maybe you're in it for a couple weeks. Maybe you're in web development for a couple years, but you still consider yourself new to the industry. So that's what we're gonna be trying to tackle today.

11
00:03:16,319 --> 00:04:48,990
Scott Tolinski: Yeah, I totally feel your pain. Because as much as I want to help everyone who sends me an email, like I really, genuinely would love to answer every single question. If you send me a giant book, I just like there's no yeah, that that email is just gonna get looked at. And it's just gonna sit there and it's gonna sit there and it's gonna sit there until I eventually decide, oh, this has been too long to respond. I should archive. Yeah, so we're going to get into we have a few different sections that we want to cover everything in here. But before we do, do a quick mention our sponsors today, our coffee cup software and fresh books now coffee cup software has produced one of the coolest CSS Grid prototyping tools that we've ever seen hit is really super nice. And fresh books, as you know is awesome cloud accounting software. So we're going to hear a little bit more about both those later on in the show. So let's get going in it with our first section. In this episode here is going to be advice for gaining skills This is going to be for new developers, or new want to be developers who don't know where to start looking for new things to learn how to learn new things. And luckily, we've actually done a show on on learning things. So check out our learning things show I forget what episode that was. We could look that up here see episode number 44. So check out Episode Number 44 for our episode on learning, if you are still interested in more this stuff after this but yeah, Wes, what is your number one advice for new people gaining skills?

12
00:04:49,110 --> 00:06:03,000
Wes Bos: Yeah, so I think probably one of the biggest things that I hear from people when they send me these big book emails is that they're frustrated with the the sort of pace that things are going because web development sort of has this whole, anyone can do it. And it's easy. And you can attend a weekend workshop and you can build a website and just take a boot camp and get a job with one. Yeah, exactly. And like, we're actually going to do a whole episode on boot camps. I think they're, they're fantastic. Don't get me wrong, but there's sort of this like, get up and running, which is really, really fast. And then there's this like, 98% long tail of the industry, which is learning absolutely everything else. And what tends to happen is that you do a weekend HTML CSS course. And you feel like you're just flying, and you're gonna be like, Oh, I'm on the track to 100 grand, I'm going to get a job, no problem, and it's gonna be good. And then you start to hit this wall. And then you realize, oh, what development is actually hard. There's a lot to it. I'm really overwhelmed. There's there's, there's so much to to possibly learn, there's so much that I could, so many different directions that I could possibly take this, I don't understand JavaScript, is that how I how I said JavaScript really funny there, JavaScript,

13
00:06:03,240 --> 00:06:04,170
Unknown: JavaScript.

14
00:06:05,010 --> 00:07:31,350
Wes Bos: So I think my my biggest advice here is that you need to patience is probably one of the biggest patience and momentum because you're not going to get anywhere just sitting on your hands and waiting for time to pass, obviously, but you're also not going to get anywhere in a weekend or a week or two months or even a year, you're not going to gain significant skills you can obviously get, you can learn quite a bit in six months, a year's time. But if you're looking at people who like myself, I've been in the industry for 10 years. And I still don't think that I'm like, I don't feel like I'm at Advanced developer yet. Maybe I don't know, maybe intermediate advanced developer depends on how you look at it. But I still know that there's so much more that I have to learn. So being able to just like put your head down and build stuff day in, day out, do that for 10 years, and then you're going to get really, really good at this thing. And I think it's as frustrating for people to be like, Oh, I need this job. Now, I want to be able to be making that money in six months from now, when that reality is there's lots of cases where that's true. But you're also going to need to just like look at where you want to be in six months, a year, 10 510 years from now. And that's really what you're gunning for. Because if I look back at my career now, I'm so glad that I kept with it for 10 years, because now it's just like the momentum I have is unbelievable. And being able to learn stuff quickly is is next to nothing for me.

15
00:07:31,710 --> 00:09:27,240
Scott Tolinski: Yeah, yeah. I mean, I think you touched on a lot of really important things there. I think one of the most important one is to just keep yourself in this learning mentality and have your mind be an open vessel. Because at this point, you don't know what you don't know. And you don't really know a whole lot. So yeah, it is going to take some time, this stuff is hard. So don't expect results overnight. And if you do get some results overnight, you know, you can celebrate those but you know, take this time to really explore the fundamentals and explore the basics. And don't put that kind of pressure on you that you need to be somewhere. So I think that's great. One of the biggest tips I have for new developers is start small people want to start with everything. That's like a big thing. People say, Well, this is my first site using these kind of technologies. And I want to use this and this and this and this and this, and this, whether you're brand new to JavaScript, and you want to learn react and Redux and Apollo and everything all in one project, not something that I typically would recommend, because, you know, sure enough, these technologies are things that you might want to learn or pick up at some point. But they're by no means the best way to learn the basics. To learn the basics, you would need to learn the basics. And you want to learn those things sort of separately or together or whatever. But you want to learn these basics in a way that allows you to truly understand what these basics are at their, their core most right? Your fundamentals are so important at this stage in the game, because when I'm looking for, you know, developers, to you know, whether in an interview or whatever, you need to see that these core skills exist, whether it's, you know, knowledge of semantic HTML knowledge of how to write good CSS knowledge of how to write good JavaScript or when to reach for any of these particular tools, and when to not reach for them is a big thing that will get you a long way. So make sure you are focusing on those fundamentals.

16
00:09:27,630 --> 00:11:01,380
Wes Bos: I think my other piece of advice is that spinning your tires doesn't seem like progress. It seems like you're getting nowhere. I can't tell you the amount of times even in the last couple months where I spent an eight hour day working on somewhere something and at the end of the day, I was no further along or that all of my work had to be scrapped. And it's incredibly frustrating to just waste your time like that, especially when maybe you're at a job and you actually have to show progress and you haven't got anything done for that whole day. And how you explain that to your boss is another issue. Hopefully you have Understanding boss, but I know that doing that is his progress because you're going to be that that's what learning is learning is going through 100 dead ends before you actually find the one that actually works out, learning is being frustrated with it and getting better at debugging skills. Like, I just had someone send me an extremely angry email with my node course or they, they couldn't get it running. And they said they spent 48 hours trying to get it started and they had not NPM installed. Like, okay, that's you obviously didn't follow the steps. This is a bit of an extreme example, but guarantee you the next time they do a project, they're not gonna forget to npm install for they move along, right. And that's going to be a lesson in actually following the steps and actually listening to what a tutorial says and, and not trying to jump ahead and, and understanding like, where did these magical libraries come from? Well, they don't come from nowhere, you have to NPM solid, right? All of those things are going to help you become a better developer.

17
00:11:01,409 --> 00:14:13,200
Scott Tolinski: Yeah. And I actually had a similar not not necessarily the same situation, right? Somebody upset that I was leaving errors in my video tutorials. The funny thing is, is like some of my free tutorials to like, Why are you leaving these errors and like, I'm why I watched this video to learn the right way to do things, not the wrong way to do things. And the problem is, is that those skills that we're trying to instill in those situations are these troubleshooting skills. If you don't run into any errors in a tutorial, you won't know how to solve or even go to approach an error when you actually run into one. So again, those troubleshooting skills are some of the most valuable skills that you can possibly gain. I've always maintained that I'm not that smart. I'm just very persistent. I'm when I have a bug, I am going to just, I'm going to spend the time on that I'm going to put put my mind on it, I am persistent, I will get things working, I will not get things working the first or second, third or fourth time, you know. So it's definitely one of those skills that you need to build and grow. And as long as you're working on those troubleshooting skills, and figuring out how to solve problems, and that's such a big thing, don't go running to the chat room and just say how do I do this right away? spend spend a day on it, if you can spend some time on it, if you can, those skills are valuable to gain. In addition to that, I think one thing is that how are you going to stay excited about something to try to solve those problems, right? If it's something you're not interested in, and you're you're banging your head against the wall for you know, two days on it, then what's going to keep you excited to solve those problems. And for me, again, it's knowing what excites me about web development, and not necessarily what excites other people. Because when you're learning content, and you're learning this stuff, there's so many different avenues you can take it to make yourself excited about the outcome. For instance, when I first started, I was really super into, like Photoshop designs, right? Like back when we first started, you did so much stuff by chopping up slicing up a Photoshop file, and then just setting background image to a bunch of stuff to get these like really fancy gradients before, you know CSS gradients and fancy drop shadows before drop shadows. And the challenge involved in getting a really cool Photoshop layout to actually work in a website was one of the like, most exciting things for me. So I was spending my time with stuff like that. But I was still gaining CSS skills, I was still getting core HTML skills, and not really so much JavaScript at that point. But it drove me to figure out these layout and these CSS issues that I might not have figured out if I was just building something that somebody else told me to build, right. So obviously, that's not as applicable, because you can now do all this fancy stuff with CSS. But let's say you see some animations. There's nothing to stop you from wanting to learn CSS animations as a way to learn CSS better. So find these things that make you really excited, and make you interested and then make your own to latch on to it and then explore those things. You're an explorer, go explore.

18
00:14:13,649 --> 00:16:39,799
Wes Bos: Totally. And my last point that I have here, and you've probably all of you have probably heard me say this so many times, but it really is my whole mantra is that you just need to build a lot of stuff you need to build 1000 things is what I say just get out there and start making stuff and I'm going to give you an example from from my own life where I'm trying to understand something and it's just not actually happening. So I've been going down a rabbit hole of YouTube solar energy, I figured out that my house points perfectly South which is where you want it for solar panels and I'm starting to think like oh Wouldn't it be cool one day if we could put solar panels on her house and I want to know all about it how it works and there's a lot to understanding there's the of watts and volts and amps and and different types of batteries and balance. batteries in an amount that aware. And you have to have different gauges of wire, depending on how much you want to move. And there's series. There's wiring solar panels in series versus wiring panels in parallel. And those things are different. There's a bunch of up and down, there's so much to actually learn about how it works. And I kid you not, I've been watching like, probably like 40 different videos, I've read all these articles about like, what are watts, volts and amps. And there's all these like examples about like how it's water, and if you turn the water and the tap on all the way and I'm like, okay, I kind of get it. But then I like two weeks later, I try to remember that and I don't understand, I was like, you know what I need to do, I need to buy a little solar panel and a couple little batteries, and figure out how this stuff works and actually build something so that i will i understand and plug my computer into it and start and figure out how long that lasts based on the size of the battery and how much I'm pulling based on what my electronics pulling all you get the point, right? So I think that's just the perfect example. I was like, Man, this is so much like coding, because like, you can sit there and look and read, what is composition, what is inheritance, you can read it you can watch someone make a sample function called fill a cup, or you pass in the amount you want to fill a cup. And at the end of the day, like you probably will kind of understand that stuff. But where it's really going to click is when you actually run into situation in real life. So that's the whole idea behind my JavaScript thirty.com course, is that like you just start building stuff. There's no secret behind it. I've said this so many times, build stuff, build 1000 things, you're going to get so much better. As you every single time that you build something you're gonna get better.

19
00:16:40,169 --> 00:16:49,799
Scott Tolinski: Nice. We'll have to talk about solar panels. I'm interested. All right. Well, it's obviously a big thing in sunny Denver here. So yeah, very interested. Okay,

20
00:16:49,830 --> 00:16:52,710
Wes Bos: cool. We should do a whole show on how it works.

21
00:16:54,179 --> 00:16:56,789
Unknown: So the panels work solar panels for web devs.

22
00:16:57,090 --> 00:16:57,659
Wes Bos: Yes.

23
00:16:57,659 --> 00:17:04,200
Scott Tolinski: How about solar panels for jQuery users? Or even better solar panels? for designers? These are all good.

24
00:17:04,500 --> 00:17:06,510
Wes Bos: Should designers solar panel.

25
00:17:09,720 --> 00:19:43,710
Scott Tolinski: Bad, there's so many blog posts, okay. Let's get into this next subject, which is advice for applying for jobs. Because you know, not everything, when you're first starting is all just about the code code code, you have to make some money doing this, maybe you went to some, like we said, code camps or stuff like that you've gotten some skills, you're building some stuff, you need to get a job, obviously. So let's talk about some advice there. I think first and foremost, when you're applying for jobs, you should apply for anything that interests you and excites you and that you'd be excited to work on. Now, if you're just needing a job, just apply for anything and everything that exists as long as it doesn't look like a terrible situation, right? Like if someone's asking you to work overtime, for no pay, and whatever, then obviously, skip that stuff. But find a job that excites you, and apply for it. If you don't feel that you're qualified, apply for it. If you definitely aren't qualified, apply for it, who cares? Just get in there. Because the good thing is, is once you get in the door, and you could talk to people, maybe they're gonna see something in you, right? For instance, my very first web development job I was not qualified for I'm just I was distinctly not qualified for this job. I had a good interview, I really connected with the boss who eventually became my mentor. And he definitely could tell I was not qualified for the job. But he could also tell that I was good enough to be that developer or that I could be that developer in no time if he were to guide me right. So my very first job absolutely not qualified. I almost didn't even want to interview for it. My wife found the job posting she was like really adamant about me applying for it. I did I wrote a really nice cover letter talking about why I would really love that job. They took a chance on me and it started my entire career. It even my mentor Ben Ben chef and I, we even started level up tutorials together, which is now my actual career. So again, you start one ball rolling and you never know where that that is going to do so. So apply apply, apply, get in there, if you fail, who cares it like I I've gone into a whole bunch of job interviews, not wanting the job just wanting for experience right and failing at a job interview, failing anything yet stuff is all just experience and it's going to allow you to kill that interview that you really actually want right for that job that you're dying to have. It's going to any any failure is going to open the door for those kind of opportunities.

26
00:19:43,890 --> 00:21:46,850
Wes Bos: Another thing I'll add to that is it's not necessarily a numbers game. Sometimes I hear people being like, I've applied for 300 jobs and I haven't heard back from anything and like, it means you're not doing something right. Yeah, you're obviously not doing something right because like, it's just you're not just gonna say spray your resume out over as many people like that that that certainly is a tactic. And that's the same thing with like, if you're a freelancer, one of the tactics is you want to get a job, contact 100 companies and ask them if they need a website being done, and likely one of them will be done. However, there's much more efficient ways to actually have that done. And it's making yourself much more attractive to employers, because put yourself in the employers shoes, if you post the job up, they are gonna get hundreds and hundreds of resumes. And most of them, you won't be able to differentiate between one or another. So what you need to do is make yourself much more attractive. So writing some blog posts, but we've talked about this before doing YouTube videos of explaining a topic that you have, you don't have to be an absolute expert at this stuff. But being able to first put yourself out there and second, try to break something down, you might put a five minute YouTube video out there that takes you an entire day to put together and you're just explaining a programming concept or how you did a specific thing and react. And by just putting yourself out there, that's going to just move you near the top of the heap, because they're going to see, okay, this person actually cares enough to write a blog posts YouTube video, author and open source project, or I know for beginners, it's it's often not and you can't like necessarily like, Oh, I created this amazing open source project, because your skills might not be there. But you could put up example code of stuff that you've worked on. A lot of people will take my JavaScript 30 course or any of my courses, and they'll they'll kind of make something out of that. And that's totally fine with me, by the way. But you can just put that up in your GitHub as as examples. Just put yourself out there is going to move you to the top of that, that dropped job search heap.

27
00:21:47,060 --> 00:22:41,760
Scott Tolinski: Yeah. And yeah, and that definitely is that you want to make yourself attractive to these people that are going to be judging whether or not you can do this job. And so you know, one of those things, like I mentioned, in my first job, where they gave me a chance that I wasn't qualified for one of the things I did to differentiate myself was I wrote a really nice cover letter that actually explain why that job in particular was like my dream job, right? This is my dream job, because, and I guarantee, you know, the other people did that. Or at least maybe if they wrote a cover letter, it was, you know, you know, generic or whatever. But I wrote an actual like, man, it would mean so much to me if I had this opportunity for these reasons. And they really, really, I think, latched on to that, and they really liked that. So you do need to differentiate yourself, again, showing your commitment to this industry, by doing those kind of things, blog posts, YouTube videos, open source is going to go a long, long ways, it's going to definitely make you look much better.

28
00:22:42,090 --> 00:23:08,700
Wes Bos: One thing people ask me all the time is about negotiating a salary. And I've actually never had to do this. So I don't like have a whole lot of experience on it. So I wanted to see like, maybe you have a take on that. I do have some opinions on it. I think like you should be like really aggressive in negotiating your salary. I think that there's you can leave a lot on the table. People seem to be afraid of possibly negotiating a salary. But like, do you have any experience with that? So when I would get a job offer, I

29
00:23:08,700 --> 00:23:42,090
Scott Tolinski: would almost always call my dad and just be like, Hey, here's the salary. Here's the whatever, like, what do you think I should do? Here's my, you know, current salary, or what's your advice here? And he always had, he had always had excellent advice on this. And and sometimes, let's say I had one job. That was, let's say, it was just offering me 68,000 a year, right as a front end dev position. And you're like, Okay, that that seems like a good salary. It's a bump up from what I was making before, I should just take this, I asked my dad, and he says, tell him you'll sign today, if you get 70.

30
00:23:42,630 --> 00:23:43,380
Unknown: Now, it's just like,

31
00:23:44,220 --> 00:24:49,470
Scott Tolinski: yeah, I'll say yes, right now for 70. So I said that and they're like, Okay, 79. And that doesn't always work. But it has worked for me more often than not, believe it or not, yeah. And don't don't feel ashamed to negotiate your salary. Don't be you know, there, there may be a situation where you they have a lot of people lined up out the door for this job. And they say, this is the firm's salary, we cannot change this. And if they're going to tell you that this is this is as high as they can go or whatever, then that's fine. And you got to also know that by saying, hey, all signed today, if you if you give me 70, they could also say No thanks, let's, let's go with somebody else. So you're taking a little bit of a risk there. But it depends on how much that risk is worth it to you. In that case, I had a job, I didn't need a job. It was sort of like, well, this would be a nice little bump up. Let's see how high I can get this. And yams. It works really well. So I always take those shots. I take all of them. I always try to get a little bit more out of it. And most of the time, I've never lost a job because of it.

32
00:24:49,620 --> 00:25:03,510
Wes Bos: But it's someone really going to pull a job back from you because you try to negotiate like someone says, okay, 65 and you come back and say, Hey, could we do 70 they're not just gonna walk away. They're gonna say Right, no. Would you like it or not? Right? At that point, they've

33
00:25:03,510 --> 00:25:34,590
Scott Tolinski: decided that you are their person, right? Yeah, they they've committed to you to some degree, the point where that doesn't work is like an initial interview. And they're like, what are your salary required? Yeah, I hate that question. Because it's like, Huh, I don't know, as much as you can give me. How about that? You know, I always go for hire though. I always I always go for hire, maybe find out what their developers are making and go for a little bit higher or something like that. They mean, most of the time, they're going to tell you if it's too high, they're not just going to kick you out. So

34
00:25:34,920 --> 00:27:05,520
Wes Bos: yeah, if that was my the case for me what I would say if they say, What is your salary, I'd be like, Look, I have a bit of a broad range. And the money's important to me. But there's also these following things. And I think if you have a bit of an entrepreneur mindset, when you're approaching either a job or negotiating an existing job, you can think about like, how can I How can I turn this in my favor, whether that's negotiating, obviously, more money, different hardware that you want big ass monitors, standing desk, whatever it is that you want unlimited Lacroix in the kitchen, vacation time flexible schedule, all of that stuff is is up for negotiation, I think if you approach a job as not necessarily just like an average salary, and a lot of people will just google average salary, or like, they'll send me an email listing, like, I know bootstrap three and four, and I know jQuery one and two, and then they'll be like, given the following things, how much does your machine compute that I am worth, right? Like, that's absolutely not the way that you can, you can, you can figure out what your salary is worth, because it's a big part of it is up to you to actually negotiate that in, and to go and get those big bucks, the people that make really good money both in business, like as an entrepreneur, as well, as people who are making really good money inside of a company, they are doing that, not just because they're amazing at their skill set, that's important, too. But it's because they're really good at being able to negotiate these things and and show their value to their employer where they can show that it's worth it in the long run.

35
00:27:05,760 --> 00:27:53,910
Scott Tolinski: Yeah, definitely. So a lot of the times we we always want like beginners to really write their own code, right to like, get into the code right away and start writing your code. However, there are some times where having a good code example can really go a long way. And a really amazing tool that we've been made aware of his coffee cup software's grid prototyping tool. So the coffee cups, the CSS Grid tool, really excited both of Wes and I because of the code that it outputs. And so if you're looking to learn things like CSS Grid, this coffee cup CSS Grid software might just be a great way to not only get some experience with grid, but also really grow your CSS skills by looking at some nice code.

36
00:27:54,030 --> 00:29:23,820
Wes Bos: Yeah, so coffee cup software, CSS Grid, I'm laughing because I'm gonna tell the story of how they approached me. I obviously, I have my own CSS Grid course. And they came and said, Hey, can we maybe do some stuff together? And we have a visual builder for CSS Grid, it outputs code, just like you would write it. And I said, Yeah, right. Show me, right. Because like, obviously, developers have a very high bs tolerance. And we all come from the days of the Dreamweaver where outputted, this terrible, ugly code, or, or you've, we've all seen a WordPress, some sort of WordPress editor layout maker that outputs the most horrendous code ever. So I was like, Alright, I'll jump on a call. And we'll check it out. And to my surprise, it was actually awesome. The the code that I put out, was just like, I would author it myself. And it's great, because CSS Grid is such a visual tool. It's such a visual thing that he needs to be able to see what you're building, that you can just stare at CSS and understand how it's going to work because there's implicit and explicit rows and columns and spinning and placements in order and CSS Grid has is huge, right? There's, there's so much to it. So they built this tool at CSS grid.cc. It's a free CSS Grid builder, and you should check it out. It also comes with some CSS Grid guide. So if you want to learn a little bit more about CSS Grid, you can check it out. So thanks so much to coffee cup software for sponsoring again, that CSS grid.cc Nice. Yeah, really

37
00:29:23,820 --> 00:31:06,510
Scott Tolinski: super cool. So we have now talked a little bit about advice for gaining skills, advice for applying for jobs. And now let's talk a little bit about advice for knowing what to focus on. This is seriously one of the questions that I get asked the most like, what technology should I be learning right now? Where should I be spending my time? Like, what should I be doing? And it's tough. I'm gonna I'm gonna say it's tough. modern web development has made this tough because there is so much stuff. It's a lot less simple than Hey, pick up some CSS and some HTML and get going right, or pick up WordPress or Drupal. One of the CMS says, there's just so many things out there now, that can take up your time and take up your learning. However, my biggest advice is to figure out what kind of things you would like to build, like what gets you excited, what gets you jazzed up, and work backwards from there and figure out what these things are that you need to learn to build these things that get you excited, right? Like, let's say, you saw some some interactive thing on a website, or maybe it was a page transition, or maybe it was, you know, something interactive land, like react sort of stuff. And then you find out how they built it, maybe you use built with or one of these things. And you see, oh, this was built with react and CSS and whatever, well, I need to learn react, then. But to learn react, I guess I need to learn JavaScript, and then well, to learn JavaScript, I should at least get the foundations of JavaScript going. So you really just want to work backwards, and to find the thing that like, here's what you want to build, here's what gets me excited. And here's all of the things that I need beforehand and just start cranking away on those things.

38
00:31:06,660 --> 00:33:07,860
Wes Bos: My biggest advice for for knowing what to focus on is is not necessarily like these are the technologies to focus on because I think sometimes people, they see a job posting and it says you must know react and Redux and RX js. And they say, Okay, these are the technologies I need to know. And and that's important. But I think what you need to do is you need to actually build products that focus on solving problems and focus on doing things rather than the actual tech behind it. Because if you sit down with a fresh copy of react, and you're like, I don't know what to build, or I don't know what to do with this, then you're not going to get much past your hello world. Whereas if you say like, Okay, I'm super into hockey or barbecue or buying bikes on Kijiji, or or anything like this, then you have a problem and you have something that you want to build or, or my parents run a business and they need a tool that will help them keep track of x, y and z, right? You find some sort of problem, whether it's a website or an app or a little tool for you to time your your B boy moves or whatever it is. And then you say, Okay, this is a problem I have, I would like to build this. And what are the tools? What is the tech that I can actually use to build it behind? So sort of approaching it from a problem first, because like, newsflash, that's how the world works. You we have problems in the world. And then tools are developed to solve these problems, not the other other way around, right? You don't ever see a carpenter, walk into a shop and say, oh, I've got these new screwdrivers. I've got this new saw. Let me saw something, right. Let me saw a piece of wood and Oh, now I have a piece of wood. That's the same thing as the the Hello World, right? What you say is I want to build a table, I want to build a chair, I want to build a new gate, I want to fix this problem that I'm having in my house, then I need these tools. And as you build stuff, your your collection of tools will grow. And it's no different from that from being a web developer.

39
00:33:08,360 --> 00:33:56,970
Scott Tolinski: Yeah, yeah. Like, I mean, I like all of that advice. Because, again, it's it's problem forward, right? It's, it's what's this kind of stuff that will one solve some sort of problem for me, but also what kind of stuff is going to make me excited, right? What kind of stuff is going to drive that learning what kind of stuff is going to push me forward when I have, you know, all these bugs and then the error ended up bf forgot to import a script or run npm install or any of that stuff, right? What's going to keep you driving through all of those things? Well, it's going to be the drive to solve a problem or to do something that you're trying to do, right. I mean, these things that are going to excite you. So definitely 100% agree on that. But yeah, I guess really, yeah, like you said, First, start with the problem. And then work backwards, find the tech, learn the tech get going build some cool stuff.

40
00:33:57,450 --> 00:35:13,380
Wes Bos: I think another another tip I have here is focusing on techniques and stuff like this is really important. I'm gonna have I'm full of these, like, metaphors are relating to real life today. But that's like, that's, yeah, totally. Like when when I learned how to barbecue, and like, like smoke meat and stuff like that, what I did is I just like, watched lots of tutorials, I tried lots of stuff. And as you are doing these things, you're learning different techniques, you're learning when to apply different rubs, you're learning not to apply barbecue sauce too early, because it's going to burn you're learning how different levels of heat will affect different types of me and you just sort of get into this cadence of learning how to cook and then before you know it, you're not following a tutorial or you're not following a recipe book and I think that's how it's going to be with beginners. You, you first you'll you'll go with someone like Scott awry and you'll, you'll do a whole bunch of tutorials together and you'll build something sort of with us holding your hand and then at a certain point, you'll Let go of our hand and you'll say, Okay, I've got all of these tools, and I've got all these approaches in my repertoire. Now I can I can figure out how to pull them together myself, and it'll just become second nature at that point.

41
00:35:13,859 --> 00:36:01,940
Scott Tolinski: Yeah, I distinctly remember, like a feeling of being like, all of the sudden, whoa, I can do this by myself, without having to look up a tutorial on how to do it. And I'm came up with this entire view on where to go and what to do. I came up with this myself, right? Oh, well, if I want to do this, then I have to do this. And I have to do this. And I have to do this. But it's not overnight for a very long time, it was always like, okay, now I have to go find a tutorial on how to do this, because I don't know how. And eventually as you go, you are going to get these aha moments where now instead of having to look up how to do something, you can invent how to do it yourself, even though it's obviously probably been invented thousands of times before, but you can come up with it yourself, just because you now have those base level skills, you know where to look, you know what to do?

42
00:36:02,250 --> 00:37:06,230
Wes Bos: Yeah. And you'll be able to, to swap things in and out much more easily, right? Sometimes I get people who come and take my node course. And they say, oh, Wes, I have a great course I wish I could take it. But I like to use ej s instead of pug. So therefore I can't, I was like, okay, it's just a templating language. And what you should be doing is that, okay, I'm learning these 11 different parts of node from less one piece I don't like I'd rather use a different templating language at the end of the day, but either bite and chew, just use Jade, because that's what I'm using in the tutorial. Or if you really don't like it, learn how to swap just that one piece out for this tutorial. And keep going with with the rest. And sometimes I think people just look at at tutorial in this, say, Oh, these are all of the things and they're all set in stone. And I want to learn how to use them together. But in reality, they're just lots of different moving parts that you're going to be able to pull just the middleware piece out and apply that to a different project that you're working on a different point or just the templating part, right? Yeah,

43
00:37:06,230 --> 00:38:07,920
Scott Tolinski: I almost always, in my videos recommend that people, Brian branch off from what I'm doing. Like, yeah, I make it very clear. Like in my latest electron series, I'm like, Listen, this theme in this style component system is good for me. And it's good for this series. And if you want to follow it, that's cool. However, if you want this to look differently, if you want this to look differently, with maybe a different technology, please go ahead use those things. Like just because I'm showing you how to make it look like this and how to use styled components does not mean that you have to do that. And I definitely encourage people to extra extrapolate is that that the word extract extrapolate Yeah, yeah. Yeah. extrapolate upon the things that I'm doing, right? Like, Hey, I'm building a Movie Database, well, maybe you don't need to build a Movie Database, maybe you can build a video game database. Or maybe you can build a TV show database, or whatever tests, take the idea in the pie, a little bit of different ideas to it, and then you're going to be getting more out of those experiences.

44
00:38:08,220 --> 00:38:28,530
Wes Bos: Yeah, if you make it your own, then that's when you get excited about like, coming back to the things Scott and I were talking about. If you're excited and you're invested in your project, you're going to learn a lot more. So if you say, Oh, this is cool, but I would like to make it do something else. I could see how I could start to deviate 20% away from this tutorial and make something on my own. That's exactly where you want to be.

45
00:38:28,800 --> 00:38:46,230
Scott Tolinski: So yeah, the last major topic we wanted to cover is really just imposter syndrome. Because again, we get to ask this question all the time. It comes in almost assuredly, every single time we post one of our potluck tweets asking for questions. Yeah, advice for posture syndrome. What do you have? Wes?

46
00:38:46,260 --> 00:41:29,480
Wes Bos: Yeah, this is something that's come up a few times in the podcast, but people still email me about it. So like, I'm gonna put this in the title. Hopefully, this will be a nice, nice way. imposter syndrome is where you've done all this learning whoever you feel like you don't actually have any sort of skill in order to apply for a job or to build something in or if you get a job, you might be like, hold that I trick them into hiring me, I'd really don't feel like I have the skill sets and and it's called imposter syndrome. Because it's a syndrome. It's not something that you necessarily actually have. And I think most people have it, you talk to anyone that works at any big company, and they, they almost always feel a little bit of that being like, oh, man, I might be in a little bit over my head. So I think what's important to to combat imposter syndrome is first know that this is a thing that everybody has, and it's likely that you are not an imposter. Maybe, maybe you are, but maybe you are you you'll be fired very quickly. But it's likely that you're going to join a team and your team is going to help foster you and they see something in you that they're going to be able to grow and they like your personality and they like your skill set and they say like this is someone who we can invest time in and we can grow. So that said what are some other ways to combat imposter syndrome. I think one of them is, is just listen to this podcast because what we do every week here is that we talk about a topic and we distill it into all the different pieces and, and talk about it. And I think that's really important because you don't necessarily know need to know how to do absolutely everything. But having a good surface area of the industry of web development in general, is really going to help you be able to understand how pieces work together, be able to talk to different engineers on your team, understand like, like, for example, if you don't know how servers work, if you don't know how, like Ajax requests from the front end, gets to the back end. Or if you don't know the difference between j WT and sessions, that might not matter. But actually knowing how they work and what they are, will allow you to talk to people on the team allow you to build better products that will allow you to better understand when problems come up. Like I can't tell you how often I get emails from people being like, hey, Wes, I'm working on a react project at work. And I've spent three days on it. And it's not a react problem. It's a server problem their server was was returning bad data or something like that, or there's a corps issue. And people are like, how do I get the server to give me the data? I I can see it in dev tools, but it won't go into my application? And the answer to that is you can't that's what course is right. So having a good surface area of all of these different things where that might pop up at some point in your career is really going to help you.

47
00:41:29,760 --> 00:43:15,090
Scott Tolinski: Yeah, for me, I think that if you go into a job, and you feel like you're in over your head, Well, okay, how about let's put it this way, if you go into a job and you don't feel like you're a little bit in over your head, then I don't think that you've picked a job at the right level, right? You've picked a job at your current level, not at the level where you want to be. So good point, you should be looking for these things to help you girl. The only time it's a problem is if you show up to a job, and you can't do the work and you're not willing or able to make yourself rise to that occasion. So if you get into a situation where you're like, man, maybe this job like maybe I'm not good enough for this, right? I'm feeling like an imposter. I'm feeling like I shouldn't be here. Instead of saying, Well, I guess I shouldn't be here, you need to say I have to show them that I deserve to be here, I have to make myself feel like I deserve to be here, I have to get my abilities up to the point where I feel comfortable here. You know, nobody ever learned to swim by standing at the edge of a pool. I just made that up on the spot. So Wow, that that might be a good thing. Yeah. So you got to get in there, man, you gotta you gotta, uh, you know, tread water a little bit, you got to figure it out, you got to get some work, but you got to get going on that. And that's really just it is you want to feel those times where you're uncomfortable and you're feeling like an imposter. Because really, those are the times where you have tremendous growth. And, you know, that's how you grow your careers through feeling like an imposter and rising to the occasion. So you know, every single time you do that, you push the notch a little bit forward and a little bit forward and a little bit forward and bow all of a sudden you are big boss, man, Big Boss woman coming in there doing the job. But yeah, that's, that's my advice there.

48
00:43:15,300 --> 00:43:17,480
Wes Bos: I know all about being big boss, man.

49
00:43:18,030 --> 00:43:48,750
Scott Tolinski: BBM. I was always I guess I also know that we're on acronyms I do want to stay, I want to say that we should also you should not care about what I wrote here as open up other people's progress, like do not care about other people's progress. Because there's always going to be somebody who is like, way, way smarter way better than you, there's always someone who's gonna be way better, there's gonna be lots of people that are way smarter than better than you don't care about their progress. It's your progress. It's your story. Get going on your stuff. Don't worry about other people's stuff.

50
00:43:48,780 --> 00:44:41,790
Wes Bos: That's that's a really good point as well. Sometimes you see, even with with conferences, sometimes you see these conference speakers, every single conference talking about it in there. They're often like a developer advocate, nothing developer advocates, I think they're great. But sometimes this is people just talking about the stuff and like I should talk. I'm the guy that does the podcast twice a week, but there's sometimes just people always talking about it or posting Instagram or just being very outward about their what they're doing, where if you check their GitHub or ask them what sort of stuff they've built, it's there's nothing there. Right? Because it's really just a show we layer and actually doing the work. There's a lot of people that are doing the work and are very quiet about it. So don't compare yourself to, to maybe that 10% of the people that are just putting themselves out there because it might just be all for show. Yeah, it might not be though. I don't want to I don't want to poopoo anyone's work.

51
00:44:42,120 --> 00:45:30,030
Scott Tolinski: Yeah, right. Yeah, there's definitely people putting in the work on all sides of the spectrum there. And there's definitely people not putting up putting in the work as well. But yeah, that that's that's pretty much it. Let's talk about something that will save you from putting in a ton of work and in my mind, that is Freshbooks Because no one likes to put in the work in their counting time because, well, I'm not gonna say nobody because there's accountants out there that absolutely love it. But for the most part, if you are a small business owner or you're a freelancer, you're developer working on on projects like that. You need cloud accounting software, you need something to keep track of your your expenses, your invoices, and all that stuff. And there are no better tool. There is no better tool, I should say, than Freshbooks, which is incredible cloud accounting software.

52
00:45:30,300 --> 00:46:40,950
Wes Bos: Yeah, talk about like putting in the work when if you're trying to run a small business, sometimes I find that you can get distracted by the everyday the accounting, the all of the stuff that is not actually building stuff. And I, my whole mantra in life is to fight this stuff, tooth. And now talk about focusing on building stuff. One thing that I'm very much against, in my whole running my businesses, wasting time that is on stuff that is not development, right? Because it's such a pain, because it's it's like, really easy to get sidetracked on stuff that's not actually running your business, and feel like you're getting work done. Because you're you're spending time doing invoices and sending emails and stuff like that. And it's not really getting anything done, you're not really progressing forward. So I love fresh books for this because it makes creating invoices super easy, makes good tracking down late payments, it makes creating quotes and all that good stuff super easy. So if you are a small business or a freelancer and you want to accept money online, and you want to build people, you need to check out fresh books@freshbooks.com forward slash syntax in use syntax. And how did you hear about a section? Thanks so much to Freshbooks, for sponsoring.

53
00:46:41,220 --> 00:49:14,100
Scott Tolinski: Thank you. Yeah, absolutely. So while we wrap this up, we have just a section that we labeled here. Other advice, which is good, because there's a lot of little things that didn't necessarily fit into any of these major categories. But we'll go through these kind of quickly. One of the things I really wanted to point out was don't fall into this trap of blindly following, you know, whatever tastemakers are saying to do, right? Or even, you'll get into it on on the Reddit or the Twitter or any of these things where people are saying, Yeah, don't learn that. That's stupid. That's bad, right? Angular sucks, or react sucks, or view sucks, like learn react view, or Angular, if that's better, don't fall into that trap. Evaluate things for yourself, right? If you haven't used something, I mean, maybe you can know it sucks to some degree. But if you haven't used it, maybe it doesn't actually suck, maybe it doesn't even have the those kind of negative things attached to it, right? Maybe you don't know why people are saying something is good or bad. For instance, when I first wanted to learn a back end, like language, right, I took a tour of I did Django with Python. I did rails with Ruby. And then I just did express with node. And I tried all three of them. And I saw which one I liked the best. And I actually, to be honest, I think I liked all three of them. But you know, I'm already writing JavaScript for other things. So node is where I went, right. But I did the same thing with front end frameworks. When I first wanted to learn front end frameworks. I tried Angular, I tried backbone, and I tried Ember, because those are the big three at the time. And a lot of people that I respected, were saying to use backbone, a lot of people, but I just didn't like backbone that much, and I wasn't that productive with it. And instead, I picked Angular, which at the time, people were saying was easy, but you know, wasn't, as you know, is able to build complex things, which it was, but like it was, if I would have just listened to the people that I, you know, was seeing online, I might not have picked one that was best for me. And then 10. Instead, I tried them out, found which one spoke to me, I became more productive with it. And I learned a whole lot about all sorts of stuff, right? The fact that I chose those three, I could see that three different approaches. And I could learn a little bit about what's JavaScript and what's caught in those frameworks. And I became a much better developer out of that. So don't let someone else form an opinion for you really know why those opinions are formed and try to dive into it yourself.

54
00:49:14,340 --> 00:51:51,270
Wes Bos: He has people that are really loud about their opinions, when they're saying things suck, or whatever. It's almost always someone who's brand new and is confused. So they're the approach. Like we see this all the time in the bootcamp where people learn how to build HTML, CSS websites, and then they you flip them into something else that's not HTML and CSS, and it's a little bit harder. And then they immediately say, this sucks, or I hate the way that they do this. And it's like, obviously, you're not so well, like, you obviously are not so into the industry that you you can talk about stuff like this, it's it's that it's you. It's not the technology, it's probably you or its people. There are people out there that are very outspoken and are very opinionated about how things need to be done and have lots to say about how how other people suck at it. But in general, most things are pretty good. And you probably shouldn't listen to people that are saying, When something sucks, right? The same thing with a blog post, if you're the blog post is related name, like, don't use x. Use why instead, or if the whole like title of the blog post is why you should not do something, it's probably not something that you should be reading, it's you should be reading blog posts that are like, Here is why I love to use this right. And they can detail into like the different features of what they haven't, obviously, compared against different frameworks. But this shouldn't be the only goal of it. One of the tip I have here is focused on soft skills as well. So if you want to get a good job, if you want to go far in this industry, tech skills aren't the only skills that you're going to need, you're going to need good time management skills, if you can learn how to get really good at getting things done GTD mindset, if you know how to send really good emails, if you can send short like, I'll tell you a lot of the emails I get from beginners versus very advanced developers, the emails I get from beginners are brutal. There's no spaces, there's no punctuation, they're way too long. It's just a wall of text. It's poorly formatted. So there's a lot to be gained there. Whereas if I get an email from like, next week, I'm going to alera Khan and the developer behind Laravel is Taylor otwell. And the shortness and briefness of his emails is amazing. I don't think I've ever gotten more than three sentences from that guy. And it's because he's so good at obviously, being a developer, but his his communication skills are probably some of the best I've ever seen. Right? So it just goes to show that you need other soft skills to go along with your, your web development.

55
00:51:51,450 --> 00:53:24,510
Scott Tolinski: Yeah, yeah, definitely. One of the other things we had in here, we always still talked earlier on the show about having a mentor. Having a mentor was such a big thing for me, so much of the stuff, Mike, my learning was accelerated so much by Ben Ben chef, who like who was my boss, but you know, I'll never never forget, it was like my second week of work. And I had never done a Drupal site ever. I had, you know, done WordPress, or whatever. And we had like a major client work. And we were, you know, sort of just got a new client or whatever. And he was sort of like, hey, do you want to do this Drupal site? And I was just thinking, I don't know how to do any of this stuff. He just like had total faith in me to do it. I was just like, I guess Sure. I will try to do it. He was like, No, man. It's cool. Like, if you're on anything, I got you. And sure enough, that like mentorship, you know, after that that site was done, I was so much smarter than before, because of all of the things I could learn from him. And if I had any questions, just shout it over. Hey, man, like, how do you like what am I doing wrong here? Can you can you take a look at this. And even if it was dumb stuff like, hey, in your PHP, you add a colon instead of a semi colon. Now the whole thing is white screening and because you don't know how to look up the errors, here's how you can look up the errors to solve this problem. Next time having a mentor was so huge for me I cannot stress this enough is a big deal. And it often works best if they're your coworker or boss or anything like that somebody was got the time to help you out with that stuff. If you've got someone at work who's willing to take that time with you, that is like invaluable in my mind.

56
00:53:24,960 --> 00:53:30,420
Wes Bos: Awesome advice. I think that is it for me. Do you have any last little nuggets you want to drop?

57
00:53:30,690 --> 00:53:57,840
Scott Tolinski: No, keep your well I guess I I said no. And then I started saying one. But yes, keep your mind an open vessel. We always say this before the student mentality. Even if you think you're big badass over here, keep your mind and open vessel your student. You got to learn stuff constantly. We're all beginners in something, right? Absolutely. Just keep on expanding your learning left and right no matter what. But that's it. Yeah, I got nothing other than that. Um,

58
00:53:57,840 --> 00:54:07,950
Wes Bos: do you have a sick pic? I do and it's a more of a sweet pic. Have you ever hear I'm gonna show you I have you ever drank this before?

59
00:54:08,130 --> 00:54:09,780
Scott Tolinski: I've seen the cans. I see.

60
00:54:10,170 --> 00:54:10,830
Wes Bos: Yeah,

61
00:54:10,890 --> 00:54:15,960
Scott Tolinski: I don't know. I don't love their branding. So I never like caught my eye

62
00:54:16,170 --> 00:54:32,190
Wes Bos: cvrs we say in the Canada Zed via Zed via anyways it's a pop or as as you say down south it's a soda. Yeah. Or I learned that some people in the states like a weird I don't know where this is but they say coke for everything when it's a coke.

63
00:54:32,309 --> 00:54:38,730
Scott Tolinski: I don't know it's I feel a large part of the country but I'm not quite sure where I'm from Michigan. So we say pop. It's always hot for us.

64
00:54:38,760 --> 00:55:42,000
Wes Bos: Yes. Pop this. It's pop on this podcast anyways. It's a pop and you can get them in. They have like a root beer and I'm drinking the black cherry one right now. And what it is is it's a zero calorie soda that is sweetened with stevia which is pretty good and they taste amazing and to go even further. They're all clear, but they all tastes like They're like big bold flavor like this isn't Lacroix where it tastes like you dropped a bit of shampoo in your water bottle. This is like bam, it's got some flavor to it. So I bought a whole bunch of them I very rarely find them in Canada and I found them at like one of these new grocery stores near us and I bought a whole bunch and they taste great. They're not not cheap. So it's only a treat for me but I've been really enjoying it so it's called z via it's a soda that's sweetened with stevia and if you don't know stevia is like a it's like us and a non calorie sweetener but it's like organic and it's it's not like aspartame or something like that. So it's supposed to be better for you. We'll see if I die from drinking these will see

65
00:55:43,500 --> 00:55:45,630
Scott Tolinski: taking you right to flavor town

66
00:55:45,690 --> 00:55:50,280
Wes Bos: that's what about you any sick pics?

67
00:55:50,340 --> 00:57:49,080
Scott Tolinski: Yeah, I got a new camera which you're going to start seeing in levelup tut's videos this coming month with my new set at some point maybe I have a new set a new sort of system well it's funny because Western I do a video chat while we do this and I don't like my I took my entire office apart trying to build this new studio and then the table the tabletop for my desk wasn't in stock. So my whole studio is a complete in shambles. I'm like pushed up against this wall back here. And so I am just like ready to get this new set going. But piece number one of the new set was my new camera which is a Sony A seven, three, which let me tell you is a mirrorless full frame camera from Sony that if you are involved at all in the YouTube photography world or anything like that, you've just heard people raving about this camera non stop. I got it specifically to shoot 4k for me. But I just took it to her vacation and Aspen and wow, these photos are incredible. You can see some of the photos I've been taking with this thing on my Instagram account. This camera is unreal. The video is unreal, the photo quality is unreal. And it all makes you It makes it everything very easy and makes me look like a good photographer, which is that's a skill in its own that this camera is doing for me somehow. But yeah, I absolutely love this camera. I've had it for a couple of weeks I've shot some video I've shot some photos. And yeah, I have could not be money better well spent on a camera. So if you're looking for a new digital camera for shooting really high quality video does low light really well. Just overall the pictures insane. If you're looking for a brilliant new camera, I would drop Canon or any of those companies and go right for this Sony, the Sony A seven three is incredible. All you have to do is YouTube, Sony A seven, three and watch some of the reviews. And you'll see just why people are raving about this thing. It's awesome. Big, big fan.

68
00:57:49,260 --> 00:57:59,730
Wes Bos: Wow, that's pretty cool. I'm looking on Amazon and you can buy it with like a live streaming box. I know pretty cool to be able to like use a nice camera as a webcam.

69
00:58:00,000 --> 00:58:30,300
Scott Tolinski: I've been thinking about this a lot. And if you know the answer to this question, please let me know. Do you need one of these live streaming boxes? Or can I just feed the camera in to my computer? If you know the answer that hit me up? I'm sure I could Google just as easily. But yeah, I have been thinking about that as well, especially since I'm going to be doing a more permanent, like a set setup. If I could have this camera be used for my live streaming and stuff like that. I'm going to be doing a lot more live streaming. So yeah, definitely something that we should look into

70
00:58:30,600 --> 00:58:34,590
Wes Bos: sec back. Any shameless plugs today? Yes.

71
00:58:34,620 --> 00:59:33,810
Scott Tolinski: levelup Pro is the subscription service from level up tutorials. I get a lot of questions about level of pro because it's 19 bucks a month, or 1999 a month, and my series are on sale for like 29 or $39 a month, right? People are like, Well, why? Why are these you know, do I get access to everything and let me tell you, you get access to everything. If you sign up for the subscription, you get access to every single series that's for sale on the store. And there's a brand new 20 plus video series released every single month. That's a premium series that you cannot get anywhere else. So that said if you sign up for level up pro for the year, you get 25% off the whole price. So there's 12 new series along with the 12 plus pro premium series that are already there, there's so much content there and there's going to be so much so sign up for the year save a ton of money and get access to all the brilliant stuff that's going to be coming down the line. This next course i'm going to be doing is going to be all about Apollo and graph qL

72
00:59:34,050 --> 01:00:33,840
Wes Bos: sweet I'm just gonna plug my stickers just arrived while Scott and I are recording this podcast. I ordered I'm not lying 180,000 stickers. It's 10,000 packs of 18 stickers. Yeah. Which is crazy. That's a lot of stickers. They will be up for sale probably not for a couple more weeks as I have to go on vacation yet and and And come back and it takes a little bit to prep all this stuff but just for everyone asking, they are coming, they will be soon I ordered tons of them. So please don't email me asking when they will be out hopefully will not sell out as quickly as it did last time. And I will I will be sending out an email to everybody who's on my list as to when they're available. And if you're not on that just sign up for any of my free courses at Wes Bos comm forward slash courses and you'll be you'll be put on my list. I think that's it for today. Thanks so much for tuning in and we'll catch you next week. Thanks.

73
01:00:33,840 --> 01:00:34,380
Unknown: Please, please

74
01:00:36,660 --> 01:00:46,440
Scott Tolinski: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

