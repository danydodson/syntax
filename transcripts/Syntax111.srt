1
00:00:00,359 --> 00:00:21,330
Unknown: Monday, Monday Monday, open wide dev fans yet ready to stuff your face with JavaScript CSS node module BBQ Tip Get workflow breakdancing soft skill web development hasty as crazy as tasty as web development treats coming in hot here is Sarah CUDA, Bob and Scott

2
00:00:23,610 --> 00:00:24,480
Tolinksi ski.

3
00:00:25,950 --> 00:05:00,000
Oh, welcome to syntax in this Monday tasty treat. We're gonna be talking about tidying up your code and why it's important, why you should definitely take some time to look at old code, look at code that's been there, or even look at code that you're currently writing. And well just make it better for you and your team. My name is Scott Tolinksi. And with me, as always, is Wes Bos. What's up? Hello. I'm excited to see what parts of my code bring me joy today. Yes, I'm excited to talk about the code that brings me joy as well. And something else that brings me joy is sentry.io which is an amazing way to track all of your errors, exceptions and bugs. Now, Sentry integrates with so many things that you already use in your tool chain and it does so in such a great way such as GitHub, Heroku, Slack, Bitbucket JIRA, HipChat, get lab, just as so many integrations, if you head on over to sentry.io forward slash integrations, you can see all of the amazing things that they connect with. And one of the things that I really love to use Sentry with to integrate is directly into my GitHub issues, I have a bug, I can just click one button, and it goes ahead and creates a GitHub issue based off of that bug, it can reference it within Sentry, and my team can keep track of any sort of issues. Now, there is some serious connections to a lot of different stuff. So again, I highly recommend checking out that integrations page and seeing just about everything that Sentry can possibly connect with. So head on over to sentry.io. and sign up today using the coupon code, tasty treat, and you will get two months free of century now I highly recommend this is one of those services that once you start using, you're not going to want to stop once you once you pop the fun don't stop as they do say so check it out. century.io coupon code tasty treat all one word lowercase. Awesome. All right. So we are getting into tidying up our code. So if you didn't hear the last or two, two episodes ago, Scott was talking about the new Netflix special from what is it? Marie Kondo Yes. And she has a Netflix special called tidying up. And she also has a book and it's just this kind of like, Japanese method to approaching tidying up your house. And Caitlin and I sat down and watched a couple episodes the other day, and it just makes you want to throw all of your stuff out makes you wonder all of your stuff out. That is very, we only could watch one at a time, though, because it stresses you out so much with like how some of these houses are just terribly messy. Definitely. Yeah. But that's what we're gonna do today, but with our code, so we're gonna approach some tips and tricks to tidying up your code. So if you've got maybe a couple hours here or there that you want to spend some time on improving the code quality, these are some tips that you can use. So I want to kick it off there. Yeah, absolutely. And I think we have a fun little structure for this episode, I think it's gonna be pretty fun, because we're sort of following a lot of the things that she does in both the show and the book. So first thing we wanted to talk about was removal, we're going to be removing things that are in our code base that we do not need. Now, this one should go as sort of common sense, right? If you don't need some code, then why would you have it in your application. But in reality, we all know that that's not the case. And and as time goes on, you end up with thing after thing that maybe you are going to use or you thought about using or you installed this library, and then you changed it, or maybe you never even, maybe you never even took off the idea that you thought about and then before you know it, you got all this stuff in your codebase that you're not actually using in any sort of meaningful way. And one of the biggest ones, and this is an needed comments, right? How many times have you had a block of code, and then you're thinking, yeah, this block of code is a hunk of junk, but maybe there's something in it that I want to be saving for later. So you copy it, you comment it out, and then maybe you rewrite it. And that commented out block just sits there and sits there and sits there, I like to think about is like something you put in the back of your closet, right? You're thinking I'm gonna I'm gonna pull this out again, at some point in Union almost never do. And if you're using some sort of modern version control software, if you ever need to pull that out of your closet, you can pull it out with the version control, you can go back and look at that commit. So delete any commented out code, do not leave commented out code in your code. It's bad. I agree. I think my one tip there

4
00:05:00,000 --> 00:08:19,830
is when you delete it, make sure that the commit is just for deleting that code. Yes, it make sure you make the commit very descriptive as to what you are removing, because there's certainly in the past done that and not been able to find the commit where I did remove that code. And it's a bit frustrating. So making sure that you can easily reference it later, something I can't even remember what it is off the top of my head right now. But somebody like showed me an app the other day where you could put these pieces of code up where you're not necessarily using them. Yeah. I was like, Yeah, well, if you hold that, maybe we can find it. We just took a look around for it. And we think that it was on Product Hunt somewhere or on Twitter. If you know what this app is, let us know, obviously, there's lots of other applications that you can use to organize your code snippets. But I think like just dumping code that is not useful for you in your application, but in some sort of app would be helpful, or even like as a GitHub private just would be would be helpful as well. Yeah, I put them in just all the time. Yeah. Awesome. Also, another thing you can remove is unused CSS. And this can be a bit of a tricky one, if you don't necessarily know what unused CSS is there. There's a bunch of tools out there. The Chrome dev tools now has a audits tab that will show you this. And then I think there's some other tools. Yeah, there's a handful of extensions and tools and libraries for your build system to and there's even some things in your I don't know, like in Webpack, or whatever, that can just automatically remove unused selectors, but I don't know, I haven't used them. So I don't know how much to trust them. Or if you should trust them or any of that stuff. Yeah, that's a tricky one. I think that's the beauty of using like JavaScript modules and even CSS modules where if you have a or even just like importing CSS files into your your sass process, because if you no longer are using that thing, then you no longer make it into the final build. And that's beautiful, because you don't have to sweat it as well. I always remember going into websites, where I had lots of extra CSS and lots of extra JavaScript. And I didn't know if it was used or not, it was fairly large website, there's been seven or eight developers through the website before me, it's just it's tough to know that. And I think the tooling around that is getting much better, because it's almost impossible for a developer to go through that unless you were to have like, a regression, a visual regression test built into every single page on your website. Yeah. And like cleaning your house, the longer that you wait to do something like that, the worse and worse it gets. And the harder it's going to be to do a full redo. So putting it off only makes it worse. And in the same regard. There's you know, occasionally unused functions and things like that in JavaScript that Yeah, potentially being rolled into your final bundle, right. If you have some utilities functions that you intended to use, or or you're not using, you're not splitting them out properly, or you're just you know, stuff that you're holding on to that you think you might be using, you don't need to keep it in your code. Again, you can put it in a just somewhere, you can save it somewhere else. And you can have it there for when you need it. last thing you want is a bunch of extra code that is being downloaded to your user that's not being used, right. I mean, I think that's just a big thing. So do you have anything else for removal? No, no, I think we should move on to the next one, which is organizing. So once you This is the the whole Marie Kondo thing is you put all your clothes on the bed, and your you remove the stuff? Oh, and the hilarious part we forgot about removal is you have to thank it for your service. So

5
00:08:20,880 --> 00:09:59,970
I kid you not. I have done that. watching this show. I have on ironically done that. Oh, thank you for what you have done for me coding, I know, a great shirt. Thank you for being a fantastic date parsing function. Yes, you've done your work as well. So once you've thanked your functions, it's time to organize the ones that you want to keep around. And this is this is a really good one. Because when you start a project, and maybe one or two years in your code base can look drastically different. And sometimes when you start a project, it's not necessary to have like a very rigid structure, or you don't even know what that structure might look like. So I think it's important once you have lots of code to refactor it into just like not necessarily changing the code, but just moving them into different files and folders into a system that works for you. And who better to talk about this, then Scott, who is master of refactoring? Yeah, I mean, one of the keys to this, too, is having tests and in that process to make sure that you're not breaking anything, but I do I love to re evaluate the structure of my project in different ways all the time. Maybe look at areas that should be broken out into their own fault. Like maybe I have one folder that's now got 20 files in it, right? And I'm thinking are all of these files truly related that closely? Is there some sort of other more tight relationship that I can store these in to make it maybe a little bit easier to find or understand so I definitely love looking at my my structure and sort of where things fit best and I'm not afraid to change that stuff, because it can be better and once it's better, it's easier to find it's easier to now

6
00:10:00,000 --> 00:12:23,910
And understand it's easier to add on to. And sometimes there's a, you know, we've talked about this before with an index file where you can have an index js file that imports and exports things so that well, instead of importing from a file, you're then importing from a directory as a named import. And this can be really super cool. But again, it started not great for code splitting. So I pretty much only use this for things like styled components. But sometimes an index file is cool. And I think sometimes, I think, well, some systems can really benefit from it. I know some people definitely overuse it. But you know, whatever works for you, again, it's your system is your project, it's your code, you want the system to be something that works for you and your team, not for me, or Wes, you know, what I'm saying, totally else for organizing as well just also know when to break out your components, things into a new file, when to create a new component, when to create a new file with functions or whatever. Maybe this thing's just getting a little overboard. Like, for instance, I had, you know, all of my subscription functions, or my mutations for subscriptions, right. And there's a whole bunch of them. But then I started looking at them and thinking, Well, you know, a lot of these mutations of these functions, they're not actually doing anything with subscriptions themselves, they're actually doing something with the customer object. Some of these things are doing something with the user object. And it makes more sense to put these into a different file. That's all, you know, user based or customer based. And then while the subscription, one just got a lot lighter, a lot easier to manage, and a lot easier to parse where I'm going because they're actually not that closely related. So being able to take a look at things to know when to break them out into their own file when they keep them in a larger file. And I think that's a skill that is maybe something to just keep on looking at. Absolutely. Last one we have here is tidying up. So this is where you actually go in and start to refactor some of your old code. So Scott and I are obviously big fans of map filter reduce on this podcast, anytime I can tear into a any piece of code, maybe it's a for loop, maybe it's something that someone used unnecessarily use something like lodash for my haven did this on the Was it the Gatsby blog starter? Yeah, they had used the lodash. And they had used a couple other like, unnecessary dependencies with the for loop. And I went in there, I was like, Oh, hold me back. I refactor everything to map filter reduce. And I did I submitted a pull request, I was really happy about that. So he's

7
00:12:25,980 --> 00:15:00,000
anytime that you can, you can do that you can often bring down the complexity of your code, as well as the the amount of lines of code that you have. Yeah. And I have a note here that this is not not ironic. This is not ironically, does your code spark joy? Like, I know, you could say this as a joke, and it is sort of a joke, but like, at the same time, how many times have you opened a file, and I've just been like, ooh, I don't really want to work on this particular thing right now, because it's, it's ugly, it's a tangled mess of functions, and blah, blah, blah. Or maybe it's one giant function that you know, is very scary to you. Or maybe the CSS itself, is just a tangled mess of who knows what, or whatever. I mean, they're there, we've all had times where we've opened a file and just sort of dreaded working on a particular piece of code, because maybe you don't know what's gonna break, you don't know, you know, it's just no fun to work on. So for me, I like to think about things like this. I don't like to have sections of my codebase that I would dread working in, I like to have all of the aspects of my codebase to be something that I would enjoy writing or expanding upon or using again, I can tell you offhand, right now, like maybe two or three files that I'm just not happy with right now. And I think most of you may be can have those gut reactions as well. So does this does this file make you afraid of it is a good indication that you need to start going through it? Yeah, yeah, absolutely. I think kind of on the same thread as well is think about other developers who will be going through that code at some point. And it might be a good time to, like we said, refactor it. And I just say like, because code is long, and it gets shorter. That's not necessarily always better. Because it could be just much harder to comprehend, and much harder to understand what's going on. So in that vein, I would say make sure you go and add comments to your code. I know there's people out there that say like, your code should be self documenting. And it should make sense and I don't buy that one bit. I think good comments in code explaining what's happening. edge cases, why you do things a specific way, are extremely helpful, both to your future self as well as other developers. Yeah, there's always times when you're writing the code, and you're like, I know exactly what I'm doing right now. And I'm going to know exactly what I did here next time I look at this and then the next time you look at it, you're like, Huh, what did I do? Why did I make these choices? I was like, whatever. Yeah, yeah. So I made a good comment and you don't have to go overboard but a good comment is going to help in one of the here's a here's a hot comment tip. A hot comment. Tasty tip is to use the better comments. The

8
00:15:00,000 --> 00:20:00,000
Code extension. It is magnificent. It gives you different color coded commenting system. So if you have an exclamation point and makes the comment read, if you have a question mark, I don't there's a whole system to it. And I use those non stop, especially for things like to dues or Yeah, warning you answer. Yeah. Yeah, I love that, that VS code plugin you can do to do and it makes it orange, you can do put a star and it makes it green, which is important info, you can put a bang, which is exclamation mark, it's that that'll make it like an error. And then you can put a question mark in it, I'll make it slightly lighter. And then you can also put another comment in it. So if you comment out a comment like double comments, then it will just cross it out and make it really dark. So you're not necessarily seeing it huge fan of that Codex. And I'm not always a huge fan of things that are editor specific like that, because they're still comments at the end of the day, but the person has to have that thing installed in order to actually see the colors but it degrades so nicely. Just to regular comments for anyone else. It's so nice. Um, another thing that we have here is, we were joking that this is like the folding your clothes aspect of this whole thing is using a code format or like prettier and es lint, or something to check your accessibility features, like and especially in IE es lint or any of those things, because you can sometimes you can set them up to auto format or whatever on Save, you click Save, and everything just looks pretty. Looks nice. I folded all of my clothes and the Marie Kondo method. Now every time I opened my drawers, it sparks joy, and I feel great about it. So this is this is so fun to me. Because Yeah, again, when you when you save a file with prettier and it cleans it all up. You're just like, Yeah, I like this. It looks nice. Yeah. Here's a question when when you're adding prettier or Yes, lint to a project that previously had not had it? Do you do the entire project in like one commit reformat at all? Because the sort of the downside to that is that you you wreck all of your get blamed? Yeah. Or do you just do it as you you edit a file, you just kind of save that file, and then that file gets updated for formatting. I do it as I edit a file. And I would assume that there's still files in my code base that have never been touched by my current ies lid settings. Like sometimes I open up a file that I haven't touched in like, a little while, and there's just a bunch of red underlines, and I'm like, Okay, this does not adhere to my new formatting rules. I'll take the time to clean it up right now. So no, I don't do the whole project at once. I'm actually kind of scared of that. Yeah, I do it file by file as well. Because in addition to prettier formatting, I often will get Yes, lint errors. And then I often like to take the time to figure out like I really like yes, lint errors, because it tells you why it isn't you have to go and research, why is what I'm doing a bad thing. And then you go and research it and you you make your own decisions. And you either turn that rule off, or you rewrite the code to actually fix it. So I really like that as well that that helps you both get a better code base, as well as continually build your own es lint settings file, that is exactly how you like to code Exactly. Next thing we have in here is going to be our little last one here is our CSS and we all know CSS can grow to be a giant monster, especially if you don't have a system from the beginning. And maybe or you don't have a team that develops the system. Or maybe you had a system. And it's been two years since you wrote that system. And now the the application no longer just has this and that but it has this that that and the other thing and a billion other things. And then you have a whole bunch of exceptions, a whole bunch of patches to your CSS. And before you know it, it is crazy. So CSS is one of those things that every once in a while, if you can take the time, reevaluate your whole system, look at it through fresh eyes and see if it can be more elegant. If you rewrote it from scratch. And then that's like, that's a big commitment. It's a big, big, big commitment. But even just seeing how you can keep and maintain a system. Or if you don't have a system, see if you can initiate one, it's gonna it's going to make things way, way better. It's going to make your file sizes smaller, it's going to make your code work better. And I think there were there was a really great talk from Nicole Sullivan on object oriented CSS. It's not necessarily I don't know, it was a while ago. And she you know, is sort of famous for going into Facebook and really tuning up their CSS and saving them a monstrous amount of kilobytes and megabytes and all that stuff. I forget the blog post well, but look for it. But I think there's just that's definitely worth a look at to see how you can organize and keep your CSS in a better way and maybe reevaluate it. Yeah, this this is from Nicole Sullivan, who sort of like pioneered the whole idea of object oriented CSS, this is before bam, or any of the things that we had and I was just looking at the date on this thing. It's February 4 2009, which is means it's almost 10 years old, amazing. I remember when this came out, a lot of us are just starting to pick up these CSS principal.

9
00:20:00,000 --> 00:20:59,010
pulls where we're using some sort of system, whether it's CSS and j s, whether that bem and this was 10 years ago, which is way. So she obviously she pioneered a lot of what we have today. Yeah, for sure. Yeah, I would just didn't stay he Tran of her work for so long. So definitely check out everything she has to post on CSS. That's pretty much it. I mean, you know, your code, like any other physical space you're in, the worse and worse it gets, it can feel like it's like the walls are closing in, right? It feels tighter, it feels harder to work in. It feels like less fun. And even though you know, this whole maybe spark joy thing could be viewed as sort of a joke. It's, it's not really if you think about it, it really can affect your day to day life. And I think it's important to take a look at some of your code and see if it can be better. Great. Well, thanks for tuning in. And we will see you on Wednesday already. Please

10
00:21:00,900 --> 00:21:10,680
head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

