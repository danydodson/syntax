1
00:00:01,319 --> 00:00:10,560
Unknown: You're listening to syntax the podcast with the tastiest web development treats out there. strap yourself in and get ready to live ski and West boss.

2
00:00:10,589 --> 00:00:17,300
Wes Bos: Welcome to syntax. My name is Wes Bos. And with me is Scott to linsky. How you doing today, Scott?

3
00:00:17,390 --> 00:00:49,560
Scott Tolinski: Hey, I'm doing super good. Just hanging out here. We're live streaming this episode. Yeah, on YouTube for the first time ever, just to try it out. So hello to every single person that's watching right now this is pretty sweet. And if you didn't catch this one, we might do this again in the future. Who knows? A little behind the scenes look into syntax right now if you're on the YouTube, but yeah, no, I'm hanging out, man. I'm doing good. I'm just, uh, I'm ready to kick it off. I'm really excited about this episode in particular, because as we were doing the notes, I was just like, yeah, this is good stuff. So I'm,

4
00:00:50,519 --> 00:01:44,910
Wes Bos: I'm doing really, really well. I'm sitting in my office with the webcam on everybody's asking about the boxes of stickers that I have behind here, those nine massive boxes of stickers, they are currently being processed to take out a trademark infringing sticker. That's all I'll say about that. So let's, let's jump into it. Today, we're gonna do the 11 Habits of Highly Effective developers, I thought this is kind of a fun one to do. Because there's obviously that book, which seems super cheesy, I think it's like the 10 habits of highly successful people. It seems cheesy, but it's actually a fantastic book, I really enjoyed it. And we thought we would sort of put together 10 habits, but we didn't have 10, we had 11. So it changed the name, because we do what we want over here. So we're gonna go through them and kind of riff on on each of them. And hopefully, these are some tips you can pick up us to how to apply them to your own career.

5
00:01:45,029 --> 00:01:53,850
Scott Tolinski: Yeah, so we have seven, or how many? How many did we land on? I know you just said it, but like a lot? Is it totally 11? Officially 11? Well,

6
00:01:53,879 --> 00:01:57,480
Wes Bos: yeah, cuz we're using an ordered list here. So yeah, I don't know. Yeah.

7
00:01:58,680 --> 00:02:37,470
Scott Tolinski: Cool. Well, this episode is sponsored by, it's sponsored by one of our longtime sponsors, which is Freshbooks, which is the easiest way to get your cloud accounting set up. It's seriously an awesome service. And it's also sponsored by Sanity, which is a bring your own front end sort of API as a service, allowing you to build in structure and content and everything and allowing you to worry about the front end without having to worry about the back end is really, really cool. We're gonna get into a lot more about both Sanity. And Freshbooks. Later on in this show is 38 inches, man. Yes. 38 inches.

8
00:02:38,130 --> 00:02:42,530
Wes Bos: I opened up the soundboard. Just for a little old time sake on this.

9
00:02:42,900 --> 00:02:47,250
Scott Tolinski: Yeah, yeah, you gotta bring it back. It's for the for the big show big like, awesome.

10
00:02:47,610 --> 00:04:10,169
Wes Bos: So let's get into it. First tip we have here and these are in no particular order, the just the order in which we thought of them. That first tip we have here is that you understand stakeholder and business goals. And this is something I talk about a lot when we talk about freelancing. But I also think it's important for someone who wants to be a good developer. If you want to do really well in your organization, if you want to do really well for the product, or the website, or the application that you're building, you need to understand like, Who is this website or web app for at the end of the day? And what are we trying to accomplish? Because all too often I see people, they get caught up in their own like mama drama about frameworks, and, and all that stuff. And the frameworks and everything matter, they matter for you as a developer, so you can do your job quickly. So you, you don't get too caught up in, in technical debt. That's a really, really important, but they matter because you want to make sure that your end goal and generally that's a business that's trying to make money or or an organization that's trying to get their point across I've given the example in the past, I worked with a food bank website. And the end goal is how do we get people to to the information to use the the food bank, as well as how do we get people to donate goods and money towards this? So I think that's really important understanding stakeholder and business goals.

11
00:04:10,230 --> 00:06:19,260
Scott Tolinski: Yeah, it's easy to lose track of that, too, especially when you're at the lower rungs of maybe a large company. I've worked for at least one agency that had like 2000 3000 employees, and it's really well you know, when you're one of those 2000 3000 employees, or even more than that, it's not always easy to see exactly how everything that you do, like lines up to a core goal of this organization. Maybe this organization is huge, right? But it does every every time that you're you're doing anything with your your job, it is for a reason. I mean, they hired you for a reason. So it's really important that you you understand what your role is in that business and that you do take ownership of that. I mean, obviously, whether or not you do have ownership over that is sort of dependent on how the company views you as an employee, right like that. views expendable. And maybe it's not easy to feel that way. Maybe, you know, you're purposefully not feeling that way. But yeah, at the end of the day, everything you do is you're there because you were hired to do it. Yeah. Number two here is that you are curious and always learning. Now, this is one that we talked about all the time on this show, and this sort of student mentality and always wanting to learn and always being curious about that next thing, because that's what drives us forward, when you lose your curiosity, you lose a little bit of that spark. And when you lose that spark, you sort of lose that drive to improve, you lose the care that you put into your work, you sort of lose any of that stuff. That is really what makes you a good developer at the end of the day. So if you want to continue to grow, you want to continue to learn, you want to continue to be effective. As a developer, you kind of always have to be curious and excited about what's new, what's in the future, what you can be doing, maybe, and maybe it's not something that's new, like tech wise, like maybe not something that just came out, but maybe something that's new to you, maybe you've never done this technique or this technique? Or maybe you wanted to clean up your code or do this or a little bit of that. But at the end of the day, like you have to be curious, you have to be excited about what you're doing, and grow that so that you can be good at what you do.

12
00:06:19,290 --> 00:07:16,140
Wes Bos: Yeah, I think curious is the the best way to describe this approach to learning because you can certainly overdo it. And there's certainly a lot of people who are feeling overwhelmed with all of the different things that are always changing and feeling like they need to learn absolutely everything. We've talked about that in depth on this podcast already. But just always kind of just finding like, Hi, I wonder if I could approach this a better way, or Oh, someone has proposed a new technology or new solution to this, I'm going to take a look at that. And oh, it's just kind of having an open mind to whatever it is and, and always having like some sort of project that you're working on, whether it's a side project or something of your own, that will keep you sharp, because we all know that in your day job you could run into you run into these things where you're just working with the same tack for three or four years, because that's the stack that you're on. And that gap between what is relevant and what is is new. And what you're working on can sometimes get a little bit too big.

13
00:07:16,260 --> 00:07:35,370
Scott Tolinski: Yeah. And that's one of those things that I can't I can't count the amount of times when I was working at agencies where my my hobby projects and like my extra time stuff was the things that were keeping me excited about what I was doing. It wasn't the WordPress site that I had made for the hundredth time, it was, you know, the Angular app that I was hacking together for fun.

14
00:07:35,700 --> 00:08:28,890
Wes Bos: Next one we got here is you have an open mind about new technologies, kind of a nice one to go into after the last one. So all too often, myself included, something new comes out. And you say, That's dumb. Why would you do it that way. And the famous example is when react came out, everybody said that it was dumb, because you put your, your JavaScript in line, like in the same file as your, your templates, and we didn't even know about CSS and JS at that time. And I was like, that's dumb, you have separation of concerns. And we were all really happy about how we were building applications at the time. But react came out and just challenged all of those norms, because they have an open mind to new technology. I think some of the best new technologies that have come out are from people who are just questioning, maybe there is a better way, maybe these best practices that we're all spouting off is maybe not the best way to approach it.

15
00:08:28,920 --> 00:09:21,799
Scott Tolinski: Yeah. Can you imagine if react would have launched with j s in component as part of reactor so like, I think there would have been actual rise. I think that's the first time you would have seen developers taking to the streets because people would have been so concerned. But I mean, I agree. I wrote a little note in here. It's like odd foods, like sometimes, or maybe not even necessarily like odd foods that food you haven't tried or maybe just like, aren't accustomed to, like this is going to sound really stupid. But it wasn't until it was like like after party situation, like in college party, and I was pretty. I had a few. And somebody had laid down hummus on the table and I was like, I'd never had hummus and people were like, what? So then I went to town on this hummus. And it was like the greatest thing because I had never had it right. And before it wasn't sound like it's an unusual food. I just never had it. And then at that point, it was game changing to me. I was like, man, I really want some hummus now from

16
00:09:22,399 --> 00:09:39,020
Wes Bos: is the best food to have after drinking. It is totally what we after the bar. When I went to school in Toronto, we would have like Lebanese shwarma everywhere and you just after the bar, you just get this massive shwarma that just dripped down your hand and it's the best thing ever. Yeah,

17
00:09:39,049 --> 00:09:48,120
Scott Tolinski: yeah. See Exactly. You ever know when the technology that you choose that looked scary to you in the past is going to be the hummus of your future. So

18
00:09:49,620 --> 00:09:53,340
Wes Bos: that's deep. All right. Next one. You want to grab the next one?

19
00:09:53,490 --> 00:10:53,760
Scott Tolinski: Yes. The next one is this one's can be scary for a lot of people. And that's you. You are comfortable asking for help. Help. That's not just like hello from your co workers, but it's helping an IRC chat room, it's helping a slack room to help in a classroom. Maybe you're in a boot camp and you don't understand something. And maybe it seems like every single other person in the class or in the world, for that matter understands the topic. Like I don't know, for a long time Redux was just it seemed like everyone had sort of understood Redux out of the box. But there was like a large amount of people who looked at Redux. And were like, wait, I don't know what I don't know what any of this means. And it was hard for people sometimes to look at that and admit that I don't I don't get this right. When everyone else seems to understand this. So being comfortable asking questions in a any sort of setting in a group setting in a digital setting, any sort of way is such a huge skill. It's like a practical skill you need to do, it's just immensely, I don't know, just immensely important to growing as a developer.

20
00:10:53,779 --> 00:12:14,970
Wes Bos: Yeah. Anything able to, to check your ego at the door, and simply just ask for help. Hey, I don't know how any of this works. And I think that's particularly hard in our industry, because of the flip side of that is often when you do ask for help people come out of it feeling like, I'm not sure I'm glad I asked for help. Because you can get talked down to and there's like, maybe if you are that's our next one is you help others. But there there is a right way and a wrong way to approach someone that that is asking for help. And maybe not necessarily even asking you for help. But I don't know being being able to be vulnerable and being able to let others know that you don't have all the answers. No one has all the answers. And there's there's way more people out there that are especially when you get into like a new area, maybe you are having trouble with like nginx your server configure as wrong. Like that's a perfect time to reach out to someone who does this stuff day in and day out. Or somebody is like we got a an email after the domain name episode, we got a domain name from someone who I'm not sure if I'm allowed to say this or not. But it's someone who runs the DNS for a large Fruit Company. And like, so like you must have said, was Apple, the company could have been our Blackberry.

21
00:12:15,480 --> 00:12:16,799
Unknown: Oh, yes, yeah.

22
00:12:17,610 --> 00:12:48,149
Wes Bos: Anyways, I was just like, so like, wow, like, now I have this person in my email that if I ever have a problem with DNS, and not understanding how these things work, like, we were talking about how propagation sometimes takes long and, and he explained how you can like, never have to wait for propagation. If you if you attack it in a specific way, I should go back to the email and mention it because it was super helpful information. So I think that's that's really cool to be able to reach out to experts stand on the shoulders of giants, as we say.

23
00:12:48,299 --> 00:13:40,350
Scott Tolinski: Yeah, I mean, again, it's just it is it's making yourself vulnerable. And if you have ever asked a question and felt like it wasn't well received, that you were asking a question, then it's really easy to feel down and like retreat into that shell and maybe not ask again. But it is it's incredibly important. And if your co workers, your boss, your teacher are good. They're going to accept any question, basically, no matter what it is, and and help you through that. And another I mean, some of the cool things here is that like, if you use a service like fresh books, if you do need to ask for help, they're incredible at giving you that help, because fresh book one of our sponsors today, I'm so good at their customer service. And Wes, you know, firsthand. We've talked about it before about Freshbooks customer service. Do you want to tell us a little bit more about fresh? Yeah, overall.

24
00:13:40,440 --> 00:15:11,789
Wes Bos: So I think like the Freshbooks the company has an like a really awesome approach to dealing with customer service. And I don't know if this is still the the rule, but I think it is is that everybody on the product. Everyone that works at the company has to spend I think like two weeks. I don't know how he however often two weeks a year, let's just say working in support. And I called them once because I was having a problem with HST being like I had inputted HST like lowercase, but also I had HST is the taxes in Canada and Ontario. So I had put it in lowercase and uppercase and like those were registering as separate taxes. So I called them and they they clearly knew what was a problem. And I think I talked to one of the developers on the phone like they pick up the phone, no problem, support was really good. They say no problem, give me like 20 minutes, we're gonna write a script that's going to convert your data all over to one and I think within 1015 minutes, I got an email back from them and it was all taken care of. So their support is amazing. I very rarely actually contact support, but when I do, it's when I'm incredibly frustrated with something and having someone help you out so quickly just makes me feel like oh, finally like, I know I'm not gonna be in the middle of the night taxes are due the next day and something's gonna go wrong. And in this, in this case, it was my problem the way I inputted the data But they still can help me out. So check them out@freshbooks.com Ford slash syntax for a 30 day unrestricted free trial. Make sure you syntax in the How did you hear about a section?

25
00:15:11,850 --> 00:15:33,120
Scott Tolinski: Yeah, you know, I hit like a also like a service issue too when I was like trying to export data out of my bookkeeping software, and I emailed them and was like, how do I import this? And they're like, oh, there is no way to do that. But we'll just do it, we'll fix it up for you. So and they're, they're pretty amazing. I have to say, in my small experience with fresh books, support staff, awesome stuff.

26
00:15:33,149 --> 00:15:33,929
Wes Bos: So really good.

27
00:15:33,929 --> 00:16:18,659
Scott Tolinski: Yeah. So along that same lines is, you know, asking for help is that you help others. And there's, I want to be kind of clear about this. Because there's a difference between like being the know it all that's like you're doing this wrong, like, that's wrong, that that's wrong, that's wrong, and the person who's like offering help, in all sorts of like constructive ways, because offering offering help to your fellow co workers are doing like trainings or Lunch and Learn sort of stuff where you're getting to share your knowledge is extremely important, especially in a non intimidating way where people can ask you questions, or they can just dive in a little bit more to your code, especially if it's something they want to learn. But again, it's not going to be a situation where you're looking over their shoulders and being like, Oh, hey, by the way, that's wrong. You know?

28
00:16:18,780 --> 00:17:34,530
Wes Bos: Yeah, I think helping others, I think I started teaching in person, seven, eight years ago, is a long time ago. And I noticed that as soon as I started to help others through their problems, and to teach other people, my own skill level became so much higher, because I don't know there's just something about explaining topics to other people and, and helping people out and tackling issues that it makes your own skill level so much higher. And it can also, it obviously really helped me in creating all my video content as well, because it allows me to just anticipate what what the needs are and all that stuff with it. So however you help people, whether that's answering questions for people, whether that's doing something very publicly like blogging, or YouTube videos, or just something smaller, like mentoring, I know there's a lot of people who do just one on one mentoring, and you're not gonna get a whole lot of claps for something like that. But that to that one person who you are mentoring and, and helping them transition into this industry, it probably means the world for them. So however it is that you feel most comfortable helping other people, whatever it is, it's I highly recommend that you, you find a way to do that.

29
00:17:34,650 --> 00:18:03,750
Scott Tolinski: Yeah, yeah, absolutely. And I mean, you you mentioned some things like, like YouTubing, and blogging and stuff like that, and even like answering StackOverflow question. So you can be sometimes Stack Overflow turns into like, a competition is like, who can get to this one the first. But yeah, at the end of the day, like the goal is to be helpful to people. So you, you want to make sure that whatever you're doing is providing help where people need it, not like just trying to appear smart. I think that's a that's a big thing I want to I want to get across

30
00:18:03,780 --> 00:19:08,570
Wes Bos: Yeah, cuz that's, that's another thing I see all the time in volunteering for, like I used to volunteer for ladies learning code for I used to teach at a boot camp called hacker U. And you would, you would find that there was some people that would help that they were really excited about helping but they're just a little bit overbearing. And it was like we had this like, ask for help thing. And then people would like send like private slack questions to me and be like, hey, like, Can you help me like, I don't want to put myself out there because I don't want X, Y and Z to come help me out. Because they're a little bit overbearing, and then they just like, get they get flustered and whatnot. So I think the way to get around that it's just to keep helping more and more people go volunteer for some weekend thing. There's tons and tons of kids learning code, or ladies learning code, or lots of refugee boot camps. There's so many amazing things out there that need someone to give out one Saturday, every six months, they volunteer for this kind of thing. People in the chat room are all saying that they are helping out in boot camps. I think it's such a valuable skill to have.

31
00:19:08,730 --> 00:19:11,790
Scott Tolinski: Yeah, absolutely. All right, what you got the next one?

32
00:19:11,910 --> 00:21:17,600
Wes Bos: Next one is you have a problem solver mentality. So this is a good one. Because software is you're solving problems with software. So someone comes to you with a real world problem and says, How can we make this faster, better, stronger? Whatever it is, how do we automate this task? How do we help our customers who are frustrated at this problem with technology? That's what technology does, right? So there's that piece, but then there's also the piece of like, writing software causes lots of bugs and causes lots of issues and you have to be able to debug it and figure it out. So if you are someone who gets easily frustrated at problems in whatever or being able to to blame things really quickly on that stupid way that this works is dumb, and whatnot. It's, it's not that you can't be a good developer. But being able to work on your problem solver mentality, I think is really important. And being able to break things down into testable components, being able to pinpoint an issue. Sometimes like I see this all the time in, in the real world, I told the story a couple podcasts ago how my daughter was in the hospital, and the lady with the the testing computer couldn't was wiggling the monitor cord when the computer was dead, right? Like, there's just lots of times in the real world, regardless of if it's computers or not, that people just see, oh, it's broken. I don't know where to start, like, what could it possibly be? Whereas like, for me, like, I'll give you a stupid example, we were at a rented a cottage, and the hose wasn't working. And forget who was trying to use the hose. Oh, it doesn't work. And then I'm like, okay, it does. Okay, first, is it the? Is it the actual host thing? No. is the host getting water? No. is the if you turn this on the other way? Is that going to pull water? No. So you just kind of keep tracing it back until eventually, you found a little knob that you had to turn on. And that push the water right through the hose. Right? It's kind of like be able to follow the trail of problems until it is that you can find out where the problem is. And then fixing it is a whole nother problem.

33
00:21:17,670 --> 00:23:33,810
Scott Tolinski: Yeah, yeah, I mean, isolating the problem. And following that trail. And like, those are all such huge, huge skills in this. I mean, because especially when working with code, knowing where to look and knowing what to remove, like you start pulling away things that don't matter, until you just narrow down exactly like what is the singular item that is causing the problem. And then you can dive into that item and figure out why that item is not working. Now, a lot of people don't know this. But before I was a dev, I worked at a University of Michigan, and I was doing AV work, essentially. But I worked at the hospital. And what I was doing at the hospital was someone, I was running lectures for doctors, and there's nobody more technically illiterate than doctors. For some reason, the doctors would be like, I have this USB key and there's this USB port, but I don't know what to do with it. Should I put it in the port? I don't know how I don't know how this works. And like, okay, you just put it in the port. Now it works. Okay, there you go. Congratulations. But so like, that was my job most of the time was troubleshooting. And now this is a huge one, because it's under pressure, right? You have a lecture full of doctors whose times are like, yeah, their time is so important and special, because you know, all the stuff they have to learn and do and whatever. They're constantly running back and forth. So when they're sitting there, and some AV tech isn't working at this lecture hall, like you have to get this done with all these stairs on you. So that was like such a master class for me. And like being cool under pressure when everything is working or not working. And you know that you can probably solve this problem in any sort of situation or normal situation. But it's the same thing in web dev when the server's on fire, and you have marketing and you know, your PMS like screaming at you because of some, you know, bug. Yeah, it's important to keep it cool because your brain is not going to function well, when you're not keeping it. Cool. So I think that's such a huge thing. And this is an interview question I get asked a ton is like, what are some situations where you've been under a high amount of stress and had to troubleshoot a problem? Now luckily, I've had a lot of experience doing that. But it's a huge thing. And you want to think about situations in life where you've had that and when it would have helped to just like remain calm rather than actually freak out

34
00:23:33,960 --> 00:24:15,150
Wes Bos: about it. All these stories remind me of when I was in school, you remember, they rolled in the like VCR, DVD and the TV strapped on that thing? Do you have one of those? Yeah, yeah, so stoked that, oh, we're watching a movie. But it was always, like the only debugging that the teachers had when the movie didn't work was is that on Channel three, that was like, there, we had to put it on Channel three to get the VCR to work. Oh, and I would always have to come in there. And like be like, Okay, if it is analog, and VCR if as a DVD, you got to work on the inputs. And it's so frustrating to see. That's that kind of thing where people just don't know how to how to debug that kind of thing.

35
00:24:15,330 --> 00:24:30,270
Scott Tolinski: You could make an entire career out of being able to set the TV at Channel three. You can do it people will heal you as a tech wizard. I know like I was the tech wizard in my family because I knew he could turn off the computer and turn it back on again, you know?

36
00:24:30,630 --> 00:24:35,580
Wes Bos: Yeah. Oh, that's hilarious. All right, what do we got next year? I guess it's your turn to grab one.

37
00:24:35,700 --> 00:26:02,850
Scott Tolinski: Yeah. Next one is you have fun with what you do. And this is a huge one for me, because I love I mean, I love web development. It's the reason why I do all of this extra content. It's the reason why, you know work so hard at what we do and then grow and everything like that. For me. The fact that I'm having fun solving these problems, learning this new stuff, creating things is maybe one of the number one drivers to learn. I'm always pushing for new stuff or pushing to learn or, or pushing myself and to do good work is really just because, hey, I enjoy it. And it makes us It makes us feel it makes me feel like I accomplished when you were able to solve this problems. It makes you feel like really proud and all this stuff when you're able to come up with a really cool creative solution to something. But at the end of the day, I just have fun sometimes, we mentioned this a couple episodes back, but like sometimes on like a Saturday or Sunday night when I'm trying to wind down, I'll play video games, or I'll go breakdancing or something right, I'll do my things to wind down. But in addition to that, sometimes working on hobby projects, even though you're you're struggling through some code or whatever like that, sometimes coding up some hobby project is relaxing to me, because it's genuinely fun. It's like, I don't feel like I'm working, I feel like I'm solving a creative problem or doing something interesting or whatever I'm, I'm getting that same experience that I would be from playing a video game or something like that I'm, you know, genuinely enjoying it.

38
00:26:03,030 --> 00:27:19,050
Wes Bos: Absolutely. I think that's also a huge driver behind my courses. Because web development can be really, really frustrating with all of the bumps and things that you run into. But it's important to, even if, like, what you're working on is not necessarily fun. Like I would say like most of my Dev, I'm not like Whoo, this is so much fun. But it's those like little those little things where like, oh, man, my database queries are 50% faster. How fun is that? You know? Or, like, oh, man, this new thing came to CSS and I took my lunch to to figure out how to build a little cool thing I was looking the other day there used to be this some easing CSS, there was a proposal for this CSS easing, you know, ease in ease out and bezzie A and everything like that there was like a proposal for like a spring in Safari. And they took it out. And I had coated that up like two years ago when they proposed it. And it was so much fun. And I I brought it out of storage the other day, and they took it out. And I was so bummed, but I was like, oh, it is really fun, like building these little little examples and stuff to make sure you enjoy it. And that's one of those things I don't necessarily know. No, what do you think? Do you think you can learn to have fun with this stuff? Or do you think that's more of like a personality trait?

39
00:27:19,229 --> 00:27:49,140
Scott Tolinski: It's a little bit about sometimes you have to inject some fun into things that aren't fun. because not everything is going to be fun. Like, for instance, I made an easing library for myself. And like easing it, I mean, is easing fun. I don't know, it's fun, if you like messing around with Bezier curves and stuff like that. But to make it fun, I made it an easy, NWA theme that using a library and that made it fun for me. So I mean, personally, I like to make things fun, that aren't fun. And even if it's stupid, it will add a little bit of like extra oomph into whatever you're doing.

40
00:27:49,500 --> 00:28:49,410
Wes Bos: All right, what do we got next? You understand work life balance. So I really like this one. Because I think that a competitive advantage in our industry is being able to have some sort of work life balance, or some some sort of balance, where you do not get burned out. And for every single person, that's going to look a little bit different. I don't want to be the guy that keeps preaching only work however many hours a day, there's different times in my life when I've worked very, very long days and enjoyed it very much. And now and I'm at a point in my life, where I really only work nine to five this morning, I started at 10 because my daughter was up all night and my wife needed to sleep because she was up all night with her. So I started a little bit later. And I think like being able to understand that you should have hobbies, and exercise and all of these other things outside of coding. I think that's really important because of the amount of burnout that comes with such a fast paced industry.

41
00:28:49,620 --> 00:30:43,410
Scott Tolinski: Yeah, it's a big thing. And it's funny, because this goes immediately back to Monday. I mean, you had tweeted out that we didn't know it was Labor Day. And I personally, one of my my bosses and mentors through development my entire career. It was like Halloween or something. And he was just like, I was like, Oh, he said something about today being like a fun day or something. And I was just like, What are you talking about? Man? He's like, Are you serious? Do you don't know that today is Halloween? Like, do you just not and I don't know, any holidays. I just flat out don't remember. I'm so awful at that. But it wasn't until we had that conversation that I was like, Ah, it is a holiday. And you know what, everyone else is not working. And I'm sitting here working on my desk. And I was I was grinding through some stuff and I just sort of it was like noon or something. I just stopped. I was like, You know what, I'm taking the day off. Because everyone else is taking the day off. And I deserve it for all the hard work that I've been doing. So I went on, spend some time in the yard doing adult stuff. I like message. Eric, who's the deaf on the site, and I was just like, Hey, man, I'm gonna go do some yard work. And he's like, oh, you're living the dad life right now. I'm like, Oh, yeah, no, no, no, I'm gonna mow the lawn. I'm gonna clean it up. I'm gonna pick up some leaves. I'm a mom and dad it up. So I took my Labor Day Off to do some, do some, you know, work that way. And it's important to do that stuff. It's hard to do that stuff, especially when you You work so hard and you really like, love what you do. Yeah, it's really hard. But it's important to understand the need to do any of that stuff to take the time off, it's all about balance is really a balance between a front end and a back end. If a website and one of our sponsors today is takes care of the back end of the website for you. And that sponsor is Sanity, they're going to remove any sort of insanity that you have in your balance of things by making the whole I don't know the whole content side of your application. Just so so easy. So with more about Sanity is Wes

42
00:30:43,439 --> 00:33:37,530
Wes Bos: Yes. So Sanity i o is they call it structured content. dunrite. Right, we actually talked about Sanity on our design episode, and we use their website as a beautifully designed website. So just check it out. If he's wanting to look at a really well done website, I really like the font on it. But what does it do. So they are sort of like the CMS back end to your website. So they The best way to explain what it did is they actually went ahead and and created a back end for the syntax website. So what they did is they you log up, log into sanity.io. And you can create a project. And then you start to create your data types with all of the different fields that you want. So we had episodes, and we had sponsors, and we have what people that Scott and I were like we're hosts are a content type, you can link the content types together. And then every single content type will have its own input, which is really, really cool. Because he obviously you get your input type of text and number and whatever. But then you can do custom inputs as much as you want. Because it allows you to input react components that are your own custom inputs, which I thought was super, super cool. So if you are looking to build a website that you want to build the back end for it sort of like a CMS that someone can just log in and manage all the content inside of there, you want to check out Sanity. A couple other things Last time, we said that what they use is gr o que groke. Last time, we said this growth, graph oriented query language, that's the language that you write to actually ping their servers and pull back a list of a list of all the data that you want. So you can do all of your filtering and sorting and everything in that we said that that was built upon graph qL, which is he said, it's not actually so that wasn't true, but they're shipping a graph qL API built on top of that later this fall. So that's really cool. Knowing that you'll be soon be able to build all your applications in just graph qL and pull all that data. The API is real time, which means you can sit and edit the same documents in the studio at the same time, that's really cool. Kind of like Google Docs or Dropbox, paper. They have an awesome image pipeline. There's a link to a CSS tricks article all about that, which is cool. It'll handle all of your image, image assets. And then there's a they also support micro services as well. So if you are building just as, like a real project, or if you just want to try something out, and you need a quick back end, because I know a lot of times people want to just build something in react or view really quickly. And you can't be bothered to do the backend part of it, check out sanity.io forward slash syntax and use the coupon code syntax, which is going to get you the awesome supercharged plan, which is has some beef beefed up API quota. So it's more than just the the free plan quota that you get. So thanks so much to Sanity for sponsoring.

43
00:33:37,610 --> 00:33:46,590
Scott Tolinski: Thank you. Yeah, I was really impressed with the Sandy's like the flexibility and customization. I mean, just the little demo they put together for us was just like really super slick.

44
00:33:46,610 --> 00:33:53,130
Wes Bos: Yeah, big fan of their everything. They're doing their design, the tools that they have. So pretty nifty.

45
00:33:53,459 --> 00:35:16,860
Scott Tolinski: Pretty nifty. Okay, next up here, I believe this is number nine. Number nine, feeling fine if you are empathetic to your co workers and users. And this is a big one. Because empathy a lot of the times is one of those skills that I think just gets lost in the shuffle of things. Or maybe people think if I'm a good enough Dev, that I don't have to treat people well, I don't have to put myself in other people's shoes and stuff like that. But really empathy in general. And understanding and being a good employee and a good co worker to your fellow workers is just such an important skill to have nourish, grow all that good stuff. Because at the end of the day, you want the people you're working with to be their best. You want everyone to be on their best, to do their best work to feel comfortable and to feel inspired. And people aren't going to do that. If you are you know, you're you're not treating your co workers well. You're not understanding their problems. You're not understanding maybe how they learn and you're not treating people with respect. So being empathetic, treating your co workers nicely. Being a good employee is just it's it's a totally undervalued skill, and I can't tell you how many devs I've worked twist that just made me want to quit a job because they were so not not good to work with, they just flat out weren't good work, you know, and you can always do your best. But sometimes people are just they they get stuck in their way. So make sure that you're growing and you're you're learning how to be a good person to your fellow coworkers.

46
00:35:16,920 --> 00:36:02,070
Wes Bos: Yeah, I On the flip side, I've worked with some amazing people who are often will take as much time as it's needed in order to explain something to you where it's, it's clearly my fault, because I can't understand something or not sure how, like, if you're getting kind of skilled up on an existing project, you need to understand kind of how it works, it's really frustrating to feel like you're in a spot and you're, it's, it sucks to feel like you're bothering someone, when you really need some help. So when you have empathy for your co workers, as well as, as your users, you need to understand, like, go back to the accessibility show we did last week and thinking about everybody that's involved in a project from people that are working on it, the designers that you're working on you're working with, as well as people that are using the product.

47
00:36:02,190 --> 00:37:05,610
Scott Tolinski: Yeah, it's big. It's funny, I mean, even like understanding like how to treat people in a work environment, like in regards to this, like I had this boss one time, that was he was he was a fine boss, like in terms of like managing people. But he used to come around, and we were in a desk cluster with a bunch of other departments. And he would come around and make seriously the most inappropriate jokes like not like not like pushing the line inappropriate, but like it would it would be inappropriate in most situations, but especially in a quiet work environment. And and you were either put in that position where like, okay, you He's your boss. So do you laugh at his joke? Or do you act like very uncomfortable and be like this is this is weird, but I remember even like he would leave and like other co workers from other departments would look over and be like, yikes, like, what is that about? And so I mean, you don't want to put your your your coworkers in that position, you don't want to make them feel uncomfortable. So yeah, just being able to have that brain to see like, What is the situation like with my co workers, and how are people feeling is a big deal.

48
00:37:06,000 --> 00:38:06,510
Wes Bos: Absolutely. Next one we have is you have attention to detail. And this one's super important because there's nothing more frustrating when working with other developers or yourself where you finish something and then the client comes back to you or you have to go back to the your coworker and say, like, good, but here's a list of 40 things that are just not right. And this often often happens when you're implementing a design into HTML and CSS, but, but also thinking about all the possible edge case and use cases. So I'm working with a guy on my own course platform right now. And when we're making decisions, you can tell that he thinks about every little possible thing that could happen in terms of like how to best store data, so the queries are quick, or how to not break something, if we're introducing a new way of approaching something. And it's, it's really cool to see that because it's clear that he has very good attention to detail and you don't have to worry about about things breaking because he know that they've thought it through.

49
00:38:06,750 --> 00:39:53,210
Scott Tolinski: Yeah, it's big. It's big. And I mean, it could be even, like, if you think about it, it could be we talked to the design episode about like, pixel perfect design, and like some people finishing a design and being like, Alright, it's done, you're like, no, this isn't even close. Like being able to look at things and realize what exactly needs to be through again, all those little details is a very important thing. And you know, sometimes those little details or even like, code style, or you know, your unit, how you're how you're doing certain techniques, or whatever like that, but it isn't, it's an important thing to, to just, I don't know, to pay attention to all the little things in our industry, what are we doing, there's so many little things to keep track of It's It's nuts, but it's it's one of those things you got to practice you got to do you got to do you got to do. And lastly, we have here number 11. Is there such thing as lucky number 11? Or is that a thing? No, I don't think so. I'm just I'm not good with sayings. But number 11 here is that you are part of the community. And this could be any sort of like any sort of web development community or design community online system or, or even local community or work community. Either way, just being a part of a group of other developers is a big, big thing. Because I mean, I can't tell like how many times has like the most biggest breakthroughs I've had was when I was either at a meetup or a conference or hanging out chatting with some friends about some code stuff. It is such a big deal to talk to other human beings about what you're doing because everyone's brain just functions a little bit differently. And it's extremely important to be able to tap into someone else's brain power, use their brain power with your about brainpower and have some melding of skills and abilities. Yeah,

50
00:39:53,210 --> 00:41:16,500
Wes Bos: totally. And that being part of a community can manifest itself in any number of ways. So we've got some examples here. We've got meetups are a really good way to, to meet them. Even if you go to one every six months or so, lunch and learns, we see often see teams of developers take one of my courses, and they'll just do it together on a lunch or they'll do like, I've also seen people, like rent out a conference room on a Saturday and meet up with 10 of their friends. And they all go through a JavaScript 30 courses, CSS Grid course together. And if you don't have that around you, there's Twitter, I see this hashtag 100 days of code all the time, show up on Twitter, and if people are doing 100 days of code, and that I think it's so cool, because by putting yourself out there and saying what you did every single day for 100 days, it's just has this enormous community around it. And you see such encouragement, you see people starting to like, find their community around them. Because like, that's how when I initially started Twitter, I found the web developer community that was surrounding me. And that's how I actually got some of the first jobs that I ever did. So I think it's really important to find your community, whether that's online, whether that's in person, whether that's going to one conference, a year, whether that's hanging out on chat rooms, or in the YouTube chat right now, we got 200 people chatting away. Yeah,

51
00:41:16,670 --> 00:41:37,380
Scott Tolinski: yeah, it's, it's, it's huge. Because the level I mean, we have a slack room with level up tutorials, and I bounce ideas, people bounce ideas, everyone's talking everyone. So they're growing together. And it's it's big. I mean, just being part of these things is it's going to help you grow as a human being and help you grow as a person. So yeah, be part of a community.

52
00:41:37,410 --> 00:42:43,940
Wes Bos: Let's do it. Awesome. So that's our 11 tips. If you have any more tips, why don't you send them on over to at syntax FM. So sick pic, I'm actually going to pick a book, I was just on vacation, and part of that vacation was my wife's mom came around, or my mother in law came with us and that she took care of our kids for a couple of the mornings. And we had that time to just do whatever it is we wanted. So my wife and I both did professional development. And I read a couple books on money management and investing and just kind of idea I've always I haven't ever talked much about my like thought process behind like saving money and buying cars with cash rather than financing them. And I have all these like thoughts about how to how to best manage money, and it's probably not important. But I did find that this book that I read very much aligned with my thoughts on on how to manage money and how to approach money and its role it plays in your life. And I had been avoiding this book for years because it sounds so stupid. It's called Rich Dad Poor Dad. Oh, which

53
00:42:43,940 --> 00:42:45,710
Unknown: Yes. Have you familiar?

54
00:42:45,900 --> 00:43:14,130
Wes Bos: Yeah. Have you read it? Or just heard of it? Yeah. So I I just didn't it's like a 23 year old buck or something like that, or a 15 year old buckets really old. But all of the concepts in it really stand the test of time. I'm a big fan of it. I'm kind of bummed that I left it for so long, because it was such a cheesy title, but I highly recommend it. I grabbed it on audiobook, I think I flipped it on 1.5 X and I was through it in about five hours of just laying in the hammock and listening to it.

55
00:43:14,310 --> 00:43:47,730
Scott Tolinski: Yeah, it's a good book. It's I mean, again, it's one of those ones you want to listen to with some like context of, of how it fits into your life. Yeah. Especially like, there were there were some of those like some of these finance books they like really say like, this is the way it's this way or no other way. And it's great to like get a very amount of opinions on different stuff. And then I like mix them all together, in my mind. So I love any of those books. I love listening, that sort of stuff. I have a bunch of like podcasts in that regard I listen to. But yeah, Rich Dad, Poor Dad is a classic for a reason. Yeah, definitely one that you want to check out.

56
00:43:47,790 --> 00:44:39,090
Wes Bos: I really liked it because it I'm like, my kids are starting to grow up and I'm starting to have to talk to them about money. Like my daughter found five bucks on the ground the other day. And I was like, oh man, like, we got it. What do we do with this? You know, like, like, all sudden, people are like, Oh, go buy toys. And I'm like, No, we need to like talk to her about saving. And she has this piggy bank. And every time she finds money, she saves it and we want to give part of that away. And there's like a whole bunch of and this really helped me like approach because it's not like he does talk about like investing in real estate and things like that. But it wasn't so much like, do this, like the Tony Robbins book is all about index funds, which are amazing thing. But this is just very much of a mindset about running a business and having your money work for you versus just getting a paycheck every single week and complaining about not making enough money. So I thought it was very, very interesting.

57
00:44:39,540 --> 00:47:09,570
Scott Tolinski: Yeah. As someone who, who has had like student loans forever and ever, I mean, Courtney has a PhD. So that was a lot of schooling. Just being able to budget and work on those loans is just like you really need some good financial foundation to figure that stuff out. So yeah, I think any of these books that they just inspire you look at things like that is just so incredibly important. My sick pick today is going to be sort of a follow up to a sick pick that I did a while ago that a lot of people really, really seem to like, and a sick pick that it was overcooked for the computer for whatever. So my sick pick today was overcooked two, which is the sequel that came out a couple of weeks ago, I think I don't I forget, either way, we have been playing the life out of this game, Courtney and I, we we played overcooked one until we beat it. And then overcooked two, we were already pretty good at overcooked so you know, we're, you know, we're getting better but like this game kicks off and you're making sushi and you're making all sorts of just so fun with the added some like really little like interesting abilities. Like it's so much fun because one of the abilities that they added to is to throw things which it doesn't seem like like in a kitchen, you're you're working you're a little cartoon guy, you're moving stuff around, you're cooking. And this game is so much fun because what you're doing the whole object is to to get the orders out as fast as they come. So you're building and you're cooking things and you're working together with your your teammate to make these orders. And in this second version of the game, they allow you to throw things now. So we're in these kitchens that have like a chasm in the in the like there's a giant hole that you can fall it fall into in the know the kitchen. We're just chucking chucking stuff at each other. And I'm like, I'm like, here's some burgers, burgers, burgers, we're just tossing them in like that we're yelling at each other. And we it is actually really funny. So many principles of things about like keeping cool under pressure. Like when when we're effective and beating the game. Courtney and I are functioning like a real kitchen. And we're like we're intense, but we're very like calm at the same time. We're like the burgers need burgers, but like when we when when stuffs on fire and we're all like freaking out it the whole thing just goes into a total mess. And it's like an episode of some Gordon Ramsay TV show, or something like that. But I absolutely love overcooked too, too. And yeah, the sequel. I love the first one and love over cook too definitely lives up to the hype. So that's my see pic overcoat to lay it.

58
00:47:09,630 --> 00:47:11,850
Wes Bos: Okay, what about shameless plugs?

59
00:47:12,810 --> 00:48:22,230
Scott Tolinski: Shameless plugs, hey, I have a course on react testing called react testing for beginners, I've gotten a ton of great feedback on it. A lot of people have been very, very excited with this course, because it makes testing really easy. Now, you know, I never loved learning testing. I never loved testing that much myself. Until I figured out like really nice practices, I read all of Kent C, Dodds stuff and his react testing library Plus, it just has like, totally transformed how I think about testing and react. So this course is aimed at anyone who's not like great at testing, maybe doesn't love testing, maybe he doesn't know anything about testing at all. And we take you from the very beginnings all the way through Europe, pro in real world testing situations where you can do things like testing API's that come in and mocking data and understanding all the jargony stuff. So check it out, level up tutorials.com Ford slash store, and you can buy react testing for beginners, right now it's on sale until the next series is released, I still release them whenever they are finished. So get on that cuz there's no it's like only going to be on sale for like 20 more days, or you can become a level of pro level up tutorials.com for slash pro incentive for the year save 25% and get access to everything

60
00:48:22,380 --> 00:49:12,480
Wes Bos: awesome. I'm gonna plug my upcoming advanced react graph qL course I just about finished the testing portion as well. And he talked about that. I took some time and added a couple extra videos on some beginner testing stuff just so that I'm not throwing people in and being like, oh, mocks and spies and yeah, test suites into you know, like, so we're kind of like, added a couple of videos that would explain the core ideas behind it. And then we get into testing and mocking the Apollo store and whatnot. So that's almost done. And then the last piece I have which is going to be pretty quick will be the deployment. Then I'm done. All the videos so far are edited up to it. And I'm really excited. It will be at Advanced react.com probably in a couple weeks or as I tell everyone soon. Alright, peace out.

61
00:49:15,150 --> 00:49:24,930
Scott Tolinski: Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

