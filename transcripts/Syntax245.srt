1
00:00:00,359 --> 00:00:02,160
Unknown: Monday, Monday, Monday,

2
00:00:02,219 --> 00:00:07,590
open wide dev fans yet ready to stuff your face with JavaScript CSS node

3
00:00:07,590 --> 00:00:08,820
module, BBQ Tip

4
00:00:09,059 --> 00:00:19,980
Get workflow breakdancing, soft skill web development hasty, as crazy as tasty as web development treats coming in hot here is Sarah CUDA,

5
00:00:19,980 --> 00:00:21,660
Bob, and Scott Taylor.

6
00:00:23,610 --> 00:00:24,480
Totally in ski.

7
00:00:25,980 --> 00:00:27,030
Oh, welcome

8
00:00:27,030 --> 00:00:50,040
Scott Tolinski: to cindex. On this Monday hasty treat, we're going to be talking about JavaScript events, which is definitely a topic that can trip up a ton of people for various reasons. And so hopefully, this is going to be an extremely useful topic for you if you write JavaScript at all. My name is Scott Cohen, schema developer from Denver, Colorado, and with me, as always, is the Wes Bos.

9
00:00:50,280 --> 00:05:39,270
Wes Bos: Hey, everybody, today we are sponsored by Prismic, which is a headless CMS. It has a graph qL API and a REST API. So but the next project that you take on, if you need some sort of back end service for it, check out prismic@prismic.io, you can go in, you create all your content types, you can relate them to each other. And then out on the other end, they'll give you this nice interface for working with your data. And then on the other end, you'll be able to pull that data out with either a REST API or graph qL API, pretty nifty. Check out prismic.io forward slash syntax, they've got a bunch of different starters there, one for view, one for react, they've done this hilarious little landing page that specifically for syntax, so even if you're not interested, and you want to laugh, check out prismic.io for its syntax, they say, so it looks like podcasting. podcast advertising works. Yeah, that's the headline. Love it. Cool. So let's get into it. Um, these are just like sort of a handful of things about JavaScript events that I find are useful to understand how they work. And from my JavaScript 30 course, my beginner JavaScript course, these are things that people say, ah, like, I never totally understood how that worked, or why that worked that way until I until I took it. So I've taken some of my favorite things from that in Oregon, distill it into, I don't know, five or six things you should know about JavaScript events. I love it. So let's get into it. First one we have here is bubbling event bubbling, that's something you hear all the time, it's actually kind of nice, nice thing. It bubbles. So what is event bubbling? Well, when you have an event in JavaScript, so most common would be a click event. When you click on something, that event will bubble up. Meaning that if you have like, let's say, you've got a strong tag, inside of a button inside of a card inside of a nav inside of a web browser inside of the universe in what happens is solidly the multiverse, the gun, when you click on that button, you are inadvertently also clicking on things that are inside that button, as well as things that contain that button. So when you click on something like a strong tag, the event happens on that strong tag. But then what happens is that the event, if nothing happens with that event, it bubbles up to the next level, which is a button. And then if nothing was like listening for that specific event, then it will bubble up to a higher level and keep bubbling up basically saying like, hey, somebody clicked to me, I thought it was the button, but nothing happened. So I'm going to level higher. And if anyone's interested in the fact that I got clicked, I'm sort of doing around right now. Who cares? And that's what that's what event bubbling is meaning that most events in JavaScript clicks, mouse moves, hovers, things like that, they'll happen on a specific element, but they also will happen on on parent elements. Now, conversely, conversely, is that a word on the flip side to that inversely, inversely, you haven't been capturing. So the easiest way I can explain what capturing is, is that events that capture down and bubble up. And what that means is that when an event happens, generally they start at the very lowest element and bubble themselves out playing. We talked about that. But the process of figuring out what got clicked on the way down to that is called capturing. So the way that the browser actually does it is you click on that span, the browser says Oh, they clicked on the window, but they also clicked on HTML. They also clicked on body and they also clicked on four or five divs on the way there and they also clicked on the button. They also clicked on the span inside of that button, so that going from the top down is called capturing When you add an event listener to something, you can specify that you want the event listener to trigger, either on the capture phase, which is top down, or on the bubble phase, which is down up. And almost always, I would say 99.99% of the time you want bubbling. And that's the default. Yeah. If for some reason you wanted to stop the event at a higher level, then you can listen for the event on the capture phase, which is when it comes down, instead of on the way up. So there's just a little option that you can pass your add event listeners that will allow you to hear

10
00:05:39,270 --> 00:05:42,360
Scott Tolinski: is I'm wondering what they use use cases there for that.

11
00:05:42,600 --> 00:06:30,390
Wes Bos: Yeah. So like, if you have like, an event listener on two different things, like let's say, you have a button inside of a, like a widget that is draggable and droppable. Hmm, you might want to listen for like a drag event on the card itself, and stop that from happening before the person actually accidentally click something that is inside of that card. Right? So if that was the case, then you would listen on capture down and then stop that event from happening, which is called prevent default again, and that next huh? And then what happens is that event never gets all the way down to the lower elements in that that causes you from stops you from accidentally clicking something inside of that widget. Interesting.

12
00:06:30,390 --> 00:07:07,710
Scott Tolinski: So do you want to move on to prevent default? Yeah. So I think prevent default might be one of these things that people are familiar with the moment that they start using react, or any front end framework, and they're working with a form, specifically, right? I mean, there's there's all sorts of ways where prevent default comes in handy. But let's say you're working with a form you do on submit, the whole page refreshes. And then you say, Oh, my page refreshed when I submit the form, you Google that? And then people say, Oh, well, you need to take the event and do event dot prevent default, preventing, of course, the default behavior. But do you want to talk a little bit more about prevent default?

13
00:07:08,099 --> 00:08:00,770
Wes Bos: Yeah, well, I think that's pretty much it is that some HTML elements have defaults. When links are clicked, they change the page, when forms are submitted, they get that data to the whatever URL, it has the action on that form. And those are all defaults. That's just functionality that's built into the browser. But if you want it to stop that, for whatever reason, maybe you're putting your own custom functionality into a form submit, like most of us do. And if that's the case, then you just stop the default with event dot prevent default, and that will stop the default from happening. And then it's your job as the developer to step in and, and do the work and make sure that that works like that. Totally. Um, what else we have here the difference between target and current target, you know, the, do you know the difference here, Scott, I always forget it.

14
00:08:00,990 --> 00:08:06,240
Scott Tolinski: I do not, I've only I only use target. Like I never, I've never used current target.

15
00:08:06,689 --> 00:10:48,450
Wes Bos: Yeah, so the difference between target and current target is, current target is what actually got clicked. And target is what you listened for a click on. So the difference there being that if you, let's use a button with like a strong tag inside of that, if you click on a button, you you listen for a click on a button, and then you run a callback, when that got clicked, target would be the button, that's probably what you wanted, right? And then current target is the actual element that got clicked, before that clip bubbled up to the parent element, and then trigger to click on that. So sometimes you need to know did the user click something that was inside of this thing, and then that thing bubbled up, or sometimes you just want to know did they click the button. So most common thing I use current target and target for is event delegation. So sometimes, if you attach an event listener to, let's say, you have a div that's full of seven or eight buttons, and those buttons are being added and removed, as you do things on the page. If you are using target there, then you have to like keep track of the event listeners on every single button that's added and removed, where what you can do is you could just listen for a click on the div that contains all of those buttons. And then every time that div is clicked, you can check if the current target was a button, meaning that you have one event listener on the entire div. And then the target there would be a div. But you can check if the thing that they actually clicked was indeed a button and race and you have one event listener for the entire thing. And that's what's referred to as event delegation, which is pretty nifty. Interesting. Yeah, I use that one a lot because specifically in vanilla JavaScript, You have to like take care of adding and removing event listeners yourself, which is such a pain in the butt. That's why frameworks like react are so nice because you don't have to worry about any of this. But if you're using vanilla JavaScript, you have to add the event listeners and remove them when the element gets removed and such a pain. So actually, React uses this. In react, they actually have one, one event listener on the I think it's the HTML tag. And when a click or any event happens on the HTML tag, it actually delegates it under the hood. That's why react events are called synthetic events, right? Yeah. Because under the hood there, they're using event delegation as well. Apparently, it's it's more performant just have one event listener, and then delegate it out with current target.

16
00:10:48,720 --> 00:10:54,240
Scott Tolinski: Yeah, I know, that's something that's been a bit of a not recently, but in general, a bit of a topic in react land.

17
00:10:54,720 --> 00:12:11,520
Wes Bos: Yeah, yeah. What else do we have here? event is trusted. This is something that I've done before, because we built a whack a mole game in my JavaScript 30. And we also learn how to fake clicks, and fake triggering events in JavaScript. So if you ever want to know if an event was actually fired by a user action, and not a custom dispatched event, then you can check if the is trusted Boolean is set to true or false. So that will tell you does somebody actually click this button? Or did somebody fake a click? Huh, that made it it happened. Interesting. Yeah. And then finally, we have the out of add event listener once of true. So this is an option, you can pass the event listener, where it will unbind itself, it will, it'll remove the event listener after it's called once. So for, I don't have a bunch of ideas off the top of my head. But a lot of times use like when someone clicks a button, do this thing the first time, like fade in this thing, or do an animation and then after that, don't do that every single time that thing does. So you have to remove the event listener. So adding once of true, this is something we had in jQuery for years, it was great. It would just remove itself. And there's there's no cleanup needed there.

18
00:12:12,180 --> 00:12:29,010
Scott Tolinski: These are all things that like I feel like you come across them, when you start working in a lot of vanilla. And the moment Yeah, you're outside of vanilla, you might not hit a lot of these issues or instances. So it's really fascinating, especially as somebody who works primarily in frameworks to learn a little bit more about events.

19
00:12:29,580 --> 00:12:53,400
Wes Bos: Yeah, it's it's good to know like the stuff like under the hood, that's kind of why I wanted to do this, this thing, you might not use it every single day. But it's good to know how it actually is happening. Because certainly react is using this stuff under the hood. But it's, I would say with the exception of the targets and the bubbling. I don't run into a whole lot of these things when you using a framework because they sort of simplify that all for you.

20
00:12:53,730 --> 00:12:56,460
Scott Tolinski: Yeah, cool. Well, do you have anything else on events here?

21
00:12:56,460 --> 00:13:07,440
Wes Bos: And that's all I've got, um, I don't know, if you have other stuff. Make sure you tweet us at syntax FM. And we'd like to hear your little gotchas and neat things that you know about offense.

22
00:13:07,500 --> 00:13:11,100
Scott Tolinski: Yeah, that'd be great. We'll, we'll hit you up with a retweet.

23
00:13:11,640 --> 00:13:15,270
Wes Bos: All right. Thanks for tuning in. Catch you on Wednesday.

24
00:13:15,660 --> 00:13:16,110
Unknown: Please

25
00:13:19,110 --> 00:13:28,890
Scott Tolinski: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

