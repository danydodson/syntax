1
00:00:01,320 --> 00:00:10,530
Announcer: You're listening to syntax, the podcast with the tastiest web development treats out there, strap yourself in and get ready to live ski and Wes Bos

2
00:00:10,590 --> 00:00:49,350
Wes Bos: Welcome to syntax. This is the podcast with the tastiest web development treats out there today we've got a fundamentals episode for you. So in the past, we've done episodes on JavaScript fundamentals, server side fundamentals, CSS, HTML and CSS fundamentals. And then Today, we're gonna be covering sort of the rest of the stuff the leftovers, things like bash and terminal fundamentals, text editor fundamentals, regex, OS basics, googling, navigating GitHub, these are just things you should know, as a developer, you're sort of base skills when you're learning in this sort of getting into web development now with me as always, this Mr. Scott Tolinksi. How you doing today, Scott?

3
00:00:49,560 --> 00:02:20,280
Scott Tolinski: Oh, you know, I'm doing okay, I routed it. My phone. Oh, man, we're my jailbroken. So to say my, yeah, my iOS device, you and I had had discussions about this about maybe potentially not being worth it being a big hassle about me soft breaking just about every android phone I've ever owned. When the jailbreak came out for 13.5, I went for it. And it was very easy, very easy, went nice and quick. And now I have a bunch of Android features that I missed. It's very nice. Like one of the cool little things I did with it is I fixed the face on luck, because on Android face on lock works. Where that if you hold the face up, it automatically does the swipe up thing for you and just takes you right to your homescreen Oh, do you use an iOS device? You know, it's one extra swipe. And it always annoyed me so much. Because the the Pixel phone just did a little bit nicer. And it was so fast and easy. And so that's one of the little little tweaks I added. It just takes me right to the homescreen. Now I need to go do that extra swipe up motion. Why don't you do that? So I've been working on my phone a lot. And when did this come out? Oh, very recently. And dude, it is. Oh, I'm excited about that. Yeah, I installed some plugin into Apple Mail. I clicked a button, I clicked another button, I installed an app. And next thing you know, I have access to hundreds of tweaks and I get a whole new icon set and it looks entirely different device and you know me, I'm missing my Android. So like, being able to add some of those features back really has improved the experience. For me, it seems a little ridiculous, but I've been limited. That's great. I'm gonna

4
00:02:20,310 --> 00:02:37,050
Wes Bos: do that as well. I have an old iPhone here that I run jailbreak on and it's not my daily driver. But just a couple little things. I've played around with it for a while and there hadn't been a jailbreak for a while, as far as I can tell. This is one of the jailbreaks where if you reboot it, you have to do it again.

5
00:02:37,470 --> 00:02:59,850
Scott Tolinski: No, no, I've rebooted it's been fine. It's been rock solid, man, I haven't had any issues whatsoever. So not to say I won't considering I just did this. But you know, it's so good that Fingers crossed, everything's been fine. And again, it's on the latest OS. So I didn't lose any cloud functionality or any of my backup stuff, or everything's worked fine. I haven't had a single app. Tell me It can't work.

6
00:03:00,060 --> 00:03:16,860
Wes Bos: That's great. Awesome. Well, today, we are sponsored by two awesome companies. First one is Sanity, which is your structured content, CMS, and Sentry, which is your error and exception tracking. We'll talk about them partway through this episode. Let's get on into it. You want to grab the first fundamental there?

7
00:03:17,250 --> 00:04:58,500
Scott Tolinski: Yeah, so the first fundamental is to simply get better at typing. Believe it or not, we work in an industry where typing is a very important skill. And it's funny that some people never take the time to improve their typing skills. I remember one of the very first things that Courtney and I did when we first started beating mind that no my wife and I met each other at work. We took a like a programming test against each other for some meta programming. She's going to program our typing test against each other just for fun, and I absolutely thought I was going to crush her because I'm like I do programming stuff on the computer all day. I'm gonna type like crazy man, she's good at typing that is for sure. Never underestimate just how good your typing skills can be. I would like to know if there's any I mean, if you just Google typing online, there's like a ton of different sites that will will teach you typing I learned from Mario teaches typing, which is a fantastic that was in the late 90s or early 90s sorry, not late 90s where Mario did not complete the level unless you typed correctly. I've pasted in one called key br.com which looks like it's pretty good at least to telling you where to keep your hands how to get basic skills typing and learning skills trust me they're they're well worth investing in that time. I'm very curious now if I'm a fast typer or not, should we pause and take a one minute typing test to see how many words per minute we are we should do that. Okay, so go to typing test Comm. Are we doing text or sentences? Or words? Let's just do one minute text one minute text. Okay, ready? Go. Oh, no. Ah.

8
00:04:59,340 --> 00:05:01,110
Oh man. That was brutal.

9
00:05:03,330 --> 00:05:24,900
That was hard. That was hard. Let's see how many words per minute did you do? I don't know if I did very good. I'm on my key cron K, K one. I'm blaming it on the keyboard. It's the classic. My controller came unplugged argument here. My typing speed was 52 wpm with three errors and an adjusted speed of 49. WP.

10
00:05:24,930 --> 00:05:35,610
Wes Bos: Oh, so I did 60 Wow. But you killed me. 16 errors Dino 45. Oh, man, look at me a little bit more accurate.

11
00:05:35,730 --> 00:05:48,810
Unknown: I was just flying thinking like it was more about the getting the words done. But I didn't realize. I don't know. Like, honestly, I feel like I'm faster when I'm typing what I'm thinking but kind of interesting. I don't I don't know if that's very good or not,

12
00:05:48,870 --> 00:06:02,040
Scott Tolinski: I have no idea. And sure enough, that test probably says, who knows about your programming skills. Because part of the reason why I'm faster programming is I can do letter letter, tap letter letter, tap letter letter, tap, you know, whatever to get my Yeah, completion going

13
00:06:02,460 --> 00:06:25,950
Wes Bos: in, like you think, Oh, it's funny. But even like, I've taught boot camps and a lot in the past. And one of the big things we see is like, do people have keyboard skills because you just can't keep up. And I think that goes for a lot of kids too, who don't necessarily spend time on keyboards anymore, because they're spending all their time on iPads. Like, we don't know what the future of programming will look like. But I certainly think it's a good skill to have. It's

14
00:06:25,950 --> 00:07:08,100
Scott Tolinski: one of these that we play this game on the jackbox with AI parents, I've talked about this before we play it like during quarantine here. We've been doing playing this game and one of the games, there's like a typing game. But since you're all on your mobile devices, yeah, doing basically a typing test on mobile devices. And one of the things that I've learned is that when you type with the autocorrection, at least for me, like I use a swipe keyboard, yeah, yeah, me too. But I use a different keyboard. Yeah. And it remembers your work. So I'm almost like just tapping the auto suggestions over and over and over again. Rather than that, that's how I type fast on the iPhone. Okay, so let's get into the the next one, which is bash and terminal skills, because these are skills will really, really go a long ways.

15
00:07:08,429 --> 00:07:52,860
Unknown: Absolutely. You don't need to be a like a terminal master like those hacker movies. But there's a couple like sort of basic things you should do is, is where am I in the terminal. So you know that your computer has a directory structure. And you can move among that directory structure with simple commands. And we're not going to list them all here. But just being able to create folders, move into folders, rename folders, delete folders, I would say there's probably like 10, or 15 different commands, those are all the ones that you need to know in order to sort of move around whatever terminal you're using, whether that's on on OSX, using the built in terminal on Windows was really popular now is Ws L which is Windows subsystem Linux,

16
00:07:52,860 --> 00:08:17,850
Wes Bos: I would go as far to say like people who are learning terminal on Windows don't even go and don't even learn bash, which is the terminal on Windows, because windows now gives you a Linux like terminal on Windows. And that will match anyone who's on OSX that will match anyone who's on Linux that will match you SSH into a server,

17
00:08:17,850 --> 00:09:20,279
Scott Tolinski: you'll be able to do your very basics there. And likewise, I have the message here that we should probably learn how to SSH. SSH is one of those skills that I found myself using all the time whether it's SSH into my NAS drive or SSH into a digitalocean server, or whatever SSH thing allows you to basically jump into the terminal of a another computer somewhere else and other server somewhere else and utilize your command line skills in an entirely different server that way, you don't have to always be relying on visual interfaces to get things done. I had to do that the other day, I was trying to adjust something on my router and there was no UI for it. The solution is you just SSH into it. With the Linux box. At the end of the day. You find the setting you want I tweaked it rebooted the thing right from the terminal and you get out and I was like man, what a great skill to have as in if you don't know x. I guess Scott just said SSH allows you to log into another computer via the command line. Yeah. And I just you know,

18
00:09:20,279 --> 00:09:41,730
here's a little pro tip for those of you who have a have a NAS drive. If you're moving things around, like let's say you're moving files around within your NASS drive, SSH into your drive and using the MV to move things is way endlessly faster than using something like find really it's like it's like 10 times faster. It is endlessly faster.

19
00:09:41,730 --> 00:10:02,010
Wow, that's a hot tip right there. I saw you tweet about that. Did you end up using our sink to move files or what I ended up doing was just connecting directly via Ethernet and then making sure that connection was specifically the Ethernet established connection and that went Ended up being faster than arcing.

20
00:10:02,010 --> 00:11:05,370
Wes Bos: Oh awesome. Other things you should know is very basic vim skills. Because if you're on a server, you SSH into a server, you need to edit a file, there's sort of like two ways to do it, you can either go and grab a GUI program like cyberduck, or transmit or file Zilla, and that will allow you to visually traverse directory structures. And then you could find your file right click open in. And what that does is it actually downloads a local copy and then re uploads that every single time they make a change. That's great. In a lot of use cases, I do that when I need to, like use my editor like VS code, but I want to edit the file live on the server. But often you're in there, you just need to like change a dot end file, like you need to configure an environmental variable. And if that's the case, you have to use the built in editors, which is usually vi vim, or what's the other one nano is on your server, and you don't need to know how to use a whole lot, just enough to edit a file, move around, paste, save the file and quit.

21
00:11:05,580 --> 00:11:18,120
Scott Tolinski: Yeah, right. Exactly. Because there's so many times where that's the fastest method like, oh, you're in this server or whatever, you have to change this thing. Well, how do I do it? Well, okay, just pop into vim V, whatever, change it get out.

22
00:11:18,450 --> 00:11:46,470
Wes Bos: Exactly. And it's, it's pretty simple. Just it just understanding that there are different modes, there's insert mode, and Is that what it's called? vim has six modes, normal visual insert, command, line, select, and execute, or EAX. So I only know normal insert mode, and how to get in and out of those two different ones I did years ago, I use vim for a few months, I knew a lot more, but I've since forgotten at all.

23
00:11:46,799 --> 00:12:36,990
Scott Tolinski: The next one will be knowing about z, sh, and or fish or using something like oh, my z, sh with your z, sh. Now, these are some tools that you're going to see a lot of people on maybe YouTube or coding videos that you're watching, you're going to maybe look at their command line and say, hey, why is their command line look all fancy, maybe has some interesting colors or emoticons or additional information about GitHub repositories. And these types of tools, I personally have been using Omi csh, I was using fish before but I moved back to Omi csh. With z sh, these types of tools can really enhance your experience, just by giving you more information. There's all sorts of amazing plugins to either add auto completion or all kinds of things to your command line to just make you feel a little bit more supercharged.

24
00:12:37,260 --> 00:14:19,020
Wes Bos: This is not something that you should wait on doing. It may seem like it's only for advanced users to pimp out their shell. But I always tell my beginners to do it. Because the command line is very confusing. Often the colors are are weird, the fonts are small, you don't know where you are. And if you can just make it look a little bit nicer. And get that nice prompt telling you where you are and what the status of your Git repo is, then it makes the terminal a lot less scary. And I have a free course command line power user calm, which is basically my answer to how do you get that cool terminal? And what are you doing to move around so quickly? Yeah, all right. Next up, we have text editors, there's an endless amount of sort of tricks and things you can do in a text editor. But the very basics, you should get comfortable with the command palette. So most text editors will have a keyboard shortcut that you can hit. And that will bring down a list of different commands. And not every command in your editor will be available via right click or via the context menus. So what you have to do is you have to look for that. And also it's much faster. So pop down the Command palette and sort of search for the thing that you want. And also, while you're doing that, the most text editors will also tell you what the keyboard shortcut is for that. So take a moment to like, look up this keyboard shortcut for that people always ask me like, Hey, what's like, how do you know them? Remember these keyboard shortcuts? Or how do you know what they are? And um, it literally says in the command palette beside the thing that you want to do and just like look it up. And there's a time you'll remember. Yeah, there's it's true,

25
00:14:19,470 --> 00:16:05,970
Scott Tolinski: right? There's search, use that search, find the thing you want to learn, pick it and just make sure you stick to it. And don't be afraid to change them either. Sometimes people like totally well, they'll get to a keyboard shortcut, and they'll be like, I'm never gonna remember that. Eight keys I have to press to do this thing. Well, if it's a thing you need to do often I remap all kinds of keyboard shortcuts whether or not for me, I even hooked up the like fast console log plugin to use Command L. What is command l? I actually don't even remember what command l was originally. But for me, command l now does a console log with a label on it. Hey, that's nice. If I want to do removing the line, it's Command Shift l okay. Moving line Command Shift L. Again, I don't even remember what these basic ones were. But these are things that I do all the time and your brain is going to work differently than the author of the software's brain or maybe the whatever popular vim keyboard shortcuts packages, right. But at the end of the day, these are your keyboard shortcuts. And it doesn't really matter if you set them up the way you want them, it sounds like you can't take that stuff with you. So I really configure mine pretty heavily. Another really cool thing is I use this click through to source UI, we use so many imported files nowadays in JavaScript, right? Whether it's a react plugin, or you know, a file that references another file that imports another file, if you hold down on Mac, if you hold down the command key, and you hover your mouse over a given variable or value, it tells you where that variable value is defined by just simply clicking on it. And if it's in another file, it will even open up that other file and take you right to the definition. I use this all the time. There's also a go to definition command. But I honestly for some reason, my mouse habits die hard for me. So

26
00:16:06,330 --> 00:17:22,470
Wes Bos: yeah, the click through to me is is much more used than that go to command or go to selector go to symbol, they call it clutch. I think that is a huge one. Because like one of the hardest things when you're first learning to program, it's like, How do I know where to edit this thing? Or how do I know where to look what this function does. And of course, you can search it, but sometimes you search it and you find every instance of where it's used. So like clicking through, it will then just bring up the definition right for you. That's a good one. Yeah, very true. Multiple cursors is a huge time saver. Just being able to hold down whatever key it is and click through the multiple cursors how to assign multiple cursors via the keyboard. On VS code. Its command Ll Actually, it's funny that you said command l because command l selects the line, I think, unless I had remapped that, and then Command Shift, l will put a cursor on each line. And one little hot tip I have with that is if you have things in your clipboard like if you have seven things in your clipboard, and then you have seven cursors on your editor and you paste them it's not going to paste the seven things seven times. It's going to paste the first thing on the first cursor The second thing on the second cursor and that that superpower People always ask me about that one. Yes,

27
00:17:22,470 --> 00:17:28,100
Unknown: multiple cursors. One of my favorite was a textmate. Was that the old one? Yeah, that was the first one that

28
00:17:28,100 --> 00:18:37,070
Scott Tolinski: text me Devon, one of my favorite things about moving to textmate. When I finally did that, I was like, oh, wow, what have I been? What have I been doing, there's also being able to do the Find and Replace effectively, in addition to finding replacing across files, it both of these are skills in they might seem very basic on the surface, right, find replace, but there's all sorts of additional things that you can add, whether it's matching the case, whether it's replacing the case, or preserving the case, as in, if you every time you see the word dolphin, you want to replace it with parakeet, whether that's capital P, or lowercase p or whatever, you want to be able to make sure that you can find all lowercase versions, all uppercase versions, all ones that are either just a single word or part of another word. And being able to use those skills effectively is very important. And not to mention, this will go along with another one. But there's some regex patterns that you can use to that will make you a really good Find and Replace master. But that's that's kind of getting a little bit maybe into a little bit pro pro skill territory for finding replace, but just being able to really navigate whether a whole word part of word, those type of things in Find and Replace will make you a much better navigator throughout your programs.

29
00:18:37,229 --> 00:19:19,100
Wes Bos: Speaking of regex, you don't need to be a regex master no to know fundamentals, but you should know what they are and how to find the one that you need. So a large portion of my career was basically just asking people, how do I match this specific thing? How do I match an email address? How do I match your phone number? How do I match the character or d dash and then any number of characters and numbers between four and six long? So just things like that being able to know that when you need to match something that is not exactly there in JavaScript, meaning you don't have the tools available to you then regex is often a good use case for that.

30
00:19:19,140 --> 00:19:24,480
Unknown: Yeah, right. And I like this site regex one Were you the one who recommended this before

31
00:19:24,480 --> 00:22:24,450
Scott Tolinski: I recommended the regex expert Okay, and I recommended a regex one to one. In the time between we said that now I found this regex one.com in regex one has a really good interactive tutorial that honestly gives you just enough, right it doesn't I don't think its goal is to make you into a regex master. But in my opinion, I went through this little tutorial just for fun to see what it did. And it was pretty great the basic skills that you want, you know how to how to select specific tech strings and all the things that will make you a more effective regex or I swear regex is the one technology that is very difficult for me to learn every single time I have regex book and I swear, I can't tell you what page 12 says, because I fall asleep at page number 11, every single time I try to read, it just cannot keep my attention when learning regex. So any interactive tutorials make it much nicer. So if you're learning regex, this is a sponsored transition. By the way, if you're learning regex, you're probably gonna write some code that breaks while you're learning it. And you're gonna want to make sure you keep track of all of those errors and exceptions. And to do that, you're probably going to be using one of our sponsors, and that is sentry@sentry.io. Now Sentry is the error and Exception Handling tool. That is really, it's our tool that we use over here at syntax, I personally have been using Sentry myself for a long time highly recommend it, it's definitely a service that keeps my business up and running, because it allows to do some really great things. Besides just keeping track of all of your bugs, you can set up alerts, you can attach those bugs to specific releases to track regressions easily, I have my API and my friend on two separate deploys here so I can keep them separate. And if an issue pops up with either of them. For instance, I'm looking at one right now, here's the issue that has popped up a couple of times here. And I can see very clearly, it's attached to my source map. And I can see that this is an error specifically on one of my mutations files. And it is it looks like it's a bug that we introduced somewhere recently here. So what I can do is I can click this link GitHub issue, I can have it create an issue for us in GitHub directly. And then I can go attach it to myself, to let everybody know that, hey, I'm going to be fixing this problem. Now that I have a little bit more idea of what's going on here. So this is some of the key ways that I use sentry.io. In my own personal business, you're gonna head to sentry.io, use the coupon code at tastytrade, all lowercase, all one word, and you are going to get to two months for free@sentry.io. tasty treat. Okay, let's keep it rolling. Here, we have so many of these things. Next step is going to be the operating system of basics, because hey, we spend a lot of our time in these operating systems. And it's funny just how many people aren't comfortable doing a lot of intermediate things within their operating system, things that maybe, you know, General users will never need to do. So what are what are some of these key skills that you think you need to have within your operating system was,

32
00:22:24,450 --> 00:23:19,200
Wes Bos: I think switching windows switching through multiple instance of a window, if you have one app, you want to switch to your browser, if you have multiple tabs open, if you have multiple versions of that window, just being able to quickly cycle and switch through those via the keyboard, the amount of times I see people who drag the window out of the way to find the window that is underneath, and then drag it back over, it drives me crazy. Seeing that because it's it's so inefficient. And you think like, Ah, it's not a big deal. But like, if you spend five seconds moving a window, you do that every, every couple of minutes, that adds up really, really quickly. So just knowing what the keyboard shortcuts are just switch between apps to switch between multiple windows of a single app. So if you've got two windows of Chrome open, and then also, if you've got five or six different tabs open, how do you switch to the third tab without having to click it or cycle through them.

33
00:23:19,440 --> 00:24:23,130
Scott Tolinski: If you use Mac OS, you're missing a key feature that I think makes it really easy to navigate through some of your windows that both Linux and Windows have, which is the ability to quickly and easily snap windows to various positions, whether that's full screen or top or left or right. You know, I have a lot of there's like a ton of the utilities. To do this, I use one called spectacle I believe, and I have some keyboard shortcut setup. If I'm in a window, and I want it to snap to the half of the screen on the left, I just hold option and hit the left arrow. And likewise, if I wanted to snap to the other side, I hit option and go to the right. If I want it to be in a perfect 16 by nine ratio for recording, I hit option r for recording. You know it's like little things like this that can make your life so much easier hands never leave the keyboard, your windows just snap exactly where you want them to be. It looks like there's a couple of new tools out here for this. I haven't used either of these, but one is called tiles. One's called magnet, they look like they're pretty neat. And they're all trying to emulate sort of the behavior that exists in Windows, this needed to get baked in the Mac OS like five years ago,

34
00:24:23,280 --> 00:25:12,540
Wes Bos: totally I'm I'm so surprised that it doesn't exist yet. I use a combination of Karabiner which remaps my Caps Lock key to be a hyper key, which is I should just do that. The hyper key presses shift control option and command at once because like you have four modifier keys, shift control option command, and then you can make modifiers based on any combos of those but there's unlikely any keyboard shortcuts that are pressing all four of those plus R or something. So hyper key will remap capslock to that and then you can like things like hyper R or so I have hyper all the arrows will snap my windows up and down and Karabiner remaps it and then I use better touch tool to snap them and move them from monitor to monitor. That's what

35
00:25:12,540 --> 00:25:36,420
Scott Tolinski: used is better, better touch tool. Maybe four or five years ago, I tried them all. And this was like the best one at the time. And I still like it. And it's just, I don't want to like switch. It works just fine for me. I'm sure there's other good ones out there. Yeah. But that's just kind of what I settled on then. And it's working. So don't mess with it. I think the reason why I like mine so much is because I can get the snap to 16 by nine really quickly.

36
00:25:36,420 --> 00:25:36,930
Unknown: Yeah,

37
00:25:36,930 --> 00:26:36,180
Wes Bos: any of them else that have that then yeah, I'm not exactly super thrilled with mine. I'm not sure if bettertouchtool has that. I think we should get that guy who made better touch tool on the podcast, because he's just like that just always it's he just built this MAC app, and has millions of features. And like, I'm always curious, like, first of all, how do you keep building this thing and not get burnt out? And second of all, how do you like it works with the Magic Mouse, the touch bar and the trackpad, and keyboard shortcuts and Siri remote and gestures? Like there's so many features in here. And like, whenever a new OS comes out, like how do you test it all? Gosh, there's just so much to edit. I'm so many questions I have, it gives my major anxiety totally, totally like, this thing is it's so low level too. And also, like, if there's an issue with like, the trackpad driver, like you don't you can't just tweet out is anyone having trouble with the trackpad driver cuz like, Yeah, really one of the very few people in the world that makes this.

38
00:26:38,010 --> 00:26:43,440
Unknown: So it kind of interesting. Those are well worth your time to learn.

39
00:26:43,710 --> 00:26:44,370
Definitely.

40
00:26:46,440 --> 00:26:53,520
unzipping files, it's one thing we see a lot on Windows is that when you, I don't know if this is still true or not. But

41
00:26:53,520 --> 00:27:29,100
Wes Bos: if you have like a folder, and you unzip it, it like makes a double folder, like if you have like a zip file called Wes. And then inside that you have a folder called West, then it gives you two folders. And that was a huge source of confusion when I was teaching, because you'd have double folder levels, and then the files wouldn't be where people would expect them. File organization. We've talked about this on the podcast before. So I won't talk about that. But just being like having good file hygiene, I talk about a lot, being able to know where the files are on your computer where you should put them a place for everything and everything in its place. Yeah,

42
00:27:29,789 --> 00:27:30,300
Scott Tolinski: totally.

43
00:27:30,539 --> 00:27:57,090
You know, what I should add on here is using like the like Alfred type tools, I know there's one that exists for Linux, I don't know what exists like this for Windows. But Alfred is is an essential tool for me for at least Mac OS to be able to quickly open Yeah, applications and set up workflows and do all sorts of things. It's definitely a key component of my workflow, especially because it it does so many things like allowing you just take your hands off of the mouse and use the keyboard specifically

44
00:27:57,630 --> 00:28:31,740
Wes Bos: searching for files. One thing that I hate on OSX is the Finder. If you want to search for a file rough, it never works. Like I remember being able to search for like Star dot txt on Windows and that little dog would wag his tail and look for it. And that was like probably like 15 years ago, and it still is not as good on OSX. And there are a couple of tricks you can do in the search where you can add multiple modifiers and search by type or search in files. But it's not apparent how that works. So spending some time figuring that out as well worth

45
00:28:32,009 --> 00:28:47,010
Scott Tolinski: it. Yeah, I have like some saved filter searches. Like I have one that just gives me all of the most all of the ScreenFlow files on my computer, and then sorts them by newest to oldest. So that way if I'm ever looking for a ScreenFlow file specifically, I don't have to go pawing through everything.

46
00:28:47,039 --> 00:29:12,090
Wes Bos: Oh, that's a great idea. Yeah, it's it's been nuts. Let's switch to the next one, which is googling how to Google? Well, it seems like a funny thing to do. But often my wife will ask me like, Can you just Google this? Because I can't find what I'm looking for. And then I'll start googling and she was laughs she's like, you're so good at googling. There are some some things you can do to become a better Googler? Like, what are some of your tricks?

47
00:29:12,660 --> 00:30:58,350
Scott Tolinski: It's a skill that is a practice skill in my mind, but just knowing simply what is an ineffective search? Like if I wanted to search for something on Gatsby, right? You wanted to say like Gatsby this is happening or whatever like error with Gatsby, what I would do is I would start with the error, copy and paste the error remove any sort of like your own file system stuff, just paste the basics of the error and see what comes up. Then if nothing comes up, start and say maybe like the behavior, but another thing people tend to tend to do is maybe not realized just how many terms there are with the same word like oh, Gatsby. Okay, there's The Great Gatsby. There's Gatsby, this or Gatsby that that's totally unrelated to our industry. Gatsby JavaScript. This like Get beat react blank, you know, just adding some of those additional qualifiers in can help. If I'm searching for something, and I'm getting a lot of bad results, the results that I don't want to see, I think was the one I was asking a question. The other day, on my end, it was about Apex domains. And I wanted to know something specifically about Apex domains and see names. And every single result that came up on the first page, he was talking about load balancing, I don't, I'm not worrying about load balancing right now, um, Tom want to know about DNS. So I used one of the Google operators, which is the minus and I did the minus load balance, and it removed all of those load balancing things, I can add DNS in there, and it just reduces the clutter. So it's a lot of practice in terms of like, knowing what's effective, and knowing what's not effective, seeing what's effective. And then getting some of those skills like the operators and skills of actual technical things that exists in Google, I feel like you're the type who is like explicit Google tips,

48
00:30:58,500 --> 00:31:31,770
Wes Bos: I like to use date searching a lot. So if you search for something on Google, you don't have to know any keywords or anything. But there's a tools drop down, you click on Tools, and that will allow you to filter for a specific date range. So more often than not, like, let's say, I'm looking for an issue with Apollo, and Apollo three just came out, and I'm googling for the issue. Well, there's like four or five years worth of Apollo before then that I need to then filter out because that is not the library that I'm working with. So you know, okay, well, Apollo just came out,

49
00:31:32,130 --> 00:32:00,930
Unknown: let's say two months ago, it's not even out at time recording, but let's just say came out two months ago, then I can filter my listings for things that were posted. In the last two months, I remember, I found a blog post about something xy and z, and it was about a year ago. So then you want to search in 2019, you can limit it to 2019. That's not going to show any new stuff that would have come up. And I find that to be super helpful to gauge when stuff was posted. Oh, yeah.

50
00:32:00,960 --> 00:32:41,550
Scott Tolinski: Can you imagine getting like a bug with your react hook, and then you Google something about react, and all of the errors that pop up on Google or from you know, like, 20 2017, you're just like, Oh, well, that's not, that's not going to be accurate. Another one I like to use it, if I'm looking for opinions is I'll just add the word Reddit onto there. Now, you got to be careful with Reddit because definitely people, they definitely have good opinions occasionally. But what you want is you want a wide variety of opinions, you want a lot of people with personal experience. And that's often a good place to see people talking about their personal experience and opinions with thing. But that said, there is this sort of like hive mentality over there. And if you're not paying attention, you can definitely get bad information just as much as you're getting good information there.

51
00:32:41,970 --> 00:33:04,950
Wes Bos: Absolutely read is the best ticket with a grain of salt, because you could be getting bad information. But in my experience, especially once you get into much more niche subreddits, you will find a lot more really helpful information, I find some of the bigger ones, web dev and whatnot, a lot of good people in there. But there's a lot of bad opinions and angry people in there as well. So take that with a grain of salt.

52
00:33:04,980 --> 00:35:26,340
Scott Tolinski: Yeah, exactly. next section is going to be talking about GitHub, we as developers spend a lot of time around GitHub, specifically, because that's where so much code lives in hosts issues and all those things. So some of your skills are going to be simply just learning how to navigate to GitHub itself. GitHub is a really fantastic skill and a really fantastic place. But it is very intimidating. For those of you who may not have a lot of good skills. I remember when GitHub was first blowing up, and I didn't necessarily understand, get it was confusing to me. I mean, use the terminal and that sort of way. Or just even the process of it, you know, the downloading things. You click download, and it gives you open and desktop or download zip or here's an HTTPS string like, Oh, I remember feeling very overwhelmed and just not super confident when navigating GitHub. So it's important to do understand and spend the time and figure out where things are. The explore tab is there for finding interesting projects. The marketplace is there for finding things like GitHub actions, which are really great. I've been I've been working a lot with GitHub actions. for newer developers, you'll just want to spend time navigating around repos and seeing how issues work, realizing what it takes to make a successful issue, right, just letting someone know that their stuff doesn't work isn't exactly very helpful. That's like a whole school on its own is writing a good issue in one of which that I'm trying to get better at understanding what pull requests are, how the whole thing works on yourself a good GitHub tutorial that explains everything where things are at and how to click through it. I also have a number of GitHub extensions that I'll recommend for those of you using Chrome. Many of these have analogous versions to Firefox as well. I like to use octo linker, which gives you that click through to source thing that we were talking about within VS code gives you that quickly their source on GitHub. So let's say you're browsing a file on GitHub, and you want to see the file that it's referencing, you can just click on it as a link and it takes you right to it without you having to go Back in the file directory, and then forward to that file or in case it's in a whole nother file directory. Another one that I really love is octo tree, which gives you a sidebar of a folder structure, sort of like what you have within your text editor where you can click and open folders. And then that way, you can click and go directly to a specific file, or you can even filter and search, I would go west, if you're not using octo treat, man, you got to get on it. It's fantastic.

53
00:35:26,360 --> 00:36:11,250
Wes Bos: That's pretty cool. I find, especially if my my beginner JavaScript and my JavaScript 30 course, people aren't totally comfortable with the concepts of a repo, a fork of that repo, and then a branch on either of the the repo or the fork and I get a lot of oops, I accidentally pull requests to do all of my work by accident because people are trying to push their own work to their own branch or something like that. To find a repo MC with a friend or something like that, and practice forking each other's repos and pull requesting, just so you can get get comfortable. Like I'm not mad at that. It's just that like, it can be a little bit confusing as silica, I don't want to accidentally overwrite something, or I don't want to accidentally do the wrong thing. Yeah,

54
00:36:11,250 --> 00:37:39,690
Scott Tolinski: right, exactly. Sometimes you push up a DS store file, and you're just like, oh, how do I delete? How do I delete file from GitHub. And that's always fun. I think one of the most important things about not only meant like navigating through GitHub is navigating through file structures in general and viewing source. And so this is like a whole nother skill, because it might not necessarily be GitHub, it might just be some source, maybe you've downloaded it from somewhere, maybe it's on GitHub, and you're just pawing through the folder structures, maybe it's on Git lab or somewhere else entirely. And so reading source is a skill all unto itself, you want to first figure out how to find where a project starts, like what's the entry point. And usually you can find that if it's a JavaScript based package or JavaScript based project, you can use the package dot JSON. And the package dot JSON usually gives you an entry in saying where this thing starts, like, Where's the initial start file? Yes, that's a good tip. If you start at the initial start file, you can see what loads what loads, what, what loads, what, and oftentimes, maybe that start file is just loading another file or loading something else. And that can seem sort of pointless. But it really gives you a handle on the layout and structure of this project in a way that just simply looking at the files can't give you. So just spend a lot of time reading source because reading source is a skill onto its own, just being able to to look at somebody else's code, read the comments and pick apart things as to how they go. The last one we're going to be talking about here is knowing when to pick the right dev tool for the job. The dev tools, pain is overwhelming to new people. So do you want to talk a little bit about that West?

55
00:37:39,690 --> 00:38:46,880
Wes Bos: Yeah, just being able to know where to edit something at a very basic No. Is this CSS based? Or is this in the elements tab, those two are very helpful being able to toggle styles on and off to see if that's your issue. Knowing does this happen when something is clicked, then maybe you need to head on over to the event listeners tab and see what's going on in there, going into your console and understanding what the errors are in there, sometimes, especially lately, like Chrome and Firefox, but all kinds of garbage in your console. That means nothing to you as a developer, or like maybe you're developing something but you have an iframe, and you have some stuff being dumped in there. So peruse through the console know what's important and what's not. And honestly, we don't have any rules for that here. That's just takes time but getting comfortable with it. And then probably a couple years into your your dev journey, you'll start to look at the rest of the tabs, which is things like the Network tab, the memory tab, Performance tab, storage tab cookies, things like that,

56
00:38:47,129 --> 00:39:45,630
Scott Tolinski: I often see people go right for the console log, sometimes I myself and definitely a victim of using console log way too many times when it's not appropriate. And just knowing again, which tab to look at whether that is of course, the more maybe you're going to get more information about that from the Network tab than you get from doing a console log or maybe your console logging eight things. And it would just make more sense to throw a debugger in there and see the entire stack context of everything that you're looking at in one fell swoop. Or maybe it's just like understanding what tools you can use to modify the CSS or HTML the correct way. A lot of these things again, it's just it's part of this is experience. But again, find yourself a good Developer Tools course or blog post or just spend the time looking at them. because let me tell you, there's not that many tabs for no reason. They all have very specific use cases. And yeah, some of them definitely are used more than others, but they they all have very excellent use cases for your skills.

57
00:39:45,959 --> 00:40:28,260
Wes Bos: All right, so that is the leftovers of the fundamentals we have for you hopefully learned a few things here. There are things that maybe you should focus on. Obviously, there's a lot here, but maybe take one or two things and say I'm gonna get better at the command palette or I'm gonna Learn five new terminal commands in the next month or two. But that's probably well worth your time. Totally. Let's move into some sick pics. I have a really good sick pic today. And this is something that I got from my grandma. So my grandma is in a nursing home and she's not able to have visitors. And she didn't have the internet or email or anything like that. She actually had email like, maybe like 15 years ago, I

58
00:40:28,260 --> 00:41:10,110
remember emailing her when I was like, just had a hotmail address, but she hasn't had email in probably 1012 years or something like that. So we all have the cousins and everything, got her an iPad, and set her up with internet at her at the nursing home. And the one problem she has is that her like arthritic fingers, she can't move them fast enough. And she always triggers things that are too quick like she she makes the icons jiggle, because she held down like she pressed on on some of the icons and it's a little bit frustrating to her to do it. So what we ended up doing is I bought her this thing called the Cosmo not wide grip stylus.

59
00:41:10,400 --> 00:41:27,780
Scott Tolinski: Oh, yeah, no, that I got that from my dad for different reasons. I just thought it was cool. Oh, awesome. So it gets just It's very nice. It's a big marker. It's like gripping a sharpie or something like that. Instead of her sort of shaky hands. She's able to have a little bit more control on that. And so your dad tried. He thought it was pretty cool. Yeah,

60
00:41:27,980 --> 00:41:50,690
it is awaited. It feels really nice. Like it feels good. And yeah, I got a firm A number of years ago for his like first iPad. And just because I thought he wanted to stay Listen, I thought it was really neat. It's a very good product. Very nice. It's like one of these Kickstarter things, grab it on studio, neat, calm, I'll put a link in the show notes as well. Big fan. Cool.

61
00:41:51,000 --> 00:43:58,830
I'm going to sick peg a, it was a initially a TVs that I want to call it like a limited series what it would be like a like a four parter limited series. This was a nova maybe in 2011. And granted, some of the information has since been not updated. But like, like, for instance, they talk about the Higgs boson particle, which has since been discovered, like a fit like actually observed, right. And so this is called the Fabric of the Cosmos. And Courtney was watching the rocket launch and asking me some questions about how satellites work and how you know, gravity works. And this stuff is mind blowing. It's so mind blowing. And I said, Listen, like I can explain to you how this all works with fabric and bowling balls and whatever. But like, let me just put on this like four part series for you, which is a little bit of an investment in, let's just watch this together and blow your mind. Because it's it's based on the book by Brian green does this he's fantastic. It's based on a book by the same name by Brian Greene. I've also read the book because I found this video series to be so fantastic. I've been a huge Brian Greene fan Ever Ever since this, but it's so good. It talks a lot about theoretical physics, it talks about actual observed physics. And it talks about space time and how things are connected and warped via all sorts of things with black holes and the theoretical physics of things like time travel, or how time is connected to space in a way where, you know, just simply changing your speed actually affects time, right? We don't often think about these things. And we watched the first one that I've seen all of these like 100 times but we watched the very first one on just space itself like empty space. And not like outer space but like empty empty space space and what that actually is, and when we got done watching it corny was just saying, Man, I feel like everyone should watch this stuff because you would realize just how insignificant a lot of the things we worry about are. It was just fantastic. So I'm going to be watching the other three of these with her over the next few days. It's my favorite video series. I love it a lot. It's from 2011 but it's still very, very fantastic. Very much holds up today.

62
00:43:59,340 --> 00:44:40,710
Awesome. That's good. shamelessly plug my courses Wes Bos comm forward slash courses if you want to learn something new with JavaScript, HTML CSS, check it out. Wes Bos calm for slash courses, Use coupon code syntax for 10 bucks off. Yep. I'm gonna shop My Courses level up. tutorials.com you can sign up for the entire year right now and save 50% off, level up tutorials.com forward slash Pro. Vinnie, thank you so much for tuning in and we will catch you on Monday. Peace. Please. Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

