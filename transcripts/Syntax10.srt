1
00:00:06,000 --> 00:00:11,219
Unknown: Welcome to syntax where we deliver tasty treats for web developers.

2
00:00:14,910 --> 00:03:18,930
Welcome to syntax, in this episode, we're gonna be talking about using CSS in JavaScript, a little bit of maybe the libraries involved in that, some of the what and whys and we're gonna take this one pretty lightly, because I know this is a fiery topic. So we're gonna just talk about this from based on our experience, sort of what we like and dislike about the different processes and libraries and stuff like that. So to get things started, we want to have a word from our sponsor. Thanks so much to Freshbooks, for sponsoring this episode of syntax. We'll talk a little bit more about them later on in the show. But make sure you head on over to freshbooks.com forward slash syntax and enter syntax into the How did you hear about us section? All right, well, we're gonna kick it off talking about CSS and j. s, or inline styles, they don't seem to be called inline styles anymore, I think because a lot of people got a bit butthurt over that, that they thought that it meant that you're actually writing your like styles in a style attribute on your HTML tag. And that's not what it is at all. css in js is, essentially, when you're writing an application in view, or Angular or react, or any of these things that is very component based, it's starting to make sense to couple your CSS that styles that component with that component itself. So that's the whole idea of CSS in js, where you couple those things together, it's sort of throwing the whole separations of concerns out the window, and saying more like, Well, actually, you probably do want this template and the CSS to be tightly bound together. So that's sort of that's sort of where I'm coming at it from maybe Scott has some ideas of what is styled components or what is CSS and j. s, and what problems does it solve? Yeah, so you know, CSS and j s really starts to make sense, like you said, with this componentized workflow, and you end up really having your components existing. And you know, things like react storybook, where you you see your components isolated from the rest of your application, is is a one way that really kind of opened up styled components for me, because if you think about your components in isolation a lot, sometimes that's hard to think about when you have either I know it's not necessarily a massive stylesheet. But even if you have your stylesheet, broken up via partials and stuff like that, you still have essentially a massive stylesheet. And it's separate from your components. And so if you're thinking about these things in isolation, it starts to make sense as to what aspects of these components in isolation are unique to these particular components that are styles that you're never going to see elsewhere in your app, or at least maybe not going to see in the same sort of way. So in that for me, in that case, that's when it really starts to make sense, when you have these individual components that, you know, you start to actually understand a little bit more about the hierarchy of the design,

3
00:03:20,160 --> 00:04:14,220
by having these components in sort of isolation. So that that's where it is for me. I think, um, if we think back to the React episode, where are we talking about, sometimes this stuff seems a little bit harder than it should be at first. A lot of the benefits of of these things that seemed like a little bit more work upfront, definitely pan out in maintainability. And simplicity in the long run. So if you think back to any website you've maybe been working on for more than three years, chances are that you have a lot of CSS in that website. And chances are that you have a lot of styles that accidentally get applied to other pieces on the page. Because up until just a couple of months ago, maybe six months ago, CSS doesn't have a concept of scoping, meaning that everything is absolutely global. So if you style A p tag

4
00:04:15,240 --> 00:04:29,370
in one file, and then you try to style A p tag in another file, those styles are going to conflict, you got specificity wars, maybe you have styles that are leaking outside and accidentally applying to other thing. Now there's lots of things you can do to

5
00:04:30,930 --> 00:04:59,910
to sort of fix that using a methodology such as bem will definitely fix that for you. But this takes it a little bit further and actually scopes the CSS to that specific component. So you're absolutely sure that nothing will ever leak outside and apply to any other elements on the page. So the huge for a win for maintainability huge win for large teams. Some of these companies have out 2030 developers touching the CSS at any given time.

6
00:05:00,240 --> 00:06:14,190
And that can be a nightmare when it comes to making sure that you're actually breaking something. Imagine JavaScript was all global variables, you didn't have the concept of scope. That's sort of a problem that you can you could run into with CSS. And I say, could because a lot of people don't have CSS woes. And I think a lot of the JavaScript people are coming in here and trying to fix problems that people don't necessarily have, or don't necessarily know that they have. So maybe take this episode as just have an open mind, I definitely still have an open mind about it. Some of the stuff doesn't make a whole lot of sense to me. A lot of the other stuff is like, Oh, this is actually nice after using it. So yeah, yeah, and I'm definitely the same way. I think, too often we have these things that are people see them as one or the other black or white, it's either you have to accept CSS and JavaScript as your Overlord, or you are working entirely in CSS and embracing the cascade. And for me, I'm like, I'm somewhere in the middle, I embrace the cascade, and I still use CSS with my style components in many cases. And, you know, you use the style components for these things that you need that that scoping for. But, you know, I'm not essentially,

7
00:06:15,390 --> 00:06:43,560
you know, super, super stuck in any particular way. It's more of like, let's see what works well, for me. And right now, using styled components, has been working very, very nicely for me. So definitely one of those things. And I think one of the concerns that people have, a lot of the times the concerns that people have, I think, are either based out of fear of using something they you know, why would I do this? Right? So then they start to look for reasons why

8
00:06:44,670 --> 00:08:35,640
to support that. And some of those reasons might be well, okay, inline styles, performance is worse than, you know, CSS performance. But if you look at libraries, like styled components, what it's actually doing is adding classes to your divs and writing CSS to attach to those classes. So it's generating unique classes that you don't have to ever worry about interacting. I mean, there are there, you know, unique ID identifiers. So it's not actually inserting a CSS into your style tags on your elements. It's writing real CSS, right? So I think a lot of these things are maybe misunderstandings about how these libraries are being used, or maybe just fear out of trying something totally foreign. Right. I remember when I first saw people talking about using CSS and JavaScript, I think my eyes rolled so hard that, like, damage them permanently, I was just like, I can't I keep people to try to do everything in JavaScript. And obviously, that's a bad reaction. Because, you know, that's limiting sort of your creativity. So, you know, I opened my mind a little bit, tried it out. And sure enough, guess what I'm using it and I like it. So that's, that's sort of how it goes. Yeah, give it a chance. Um, I think it may be should just be called like CSS in JS for writing. But then it turns out to be CSS at the end of the day, or something like that, because it does eventually get compiled down to raw CSS. And it is injected into your page via a CSS file or via a style tag when that component mounts. So that's really nice for that, as well as one other point I should I should mention about this is maintainability. Like, how many of you got check how many of you have some CSS right now, and you don't know if you're allowed to remove it. If you look at some CSS, you should be able to

9
00:08:36,900 --> 00:09:57,990
say I can totally delete that with confidence and know that it will not break my app. Or if you don't no longer use a component, that CSS should no longer make its way in for the party in your final bundle CSS file. So it's kind of kind of nice to be able to do that. I know there's tools out there that will scan your page and look at what you have. But this is definitely a much saner way to do it. Yeah. So I mean, do you want to do some want to run down some pros and cons here? And since we're kind of doing that right now, I guess, in this little intro? Yeah, yeah. So I guess a pro would be maintainability. And the ability to delete CSS figure out, just keep your CSS as lean as possible. Don't ship anything that you don't necessarily need to. Yeah, that that that is a great point. I mean, reduce your bundle size, overall, reduce your initial download size. And if you're doing like code splitting, and all that sort of stuff. And your CSS is in those JavaScript files that goes along with that. So you're not you're only loading what you what you need at that given point. Yeah, another, you know, Pro is interaction with JavaScript and the environment. So being able to accept props and JavaScript properties into Well, I'm in react, I guess, I should mention that I speak on this as using styled components, with react and not any of the other

10
00:09:59,010 --> 00:10:00,000
front end frameworks. Really

11
00:10:00,450 --> 00:13:51,810
So being able to pass in props and actually modify or have real JavaScript logic, in your CSS, or in your Yeah, I mean, that, to me is a nice killer feature, you can develop some really nice complex components that accept properties to modify them and things like that. Yeah, how many times if you wanted an if statement inside of CSS, some, I don't know, maybe seven, or Wow, I don't know how many times I've wanted it. But it's Yeah, I know that I think about like, hmm, it would be nice. Or you've had to pop in a media query, just for one little thing to do a check, or you've had to write some hack in CSS, and being able to have full access to a programming language inside of your CSS is super helpful. I also think it makes for much better readability in your code. So if you use styled components, you end up having the component with ever whatever name so you're essentially trading class names for components, if you think about it that way. And so if you have, instead of having a dot card, or whatever, if you have a card class name, you now have a card component, and you're not reading div class name card, rather than you're just reading card. That's what it is, right? So it's not a div with the descriptor of card ID, it is a card. And to me that really helps with readability when I'm looking at my my react code overall. Yeah, I think one big con. And I think as people what why people have a bit of a knee jerk reaction to it at first is that it doesn't look always like CSS. There's a couple we'll talk about this more when we get into it. But some of the implementation of CSS and j s, do not look like CSS and people love writing CSS, they love the syntax. And if you ask them to switch to something that looks a little bit different, whether using camelcase, instead of dashes, or whether you've got these arrow functions all over the place for media queries, instead of just writing a proper media query. Yeah, the syntax can be a little bit funky. And I definitely am a huge proponent of you should still be able to write regular CSS in these files, with your regular syntax highlighting with your regular shortcuts in everything, because it shouldn't feel like you are trading off something in order to get the benefit, you should be able to just write your regular CSS in. So that's totally possible with some of these libraries. Yeah, and another. That's another con is the tooling, right? How many things they used to that you use all the time in CSS that go out the window? For me, it's things like Emmet, or I used to use Haiku on Sublime Text. But the tooling just isn't there yet. Because you're I mean, your properties are based on the Library, they're not all the same. So you have all these different libraries. And the tooling for each library is up to essentially the community around that library. So unless there's one, you know, standout winner amongst everything like that, the tooling is going to suffer a little bit, because at the end of the day, there's a billion more people writing CSS than there is CSS in JavaScript. So for me, I found that to be a bit of a pain point not being able to use my keyboard shortcuts that I'm totally used to within CSS. Yeah, and I think that this is just a temporary problem. I've looked into a lot of these like, kind of selfish developer pain points that I've had around tooling and syntax highlighting, and they are all being worked on. So I think that absolutely got a lot of people blazing the way right now in in a year or so. It's going to be very comfortable to be able to write your CSS in j. s, and in your regular editors. Yeah, definitely. Yeah. And it has gotten better. I mean, when I first started, there wasn't a syntax highlighting for styled components. And then sure enough, like a week after there was a syntax highlighting for style components, so it is growing, it's a new thing. And with new things, it's always a little bit of a lag behind on on stuff.

12
00:13:53,130 --> 00:14:36,600
So yeah, what are some of their pros and cons here? One of the cons that a lot of people say is that it's ugly. And I used to be this way about them, you know, with bam, you write these really crazy long CSS classes, and then you apply your CSS to it. And people myself included, you get so hung up on writing beautiful CSS, when at the end of the day, it really should just boil down to like, is this maintainable? And is this going to do the best job for my CSS? So with bem you, yeah, you have to write out your HTML is a little bit fuller, but no one cares what your HTML looks like. It doesn't have to be beautiful. You can have 1000 class names, or you can have really long class names on it. And it's not going to be a problem. So

13
00:14:37,770 --> 00:14:59,910
with style components, it will most of these libraries will generate a unique class and apply it to your element. So it'll be like 4899, a five one, and then it will have that selector in a style tag or a CSS file that then correlates with that actual element. So that looks ugly. But again, that's something a source map can do and

14
00:15:00,000 --> 00:17:37,740
Again, a source map is something that will show you as you've authored it in your source file rather than the compiled output, which you shouldn't be fretting all too much about. Yeah, yeah, here, here's a pro that is kind of interesting, something I kind of ran across by accident when I was developing sort of a elements folder for myself of, of a structure of basic elements of styled components for my level of tut's site. And in that process, I found out basically, if you're containing each of these elements in a file, you can export these in a way where you could export everything, import everything in sort of generate a style guide for yourself, just simply through JavaScript, right, you could grab all of these components that are defined in a file, you can output them any way you'd like. And then you get these style guides. And if I were to add another component to that file, it would just add it to the style guide for me. So using the components name, and whatever structure I determined it to have, but either way, that was like such a huge thing. Because Sure enough, I just I made a kitchen sink page for myself, in absolutely no time, I didn't have to write the HTML myself, I just said, hey, go in this file, grab me all these components out, put them in this way. And then that's it. So that was such a huge benefit, for me is like an automated style guide that I didn't even have to think about. Absolutely, I think the the last pro that I have here is shareability. It kind of similar to what you said is that these things are literally scoped into themselves. And you can bring them anywhere that you want them. So if you have a specific button or a specific grid, and you a lot of people have multiple applications, multiple code bases, and trying to get those things to look the same across all of your apps, is hard. So if you can build something where you can just npm install a component and the CSS comes along for free, or you can you share them between all your applications, it's going to be a lot easier to maintain a consistent style across all your apps. Yeah. And they're easy to extend with that, right. So if you have maybe your own library of base components, and installed components, you can take that let's say that card and do card dot extend, and then write any sort of modifications. And it's just like adding an additional class modifier and bam, or something like that. But either way, it's taking that component that exists and in modifying it. So just really, really nice way to collect your styles that need to be scoped to that particular thing. Right.

15
00:17:38,910 --> 00:18:49,290
Exactly, exactly. So let's jump into some of the different libraries out there are there, we're just going to go over the few that we know, I know that there are tons out there, it's really cool. Because there's a lot of people putting a lot of time and energy into figuring is figuring this problem out. And we're gonna go through style components radium emotion, glamorous and style JSX. Again, there's a lot more out there. So feel free to look into the different ones. Yeah. And I mentioned before my experiences primarily through react, so Angular and view, folks. Yeah, we I don't have the experience in styled components or, or whatever you even call it's CSS and j. s, within view or Angular myself, but I would assume that you know, that the libraries are there. So I guess I don't know if you know, of any particular libraries for those plans. Yeah, I know, view itself has the built in ability to write all of your logic JavaScript, your templating, which is HTML ish, and your CSS all in one single file, which is really cool as well. So it comes along with the whole idea of this being isolated from from all of them.

16
00:18:50,370 --> 00:19:58,530
ie up And today, we have Freshbooks sponsoring us once more. Thanks so much for sponsoring, if you haven't heard of Freshbooks, by now, it's cloud accounting software, which is essential tool for anyone that runs any sort of small, medium, large size business, it needs to build people has expenses has taxes has all kinds of numbers that need to be put in. So maybe for this one, I want to focus on one of my favorite parts of Freshbooks, which is the iPhone or the Android app. A lot of my business is done on the road, I don't necessarily have time to sit down at my computer. So the app is really really good for checking who owes me money, who is paid. Often what I used to do is when I deposited a check into the bank, and then I'd forget to mark it as paid. And then two months later, I'd be like, did they pay that or didn't they? So now what I do is I just open the app as soon as I deposit the check marked as paid. If I've got a receipt, I'll take a picture of it. Fantastic app. If you're running a sort of small business, go for freshbooks.com forward slash syntax and enter syntax into the How did you hear about a section Thanks so much to them for sponsoring.

17
00:19:59,580 --> 00:20:00,000
So let's

18
00:20:00,000 --> 00:20:34,680
Start off, I'll kick it off with style components. This is probably the one that Scott and I both have the most experience with. So we'll probably talk most about this. And it seems to be the most popular one out there, not that you should just go ahead and pick that one. But it's definitely one that you should be considering if you're looking, looking at different ones out there. So the way that style components works, and a lot of people say when you when you pick up CSS and j, s, and you, you learn it, you're good you go, that's it. And it's funny, because it really isn't all that complicated. So let's say you wanted to create

19
00:20:35,730 --> 00:22:12,750
a button. The way that it works is that you import the styled from styled components into your JavaScript, and styled has all of the the elements built into it. So what all of your regular elements here your anchor links, your buttons, your h1 through h6, your paragraph, your div, any element you use to select your use the styling in HTML, you just say const button equals in this example, from their website, style dot A. So if you want to make a anchor link that has some style applied to it, you just create a brand new component, that is called a button or call the buy it now or called, I have one called take my money in an app I'm building right now because it's it's like a really shiny, nice button that displays the product name as well as the how much it costs and whatnot. So what that does is you use a style dot A, and then you use es six bactec. So this is using something in ESX, called a tag template literal. And it's kind of like being able to run a function against a string. So you just you just write style dot A or style dot P or style dot div, whatever element you want to use, you open up your backticks. And then inside of that, you just write all of your regular CSS that needs to be applied to that. So you can say display block background, red, margin, to REM width, and you can use JavaScript with your dollar curly brackets inside of any of these if you ever need to do any sort of

20
00:22:14,490 --> 00:23:00,960
any sort of logic inside of it. So then once you have that, and you can, of course do nested selectors as well, sometimes people think like, seriously, I have to make a new one for like, Can I not just select the span inside of it? Or can I not just select the paragraph inside of this div? And the answer that is yes, you can just do child selectors, like you would in sass or stylus or anything like that, apply all of it. And then when you want to go to use it, rather than adding a class to your div, you just have are adding a class to your button, you just have this new component called button, and you use the button in your markup or in your JSX as if you were using just an anchor tag. And you can give it all the other properties that you are then used to and it will render out to a proper anchor tag.

21
00:23:01,980 --> 00:24:24,090
So yeah, how did I do and explaining that you fill in the gap? I thought that was fantastic. Yeah. You know, the, um, the using the backticks, as a function was something that I had never seen before I use style components. And it was really, really like, wow, you can do that. It was is a really good moment for me, because I had no idea you could do that before this. But one of the things that impressed me most about stub components compared to its counterparts was that you aren't writing a different syntax, you're writing CSS inside of that, that string right? inside of that string. You're still using display colon, inline hyphen, block, semi colon, right? I mean, it's, it feels just like writing CSS, and you're not having to do your camel cased properties and stuff like that or camel cased values. And I really really appreciated that because what it did make because it would have made was it made really like converting CSS over to styled components really easy because I could just copy and paste it Now granted, I was pasting from stylist so I had to go in and add colons and semicolons and that kind of got it in yeah I had to I quickly googled stylist syntax and styled components only defined you know there's there's nothing out there you know what somebody tweeted me like two days ago with a screenshot of

22
00:24:25,110 --> 00:25:00,000
the ability to use stylist in backticks. And it's not adapted for style components yet but it looks like it's coming in. He sent it to me specifically because they know that I love stylist, so excited about that. Yeah, I would I would be down with a discount for that because I am just you know, I've been using this and that is the the only pain point for me is having to add the colons and semicolons but for the most part, I really loved the system within styled components more so than the other options because it felt very comfortable to to me as a

23
00:25:00,000 --> 00:28:43,680
CSS writer, you know, I mean, my background primarily is in CSS and front end tools more so than JavaScript, right? So coming in being able to write the CSS I'm so used to was like a really, really important thing for me. And to me, I think some of these things like being able to pass in props and access your JavaScript is easily because it's a just string interpolation. It's on backticks. Right. So using that dollar sign bracket, it's just JavaScript syntax or JavaScript syntax that you know, and love. And being able to inject that actual JavaScript into your CSS, I found to be extremely powerful. Some of the pain points for me with styled components are things like media queries, I've you define your media queries a certain way. But then after that, the syntax highlighting and tooling is sort of not caught up. So if I do a media query, and I do it using the syntax that style components, defines here in their documentation, right? In VS code, with my setup, it everything inside of the media query, like just becomes a flat string color now, so it's not like green, or whatever I have it set to, and it doesn't get the proper syntax highlighting, like everything else does. So minor pain point there, I don't know if that's just a tooling thing that will get updated at some point eventually be totally gone. But I did find some things like that a little, little clunky. But for the most part, I really liked it, all of their documentation is excellent. It shows you really practical examples about getting started, you can use it as much or as little as you need to, you don't need to use any of the advanced stuff like theming, and things like that. But you can if you want to, and they're all there and the documentation is there. And it's good, which is definitely one of those things that you know, it's easy to take for granted when documentation is complete. And, and good, right? Yeah. And I want to run over one more example of something that you run into, often, which is sort of doing a variant on a style that you have. So like, let's say you have a Buy button, and it's blue background white text. And then you have like a sale Buy button in in that case, you would change the background to red or increase the font size, or put some confetti on it or whatever it is that you want to do. And if that's the case, the question becomes like, What do I do? Do I just copy paste and make another component? And the answer is obviously, no, there's two ways you can you can sort of tackle that. The first is that you can, you can pass props to your to your component, meaning that like you might have a button called take my money. And then you might have a sale button that says take my money, and then it just has a sale attribute. So you just write sale or sale equals true. And then when you are styling these things, you have this props object available to you and you can do a check with JavaScript, little Turner Turner airy, I can never see her near ternary Oh, man is there in there, I don't know, I don't know there's no, I just continually screwed up anyways, you can just do a little turn, say it for me ternary ternary operator in there to check if there is like props dot sale. And then if it's true, then you can write background blue. Now if you've got 1516 styles that you'd like to change on that button, in that case, you can just take your your base button, not use props, and just extend it into a secondary button to maybe call the sale button. And then that will then you have two components, one that's based off of another one. But as we know, extending things can,

24
00:28:44,760 --> 00:29:51,750
can get out of hand. So you gotta gotta be careful with that. Yeah. And I found extending to be much nicer in something like styled components. And I don't know if it's just because of how you're viewing these things. I don't know if the process is necessarily any different if you really think about it, but you know, I extend things to have, like, obviously, I have a main button right just button and then I have you know, primary button. And that marry button extends off of main button and changes maybe the color or something like that. But then I use props, like you mentioned for things like size, so like, size equals larger size equals smaller, whatever. And, and that will determine so you don't have a large primary button, I have a primary button with the property of large. And so like making those decisions, I found to be an interesting exercise in how you think about your components. And it has led to a lot more clarity in how I think about scoping these things. And obviously these things can all be done with CSS without JavaScript in some some sort of way. But like, I don't know if it's just the visual aspect, but it just feels

25
00:29:53,130 --> 00:29:57,750
it feels more I don't know just very like

26
00:29:59,340 --> 00:29:59,970
clear

27
00:30:00,000 --> 00:30:42,030
More better, yeah feels more better and clear. I think what it comes down to is when you actually wrote your initial CSS, where you have the mindset where you did something like them, where you had like a button component, and then you had a modifier on that. So it's button dash dash large. And if that's the case, then it gets all the button styles, and then you have a button dash large that will overwrite or add selectors onto it. Whereas there's a whole nother set of people who prefer to have 12,000 classes like Pb 10, Patty, bottom 10, f Zed 20, which was Fanta, and then you just like you just like, take these, what's the name of that?

28
00:30:43,440 --> 00:31:43,980
Oh, utility classes. Utility classes. Yeah, exactly. So those are those is it just a bit of a different way? I think the people that prefer utility classes probably go a lot more heavy on props, whereas people like more bem style will probably do a little bit more extending. And I don't know if this is necessarily fits the definition of ironic or not, but to me, like utility classes, I'm not hating on these free utility class people, by the way, utility classes, to me is much more of an inline style system than writing JavaScript, or CSS and JavaScript, because you're essentially defining your styles through class names, right? rather than, you know, I mean, yeah, rather than their class descriptions or something like that. Like I said, I'm not trying to start a flame war here or something like that. I will accept any, anything that has its share of benefits. Awesome. So that is style components. There's a whole lot more to it. But that's like, I hope hope that you get like a basic idea of like, what is it and and why does it seem to be

29
00:31:45,090 --> 00:32:07,590
very popular? Yeah. So so that's styled components. Next up, we have a library that's actually really similar to styled components in syntax, which is emotion. Now, emotion is sort of it basically, I mean, a flat out says that it took the ideas from these other libraries, and it has a focus on making them a little bit lighter.

30
00:32:10,110 --> 00:32:22,830
I was reading that the the performance, or the overall bundle size is supposed to be smaller. However, I just had it there, their GitHub page, and I'm not necessarily seeing that being pointed out anymore. I

31
00:32:23,880 --> 00:32:40,920
do. Do you know if that's changed in their system? No, this is actually not something I've ever had, a lot of people have recommended it to me. But I don't really pay all that much attention. Because at the end of the day, I don't really have CSS performance issues.

32
00:32:42,330 --> 00:32:55,950
I think it's a bit a bit splitting hairs. In a lot of cases, I'm sure there's applications out there where you really need to hunker down on it. But it's never really been a huge issue for myself. There's this bench CSS and JS benchmarks,

33
00:32:57,090 --> 00:33:34,590
GitHub repo, which lists out all of the different ways. There's probably 20 of them here. And we'll talk about the mount time and the render time that is used in that. Let's take a look here at emotion. Yeah, so emotion has, the reason why I wanted to bring this up now is because it has the really similar syntax to styled components, where you're using the same backtick function style thing, the only difference is, you are using a CSS not styled. So it's very similar. I found two styled components, and maybe like syntactical ways,

34
00:33:36,090 --> 00:34:30,900
but just a little little bit nicer. Yeah, I'm looking at the the render time here. And it looks like emotion is the fastest besides react without any styles. And then if you go down, go down the list to styled components, it looks like style component is almost double the render time. So definitely something to think about if you're running into issues with perf. Yeah, and as I'm seeing this, it looks like they do have the same styled object with you know, all of the different, you know, HTML properties. So like style dot h3, so it looks like to hear from their syntax, you might be able to mostly do just a standard drop in replacement from this to style components. Like I said, I I don't have the experience using it. So I can't confirm That's true. But this example right here that I'm looking at looks just like styled components. So yeah, it definitely wanted to keep an eye on

35
00:34:32,430 --> 00:34:33,300
pretty sweet.

36
00:34:34,410 --> 00:35:00,000
So next up, we have another one which is radium, is that correct? That is correct. And this is from formidable labs, which they do quite a bit of stuff in, in the React space. So it's something that I would definitely trust. Have you used this one before? No. But this was the first library that I saw when people were starting to talk about libraries for styled components. radium was was one of the first to do

37
00:35:00,000 --> 00:39:59,970
It I think, at least like a very more mature way. And I never used it, I think this when this came out, I was still in the whatever CSS and JavaScript sort of mode. And one of those reasons why that I was in that mode is because this is more JavaScript based, where you are defining an object of styles. And it's all very JavaScript, right? It actually feels more like writing styles in React Native or react in general, where you haven't an object property, your your CSS property becomes a, a object key, and your value becomes a string, or in some cases, is they're all strings, I'm not quite positive, they're all strings or not, but most likely a string or something like that. So to me, it's, it's a little bit more foreign. And that makes me scared. And, yeah, I think that's probably why I never latched on to it. Yeah, this is just looking at the the base syntax of nested objects and having to use quotes around your actual values and, and having to camelcase maybe like font size, instead of font, dash size, and all those things. I think that that's a lot of people don't care about that. But I think that most people will care about it. And especially if you're trying to bring on, maybe you have people on your team that write the J s, you have other people on your team that write CSS, there's no way you're going to be able to convince those people, they're not going to be happy switching over to such a rigid way of actually styling your application. So that's one reason why I have never checked this out before. And I think that also goes for, for glamorous as well, where a glamorous seems to do most of the stuff that comes along with style components. But at the end of the day, the fact that it uses camel case and an object style your stuff is a bit of a deal breaker for me. So that's a reason why I have not never checked it out. Yeah, I think that is a it's a barrier to entry for CSS, people who like writing CSS, and I mean, the the joke all the time is that, you know, everyone hates CSS, it sucks, or whatever. But I love writing CSS. And I know a lot of people really like writing CSS, you know, embrace, embrace the cascade and all sorts of stuff, right? They just like they come from this CSS background. And so for me, like you said, that is a deal breaker, it pushes me a little bit too far into the I'm uncomfortable territory, to necessarily like really reaping the benefits. I mean, I can't copy and paste my CSS code that exists into a glamorous object without doing some heavy modification. It's not just adding semi colons and colons or whatever, it's heavy modification. And that to me is is a bit of a bummer. That will put me off from using it. Yeah, yeah, absolutely. I feel exactly the same way. So I'm have used glamours. Before. Note, taking a look at it, I've taken a look at all of them, I did a bit of a drive by tour to like, check out all of them. And I was like, trying to see, you know, everyone's telling me about the hype, hype hype about CSS and .js. But most of the time, people were mentioning styled components. So I had that one in my mind is like, Hey, this is the one I really want to look at, because my audience is telling me about it. But at the end of the day, I was like, I don't want to make a decision, because my audience is telling me about I want to explore all of these. And like I said, I did a bit of a tour and was just like really not feeling the JavaScript object syntax. And like I said that that is probably because I come from a CSS primarily background then rather than a JavaScript heavy background. Yeah, absolutely. And I think that if you are still out making a decision, for sure, take a look at all of these and make your own decisions. I know that when we announced that we're doing a CSS and JS podcast, I got messages from at least four people being like, Hey, can I chat with you before you do that, to make sure that you know, absolutely everything about this, because the stakes are high. And there's a lot of a lot of stuff moving quickly right now. And there's a lot of misconceptions around that stuff. So definitely don't take everything that we're saying to heart, do your own research and take take a look into all of it. Yeah, for real? Yeah, I think that is a big thing. And it's just fiery, right? People get really, really upset about this. Oh, I have more so than in like most other I mean, people get upset about, like JS frameworks or databases or whatever, but like people get upset about CSS and JavaScript. So yeah, yeah, definitely do your research and what works for you. I definitely think the the JavaScript community came at it a little bit harsh, because it was kind of like, like kicking someone's door down. It'd been like Don't worry, I'm here to save you. But and then people are just saying that right in there bem styles mean like, Ah, I'm pretty happy. I'm fine. Thank you though. And then there are no

38
00:40:00,000 --> 00:41:48,000
You must use this. So sometimes when people are so passionate about it, whether it's being a vegan or CrossFit, or CSS and j s, they could come off a little hard. But definitely don't let that deter you from actually checking these things out and, and seeing some of the real benefits to that. Yeah, and I'm going to take a moderate stance here and say that I like it. But I also have not abandon my CSS or my global styles, like I do use global styles still. And I do use CSS still, in addition to style components, it doesn't have to be your inner ear out, you can use a little bit of style components where it makes sense. And you can use a little bit of CSS where it makes sense. It's all about you know, what works for you, and what makes sense within, you know, whatever is maintainable within your code and your team, I have the added benefit of being the only developer on my site. So it's like, I'm the only developer, I can make these choices. And I can deal with a little bit of transition pain while I move things over and can keep some of my CSS and j. s and some of my CSS and stylus and exactly how do you like, let's take a question here. How do you handle global styles? And what do you do for that are global style styles? Yeah, so for me, I have global styles really set up and in a really basic sense of just like straight up elements stuff. So I determine what my h3 will look like, what my h2 will look like, whatever my headers, my paragraphs, all that sort of base size along with, like, what, what they do at different browser sizes. So I am still thinking as like, Hey, this is an H three, this is what h threes look like, I'm not always thinking, Hey, this is a card header, this is what the card headers look like. And obviously, you can go all the way with that and make out all your elements,

39
00:41:49,200 --> 00:42:21,660
you know, really, really scoped components. But you know, I don't, I don't mind I have h threes across my site. And this is what they look like period. And if I want to modify those inside of those, I can use styled components, let's say I have a card, and you can have that scoped h3 inside of your cart, well inside of the car to the h3 is now all of a sudden, this size, or these colors, or whatever. And that is scoped to that card, because that's the only way it's used. So I have basically a general rule set applied to things like font sizes, font styles,

40
00:42:23,130 --> 00:43:42,270
basic colors, and stuff like that defined in my CSS, and then most everything else moved into components. Yeah, I'm exactly the same way I've been moving over. Moving over to that way as well, I find that it's a bit too slow. And I don't necessarily know if that's the way to go is to, to redo all of the font size and padding for all of your type in every single component. So what I'll do is I'll style all my headings, all my paragraphs, all the fonts, all of the the padding, and I have a nice quick base style. And then I can I feel like I can work quickly, once I have that base style done, because I'm not spending a lot of time redoing the same work over and over again, obviously, you can you can set a set of base styles and import and export them into your components every single time. But at least for me being the only developer I don't have, it's not really a pain point for me, that that I have. So I'm fine with having them global. And I feel like I can work a lot quicker. Yeah. And for me, it's more of a personalized CSS reset, right? It's a reset for my brand, right? It's not resetting to absolutely blank, everything it's resetting to the defaults for my brand. And that's just the way it is. So yeah, that's sort of how I look at it. Not only that, but like sort of, you know, what's left in terms of,

41
00:43:43,350 --> 00:44:20,160
you know, CSS, I'm slowly moving it all over. So whatever is left in CSS will kind of remain there. But there's a lot of great feelings with vanquishing a ton of lines of CSS code that you no longer need, or maybe never weren't even using anyways. But, you know, we're just sitting in your stylesheet for legacy reasons, or because they were required at some point. And you missed that, right. I know, there's tools to pull that stuff out. But either way, there is a nice amount of good feelings that come along with doing a bit of spring cleaning, and really thinking about your app from a component based style if it already exists.

42
00:44:21,270 --> 00:44:59,970
Absolutely. Let's talk about the last one, which is styled JSX. And this is the one that comes baked into next j s if you've ever used that before. And the way that style JSX works is it's actually not the same as the rest of them where you you create a paragraph tag and you apply styles to it. The way that it works is that you simply just have a style tag in your component. So maybe you have a div and a paragraph and h3 and a couple other things and then you what you do is you just pop open a style tag, and then you just write regular CSS inside of that style tag but the style tag will help

43
00:45:00,000 --> 00:47:01,980
Have a JSX attribute on it. And then what you can do is your selectors are just like paragraph. Or you can use class names if you want. But But generally, you can get away with just using elements, selectors, h3, paragraph, whatever. And it's going to scope those styles to only the elements and components in your, your main component. So it's not going to leak anywhere outside. So you're just write regular old CSS. But really, the only difference between this and regular old CSS is that the CSS will be transformed and only applied to those elements in that component, and nothing else in the entire application. So same benefits, just slightly different way of authoring it, which to a lot of people is is welcome. Because it's it's exactly like CSS. Yeah. And I'm gonna go ahead and say there, there's one thing that I don't like about style JSX. In that it doesn't, to me, this is me personally, if if you're not this way, don't worry about it. It doesn't feel more readable. When I look at the code. Like I said, with styled components, I look at the element and I'm no longer seeing a div, which is like an arbitrary definition, right? I'm seeing a card. But with this, I don't I don't get that same sort of further clarity in my CSS or in my components, which is why I would choose something else over this. I do like that. You can write legit CSS in this. But yeah, I think it doesn't add, it doesn't get any clarity points for me, personally, which is probably why I'm not using it. Yeah, exactly. And I think, with style components, obviously, with both of these you can, you can create these reusable components that are only style based. And then you have other components that does all of your logic, your fetching your data, and whatnot. And you can you can reuse these buttons all over the place. And they're just like just styled buttons. And with style components, the it the style dot div, it actually exports a component right for you, you don't even need to make like

44
00:47:03,420 --> 00:48:10,380
an arrow function component or whatever with react on this. So pretty neat in that regard. I built a couple things with style JSX. And I built a couple things with style components. And I'm definitely on Team style components now. Yeah, yeah. here's a here's a question I have for you. That's not related to anyone in particular, but more about styles, I guess it makes more sense with things like emotion and style components or anything where you get an actual component, how what, what is your particular style of storing your styled components? For me personally, I have sort of base components and, and things that I use all the time within their own files and file structures and stuff like that. But then I also have a class of styled components that live within an individual components file, which sort of breaks some rules about one component per file. Yeah, but I'll throw it at the bottom of the React file. So it kind of stays out of the way. And this might be an extension on a component that only exists within this particular react component. And that's it.

45
00:48:11,430 --> 00:50:00,000
Do you do something like that? Or do you have more of a everything lives in its own folder and file kind of thing? Yeah, it's funny, because we were just talking about this whole idea on Twitter the other day with Apollo enhancers does the same idea it's a Hierarch, high order component, do you keep that in a separate file? Or do you put it in the same file and sort of what I've settled on right now, and I could be swayed either way is, I always do them in the same file, just for my own sanity sake, especially if I'm trying to teach something to people, I want them all. I want them all readable in the same file. And if I need that thing more than once, I will put it into its own file and import it, import it in. So it's sort of like as I need it all all refactored out into its own component and import and export. But in a lot of cases, you only need it in that one file. And you're really not reusing it all that much. So I think it's totally fine to put it in the same file. Yeah, that's pretty much exactly how I do it. If it needs to be reviewed, reused. Things like layouts, buttons, that sort of stuff. headers, paragraphs. Yeah, yeah, typography, which I think makes people who love rules Twitch, because people always ask me like, what do you do? I'm like, kind of a bit of both. And it kind of feel it out depending on what you want. And people love, like, strict rules of always do it in a separate file or always don't. And that's just not the way that I'm going about that. So sorry, if it's making you twitch now. Yeah, right. Exactly. Again, the benefit of not being on a large team here, because you can make those decisions that that might be a little bit confusing for some people and your overall team or might make maintainability a little bit of an issue or whatever. I don't know I totally agree if this if this component is not leaving this other react component, then what is the purpose of

46
00:50:00,000 --> 00:51:09,390
Moving into its own file. But yeah, again, I could be swayed either way. Cool. Um, let's finish it up with some common questions that myself I've had as well as you sort of hear, maybe people ask about it. One of the big ones is what about a framework? What if I'm using a framework like bootstrap or foundation? How do I then use that framework as well as use my my styled components? So I'll answer this one from the standpoint of style components, you still have the ability to add classes on to your elements regardless, so you don't have to go all in on this, you can just add classes with style components, there's the ability to add an options object, where you can give it additional class names, as well as give it your own CSS. That's what it will do. When it creates the element at the end of the day, it will give the CSS class to it. So no need to sweat it, you can definitely use both of those. And and build a nice app as well. Have you had to use those together? Scott, I haven't haven't done much work with CSS frameworks really, overall, or at least not recently. So

47
00:51:10,410 --> 00:51:39,150
yeah, I think that's a great solution, though, because then you still get all of that good stuff that comes with. And, you know, it's nice that the tools offer that ability to not have to totally abandon all of that stuff that exists and makes some people's lives a lot easier. So yeah, exactly. Even if you're like migrating something over as well, you might want to take the existing styles class, and then start applying your new stuff on top and slowly phase out that that class name that you've had, Yeah, totally.

48
00:51:41,670 --> 00:52:05,400
Um, what about vendor? prefixing? You know anything about this? Oh, to be honest, stealth components, I think brings in a certain level of vendor prefixing that you can adjust. It doesn't not? Yes, it has exactly. Because I haven't thought about Auto prefixing. Since I started using style components, you know, when you're inspecting your CSS, you can see it's getting those prefixes.

49
00:52:06,750 --> 00:52:31,380
I'm embarrassed to admit that I did not look into the configuration of that. And I was just like, okay, it's getting the prefixes. Okay, cool. Yeah, it just works. So you don't have to worry about it. Because I believe all of these things we've talked about today, come with autoprefixer built in. And then if you ever do need to pass additional options to these things, you generally can do that in your, your Webpack config, or your next j s config.

50
00:52:33,300 --> 00:53:51,930
Word. And then the last one, we talked a little bit about already, which is what about Emmet, and syntax highlighting which I have not personally gotten Emmet, to work within VS code and style components. And I have syntax highlighting working, definitely if it's in its own file, but if it's a part of a another react component file, it becomes a little bit trickier. I mentioned before that if you have things like this extra Meteor query syntax that the second layer of code wasn't getting syntax highlighting for me. So I don't know if you found any other solutions for any of this stuff. Yeah, um, so the way that these editors work is that you have scope. And what scope means is that you can write some regex, to tell your editor that when you are inside a style tag, you are writing CSS. So all that needs to be changed in these things is that you need to rewrite one of those red X's that will tell you when somebody writes style dot div or style dot something, it will kick in the CSS syntax highlighting rather than the JavaScript syntax highlighting. So and then once that's the case, all of your plugins like Emmet, and whatever, all of your auto completion, all of your things that are only triggered when you're in the scope of CSS will then start to work. So

51
00:53:52,980 --> 00:54:19,560
sublime has absolutely nothing for this right now, which is a bit of a bummer. I think it's because it's a bit we're a bit limited and sublime in terms of how much fine grained control we have. I think that's part of the reason why VS code and Adam are becoming so popular right now is that you don't have to wait for the mothership to add in something to the JavaScript highlighter, like for example, in

52
00:54:20,670 --> 00:54:59,970
the JavaScript highlighter in sublime was broken for a long time when we started writing ESX. So somebody wrote this thing called Babel, or Babel, syntax highlighter for sublime. And that was able to highlight all the new vs six stuff as well as highlight JSX, right, because JSX is not part of JavaScript, but someone is able to modify it. So now we have to wait for either the mothership of Sublime Text to update it or wait for the person who's writing the babble one two to implement this as well, which is kind of a bummer. And I know Adam and VS code, allow anyone just to go in there and add themselves rather than

53
00:55:00,000 --> 00:55:29,190
having to wait for your your syntax highlighter to do it. So I'm definitely looking at switching over to VS code right now just because of this. I don't know, I don't know if there's any movement in sublime, but I haven't seen a whole lot of info about it. Yeah, I'm 100% in VS code territory lately. I think some of the some of the issues that I might be having might be related to the insiders build that I'm on. I'm on like a beta version of vs. code. And they actually use an entirely like, new Emmet system,

54
00:55:30,480 --> 00:56:22,560
which I have found, because it's obviously it's in beta, I found to be extremely buggy from time to time, but obviously, it's beta version, right? You can't expect anything else. So that to me has been sort of bouncing around. And each each update that comes each nightly update. I'm sort of like, Oh, please fix this. And this, okay. Yeah, sometimes they're fixed. Sometimes you're not. And sometimes it breaks whatever. And yeah, that's what you get for trusting beta software. Exactly, then this stuff I think will be fixed soon, I hope will be fixed. Because there's no way that we're going to get big adoption of CSS and JS before all of these things are hundred percent fixed. Because if you tell any developer who's used to doing their job, everyone has deadlines, and you try to switch them to a new method of doing it and tell them get the same amount of work done. They're going to be extremely frustrated not to have the regular tooling and

55
00:56:23,790 --> 00:56:25,650
in highlighting that that's available to them.

56
00:56:27,780 --> 01:00:00,000
Word. Cool, so let's switch over Is that good? Yeah, I think it's good. It's, uh, we're at an hour. So all right, let's switch over to our sick pics. What do you got for me today, Scott? Yeah. All right. I have a email client for Oh, s x, or I guess it's Mac OS now that with everything matte or OSX, and I have to research for Mac OS. Okay. This is boxy. And this is boxy. app.co boxy is a paid mail client. It's cheap. Let me see how much it is here. For Yeah, Mac OS. It's 499. I was having a major struggles trying to find a nice email client. I opened up Apple Mail, because I just got a new laptop. I opened up Apple Mail for the first time in this century and was like, well, let's check out Apple Mail. It looks the exact same it sucks it honestly, I feel really bad saying that. I think one of their developers tweeted at me when I said it was archaic looking. I felt really bad about it. Because like, No, I mean, the the whoever works on it, I'm sure that it's all Apple legacy stuff. But it honestly it felt old. It felt clumsy. It felt featureless. So I started looking for mail apps that had a lot of the features that inbox has I use inbox, Google comm for all my mail stuff, because of the snoozing, and the sorting and the pinning and all that good stuff it does. And boxy is essentially a you know, a I don't know if it's an electron app, I would assume it is. But it's essentially inbox for Google on the desktop. And it has a bunch of fancy features that are outside of the scope of inbox. So I've been using it. It's really nice. It feels and looks just like inbox. It has themes. It has account switching. And they just had a new version come out like this week, like a day ago or so like boxy. It's, you know, the next version of it. I actually haven't even downloaded the second one. But the first one is so good. That, yeah, I'm assuming this is just going to be the next step and making it super nice. But overall, definitely a big fan. If you're looking for a nice email client. That's pretty cheap for 99 on the Mac App Store. Yeah, I bought this after you had recommended it. And so far, so good. I'm not totally sold on inbox feel like it's a bit not as information dense as I'm used to in regular Gmail. Mm hmm. And I feel like I often will, like lose emails for some reason, just because it's like, it's a little bit scattered in terms of seeing everything at once. Yeah, but I'm wondering if they'll they'll have the ability to make it a little less spaced and more information dense. See, to me this is like the it is like the exact same as the desktop, or the the browser version. And I really have been using it since it came out and that that interface for me has been like, my primary email interface for like a year, two years now whatever. And I think that's probably why it's not so shocking to me. You know, I could definitely see it. It's, it's, it's different. And it does take a little bit of getting used to, but coming from inbox and if you like inbox, it's basically the same thing. So you're gonna love it. So yeah, that's my son Jake pig sick. That is a sick pick. Yeah. My sick pick is the apple air pods that I got about a week and a half ago, two weeks ago.

57
01:00:00,630 --> 01:00:25,620
And when they first came out, everyone had their jokes, they're gonna fall out, you're gonna lose them. They look like toothbrushes in your ear. But they and then whenever you see someone get them, they can't stop talking about how amazing they are. So they are incredible, best headphones besides the Bose QC 35 best headphones I've ever had. Because there's no wires being able to go to the gym go for a run,

58
01:00:26,790 --> 01:00:36,150
just you just pop them in. And you don't have to worry about you can put your phone in your pocket and zip it up. You don't have to worry about having a wire, dropping it or anything like that.

59
01:00:37,410 --> 01:02:06,480
The pairing process is incredible. So you flip it open, and all sudden, it comes open on your iPhone. And it shows you what the battery is on both headphones as well as what the battery is in the pack. And then you and then when you put them in your ears, it turns on. And when you take them out of your ears, it detects that you've moved them and it will unpair them immediately. But then just put them back in your ears and immediately. They don't have to like mess around with the Bluetooth. I hate Bluetooth so much. It never works properly. And I'm always stuck in this like pairing hell. And it's just like a seamless experience, being able to hook it up to my iPhone as well as to my, to my computer. So I'm pleasantly surprised that they they were they're so nice. I thought that they would be a bit of a bomb. Nice. Yeah, I'm still a little skeptical because I'm on the Android camp. So I'm sort of waiting to see what Google puts out. But they look super nice for bluetooth headphones. Again, also in the position of hating Bluetooth, generally. So yeah, we'll see. I'll see if Google can put out anything but those air pods. That whole process seems really super nice. And that's the last thing you want is a pain in the ass for pairing when you're trying to just listen to anything really. Yeah, exactly. And you can also just put one in at once and leave the other one charging in the case. And the battery life so far has been been really good. So nothing but but happy about these.

60
01:02:07,860 --> 01:04:58,920
Nice, super nice. Ah, yeah. What about shameless plugs, any any shameless plugs that we got today. I don't have anything to plug really. I'm so like, I'm working on this large figma series. And it's, it's great. But I don't want to release it until I released my new subscription payment processing and all that sort of stuff. So I'm hunkered down, I'm just trying to get this out. I've been working pretty heavily in the the subscription and payment area and stuff like that. And I can confidently say it's going to be done in like the next week here, I'm just getting the final ducks in a row sort of with everything. And then after that, there will be a new, a new enlarge figma series for me basically teaching you the entirety of figma. So keep your eyes open for that. And I guess your ears a decent shameless plug, the subscription service for levelup pro when I migrate over, because I've had so much exclusive content now the price is going to be going up. So if you want to get in at the 899 price now or it's 95 a year. If you get it now, you'll hold on to that until you cancel your subscription. Whereas if you wait maybe like a week or two and this new series comes out, it's gonna be 19 bucks. So get in Yeah, if you get in now, you'll hold on to that for all of the future content I release. So yeah, that I guess that is a shameless plug here. Even though I didn't think I was gonna. Haha, there you go. Make sure you grab that I'm gonna plug Boomer Hamza. I don't know if I butchered his last name. But he has a course called modern dev tools. And I got a lot of times people emailing me asking if they'll, if I'll tweet their course or plug it or send it to my email list or something like that. But I've actually learned quite a bit from Kumar's dev tools, tips, you probably have seen them all over Twitter, anytime. There's a animated GIF, showing a tip in dev tools, it's most likely his. And what he's done is he's bundled it all all up and built this really amazing course called modern dev tools. And it just goes into like all of like the like the hard parts of dev tools, obviously, anyone can inspect element, but some of the performance stuff part of some of the more advanced dev tool stuff. It's crazy how much that goes into dev tools that we don't even know about. And he Amy accesses, I've watched a couple of them so far, it's really, really good stuff. I'm excited to dive a little bit more into it. Because not only is that going to make you like a better developer and quicker at debugging, but I think it's also going to help your performance of your website. So you know, exactly like, what am I looking at this like yellow and blue graph? What does this actually mean? Yeah, that's that modern dev tools.com those dev tool I mean, this, the dev tools in Chrome are totally invaluable when you like really dive into them. So yeah, I haven't seen this course but I'm definitely gonna check it out after hearing this sick pic

61
01:05:00,000 --> 01:05:13,799
Pick away that sick pick. That's your shameless plug. That's a shame. Shameful plug. Shameless plug. Yeah, shameless. Yeah, that I mean that's a sick pick shameless plug right there. Yeah, exactly. I think these things are kind of the same but whatever.

62
01:05:15,299 --> 01:05:32,940
So that's that's episode. Hopefully you enjoyed it. Feel free to angrily tweet your CSS and j s opinions as Scott. He is as solinsky let me know what I did wrong. Please, spare me. All of your opinions, please. That

63
01:05:34,230 --> 01:05:36,480
we'll see you next week. See ya. Bye.

64
01:05:38,880 --> 01:05:49,320
Head on over to syntax FM for a full archive of all our shows. Don't forget to subscribe in your podcast player and drop a review if you'd like to show until next time.

