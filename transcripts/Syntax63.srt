1
00:00:00,359 --> 00:00:24,000
Announcer: Monday, Monday, Monday, open wide dev fans yet ready to stuff your face with JavaScript CSS node modules, barbecue tip workflow breakdancing, soft skill web development hasty as crazy as tasty as web development treats coming in hot here is Sarah CUDA bombs and Scott Taylor. Totally.

2
00:00:25,980 --> 00:00:37,040
Scott Tolinski: Welcome to syntax, the podcast with the tastiest hasty as to where development treats around. My name is Scott Tolinksi. And with me as always, is Wes Bos a with a

3
00:00:37,070 --> 00:00:38,280
Wes Bos: Hello, everybody.

4
00:00:38,360 --> 00:02:59,580
Scott Tolinski: Hey, in this hasty tree, we're gonna be covering all things sort of cross origin, we're gonna be talking about JSON, JSON, P and cores. And we're gonna be just talking a lot about working with API's and JavaScript, it's gonna be a lot of fun. And on these Monday episodes, in case, this is your first episode, what we like to do on these Monday episodes is do a little bit of a shorter episode, maybe like a 20 minute dive into a particular topic that we can't necessarily spend an entire hour on. So if this is your first episode, that's what we're doing here. These are called hasty treats, where we get into one particular topic over the course of 20 minutes or so every Monday here, this episode is sponsored by Netlify. Netlify is an amazing hosting platform for hosting your front end code. And if you might be can cerned about it being a front end code thing? Well, yeah, let those concerns go to rest, because Netlify has the features to take care of any sort of server side stuff you could possibly need. For instance, if you need a contact form Netlify has a contact form feature. If you need a serverless functions off in the cloud, right, you can run a Cloud Function on a server somewhere with AWS, they make working with serverless functions extremely easy. Not to mention, there's also a whole feature set for having signups logins, password recovery, and that sort of stuff. And this is all on the front end code, right? Not only that, but the developer experience for Netlify is really second to none, everyone tells us left and right after each episode, we record, okay, I finally gave in and tried Netlify. And wow, because the initial experience is definitely a wow experience. And then definitely it got both of us by surprise when we first used it. And you just attach your repo you go and then it takes care of everything from ssls to continuous deployment. And it just makes hosting an absolute dream, it takes the stuff that makes you very concerned and frustrated usually, and just makes you feel very good about it. So check out netlify@netlify.com forward slash syntax. And let them know that you heard about Netlify through syntax, because again, this is one of our absolute favorite sponsors. I mean, all of our sponsors are our favorite sponsors, but we love Netlify. It's a great platform. And he absolutely just check it out. It's one of those things that you get to see to believe. And when you see it and believe it, you're gonna be thinking as you did, because it's awesome.

5
00:02:59,880 --> 00:08:36,150
Wes Bos: All right, so let's get into this kind of been kind of be an explainer sewed. And it's how to get data or anything early images text from one origin, which generally that means a domain name to a another origin, which is a another domain name. And generally in in back end languages and curl, it doesn't matter what where you get one thing to another. But in the browser, there's a set of specific rules that don't allow you to just reach from website, one website into another website. And there's there's very good reasons for that. And this is a question I get all the time from beginners who are frustrated with that cannot read header access control allow origin error that you may have stumbled upon? So we're gonna try to tackle what is JSON? What is JSON p? And what is cores? And how does that work? So first, what is JSON JSON stands for JavaScript Object Notation. And it's sort of developed as this standard for shuttling data from one website to another from one programming language to another. It's a it's been, it's kind of interesting, because it's, it stands for JavaScript Object Notation, but every single language has implemented JSON into it. And the way that it works is that you take whatever the equivalent of an object is in your language in JavaScript, it's an object in Ruby, it's a hash, I'm not really sure I don't know anything about Ruby. But every language has this idea of an object and you want to bring that object and move it to somewhere else. And what JSON does is it string a file that it turns it into a string and then a string is very easy to move, you can put it in a database, you can email it to someone or or you can likely post it or get it or put it over an HTTP request. And then the other end that is accepting that we'll be able to parse it, turn it back from a string into a the equivalent of an object in that language, whether it's coming from a Python server and being received in a PHP server or it's just waiting for in JavaScript, JavaScript, it doesn't matter because everybody gets along on the standard that we call JSON. Right? Now, let's talk about the the origin policy in, in the browser. By default, let's let's use Scott tolinksi.com, and Wes Bos calm as examples. But default, Scott Tolinksi calm can not request any page, it cannot request to do things on Wes bos.com. And that's for good reason. Because if I'm signed in on Wes Bos calm, and I'm visiting a visiting Scott tolinksi.com, Scott could run some JavaScript that would ping my website, and maybe ping a an endpoint that would list all the accounts. Or if I was signed into my banking, and then in had Scott's website open in another tab, Scott shouldn't be able to ping an endpoint of my banking website to send him all of my money. Because I'm already signed in right there's, there's likely a cookie in my, the way that cookies work is that you have a cookie in your browser. And then when you make a request, that cookie comes along for the ride without you having to do anything. And that's how it checks if you're signed in. So it's got to Lenski makes a request on West boss calm, that cookie is gonna come along for the ride. So that ping will happen. But the data that comes back from that Penguin, there's those other ways to stop that that's we're not going to talk about that today. But there's it's not possible for Scott, Scott delinski.com, that tab to read the data that was requested from the other tab. And that's because you shouldn't be able to reach from one website to another. Now how do you get data from one website to another, there's lots of options that you might want to use. In this case, like let's say you have weather.com has an API to pull the weather, you do want to be able to get the data from that API into it. Or if you're pinging the Yelp API, you do want to be able to pull a list of restaurants into your own website, because that's how API's work. And there's two ways to actually do this cross origin, the The first one is sort of the earliest one, you don't really see this any more. Because because of the second one, which is Corps, but the first one is something called JSON P. And what JSON P is it stands for JSON with padding, which makes absolutely no sense. But it's a workaround that will allow you to load data from one website to another. And the way that it works is that first of all, the website supplying the information has to be on board, you cannot use JSON p unless the server side is on board and actually will will supply up JSON p data. And this is something that I see people frustrated with all the time, they're like, I want to be able to use this API, but I can't How do I make it do JSON p? And if the answer is if the browser if the API does not give you JSON p or cores, you can't. And we'll talk about some workarounds on that in just a bit. Once your back end supplies JSON p the way that it actually works. The workaround is that you can't load data cross origin, but you can load JavaScript cross origin. So JSON P is actually not requesting a JSON document, it's actually requesting a JavaScript document that has a little function in it. That's called a callback. And that function has one argument, which is all of the data that is getting returned from the thing. So that's the workaround is people are just loading in, quote unquote, JavaScript, from one and that callback function will then supply you the actual data, which is pretty interesting. I laughed hard when I actually understood how it worked.

6
00:08:36,570 --> 00:08:40,590
Scott Tolinski: Yeah, no, that's actually really interesting. I didn't, I didn't know that until just a second.

7
00:08:41,130 --> 00:10:29,820
Wes Bos: Oh, there you go. If you look at a JSON p, you'll often need to pass it a callback. And then if you look at the response, the callback is just a function with a huge argument, which is all of the data that comes back. And that's great. A lot of people use that. But now we have something much better in the browser, in that it's called cores, cross origin resource sharing. And then the way that that works is that your server side will designate a a number of URLs that will be allowed to request data from your so I use this all the time, because I post every single every single time I launch a course, I launch a new website, and I have a single back end for my courses, which is that courses that Wes Bos calm, but if I ever want to pull data from the back end, like if I want to retrieve a list of courses the user has bought I do this all the time as if I'm having a sale. I don't want to show the sale banner if someone's already bought it right. So I might ping the back end and say did this person buy this course? If so, hide the hide the sale banner because it's it's unnecessary for them to see it. And that's good, but I also don't want Scott to lynskey.com being able to ping my course back end and get a list of courses that person had bought, like let's say someone had bought a bunch of courses Mind, then they're visiting Scotts website, Scott shouldn't be able to in the background, ping my my back end. And because they're logged in, get a list of courses they've bought, right? So cross origin, I have a list of domain names that are allowed to request data from my server. And then it can go from domain name to donate domain name. But other than that, no other websites are allowed unless you do what's called a access control allow origin star, and that will allow everybody to come in and access it. Yeah.

8
00:10:29,850 --> 00:11:20,790
Scott Tolinski: Which is, you know, something you have to be careful with, you know, allowing everyone to get in there. This is one of those things that almost always pops up. Like, when people are just trying to learn something. I think this is like maybe one of like, the the most frustrating issues that people run into, right? The course error, specifically because yeah, they're learning one thing, right? They're learning how to use a particular front end language. And the instructions will just say, hey, do this and do this. And then they do it. And then they come back with this course error. And then it's like off to Google. It's like almost never a situation where you're experimenting and learning about course, it's almost like you always have to learn it, when something is like being presented to you. And then you have to figure it out. Like why is this happening to me? Oh, yeah. Okay, now this? No, no, I have to learn about course. And now it's one more thing to add on to your plate.

9
00:11:21,180 --> 00:14:40,080
Wes Bos: Totally. That's what I hope this hasee treat will be a nice way to point someone to it, and then 15 minutes or so they can learn. What is cores? And why does it work this way? Yeah, nice. Next up, we have one other thing I've run into in the past is with Canvas specifically. So if you're trying to draw a frame of a video or a frame of a image onto a canvas element, and that image or video is hosted on another origin, what will happen is that you you cannot do it unless you have course setup. Because if if Scott has an image like Scott tolinksi.com, forward slash handsome dot jpg, and I try to paint that into a canvas, there's a potential that Scott could taint the, the word that they use is called tainted, which I love. But it will throw an error, of course error saying like, you cannot write pixels from another domain name. If you want to do that, then you need to, you need to proxy the image through one of the domain names that is allowed. And so I guess that opens us up to the last thing in today's tasty treat. And that is proxies. What is a proxy? Well, a proxy is a server that will sit in between you your front end, and the back end, that is actually supplying the information. And it's going to allow you to do what you want. Now, a proxy is almost always not what you want to actually have happen. But there's a couple a couple good use cases for proxy, one of good use case would be like, for example, I use a beer API and one of my react workshops, and I pay six bucks a month for it and I get an API key. And first of all, I don't want to give the API key to every single student that we have, because that would be bad. And then they could just go off. And second of all, that beer API doesn't allow you to access via course, because they only want you to use the API on the server side. Right. So what I had to do is I had to write a proxy, that would take a request in, add in my API key check for these course things because I don't want anybody using the API key only people that are on localhost, or react or beer or any number of them, and then and then forward the request to the server, come back from the server and then return it. So it's sort of a man in the middle or a woman in the middle that will accept the request, get the data, and then and then put it back. There are lots of proxies out there, there's the one that I always recommend is cross origin.me. And you can put that in front of an API that doesn't have cores, and it will do the proxying. For you. That's often what I'll use. If you're just trying to like, whip together a little simple example, if you're trying to use a weather API, and there's no cores on it or something like that, it's often really easy just to pop a quick cross origin.me in front of it. Because Because there is no cross origin on the server so that we'll be able to successfully make the request. Don't use that for production, because you're essentially running all of your traffic through some random dudes server that you don't know. Right? And they could be sniffing it, they could be doing anything you want. So you never want to send any sensitive information over a proxy that you yourself did not build or do not own. I think that's, that's my summary of JSON, JSON P and cores. Any other ideas? I mean, I

10
00:14:40,080 --> 00:15:27,300
Scott Tolinski: thought you nailed it. I think these these things are frustrating for a lot of people. So obviously, if you you know, if you want to learn more about this stuff, there's this site. I don't know if you've seen this, enable hyphen cores.org. It seems like it's a great resource for working with cores on both the server and the client. And then if you click that, Unlike cores on the server, it lists a whole bunch of different servers like Express. And then you can click on Express and look at, okay, how to enable cores and express? Or maybe you just want to enable it on nginx. I mean, they even have Meteor in here. So they have a lot of stuff. And both client side server side, whatever, I think it's websites, it's pretty, pretty nice little place to learn some things. So yeah, naval hyphen, corps.org. Check it out. I think it might be a nice little supplement to this episode. Oh, that's cool.

11
00:15:27,330 --> 00:15:58,200
Wes Bos: Yeah, cuz that's another thing I really didn't mention is turning cores on is very, very simple. You can do it on the Express layer. that's usually where I do it. You can also do it on the like the server layer, like nginx, or Apache, like Scott just said. So it's really easy to turn it on. It's it's more about understanding how it works, because you want to be careful with this stuff. You don't want to accidentally allow some other domain name to reach into your application, and perform potentially terrible actions like deleting all of your content or reading sensitive customer information.

12
00:15:58,200 --> 00:16:13,920
Scott Tolinski: Hmm, yeah, so definitely cognizant of that. Speaking of which, somebody mentioned that we should do an episode on security stuff. And I think this would be a nice little lead in for doing more on security. Definitely, totally. I've added it to the Trello list. So we have it in there. And I think that's got to happen at some point very soon. Here.

13
00:16:14,189 --> 00:16:32,370
Wes Bos: Totally. I think like, it would be helpful to do like a, these are the things you need to be aware of. We've talked about cross site scripting before and now we're talking about cores. But if we bundle it all into a single episode of like, as a web developer on the server, you need to be aware of these things on the on the client, you need to be aware of these things and

14
00:16:32,430 --> 00:16:37,200
Scott Tolinski: yeah, yeah. What are bad fixes? What are you know? Yeah, stuff to know.

15
00:16:37,500 --> 00:16:44,160
Wes Bos: Cool. Let's do it. Alright, I think that's it for today. Thanks so much for tuning in. And we'll see you on Wednesday. xo. Yeah,

16
00:16:44,189 --> 00:17:00,570
Scott Tolinski: we'll see you on Wednesday with a full on episode. Peace, peace. Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

