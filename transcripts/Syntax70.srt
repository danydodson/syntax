1
00:00:01,319 --> 00:00:09,600
Announcer: You're listening to syntax the podcast with the tastiest web development treats out there. strap yourself in and get ready. Here is Scott, ski and West

2
00:00:09,600 --> 00:00:48,479
Wes Bos: boss. Hello, everybody and welcome to syntax the podcast with the tastiest web development treats. Today, we've got a potluck episode, which is when you bring the questions in Scott and I attempt to answer them. I always like these episodes a lot, because we tend to touch upon a lot of a lot of different topics, whether it's soft skill stuff, or related to JavaScript, or just like being a professional in our industry. So today's episode is sponsored by fresh books, which is cloud accounting, and M lab, which will host your MongoDB database. We'll talk about those partway through the episode with me as always, is Scott to linsky. How you doing today, Scott?

3
00:00:48,509 --> 00:00:54,570
Scott Tolinski: Hey, I'm doing super good. Super good. Yeah, I got too much to report here. How about you what's

4
00:00:55,349 --> 00:01:42,150
Wes Bos: not too much, I've just been heads down recording for about two weeks on my advanced react course. And it's going really, really well. I'm super happy. I just finished up the permissions videos a couple days ago, which I'm super happy with how they went. That was probably the hardest part. Because it's kind of this like cyclical thing where in order to manage permissions, you need permissions. But in order to need permissions, you need to manage permissions. And there was really just like a lot to add both like on the client side in order showing components based on permissions and on the server side, which is being actually able to write to database or to update something. So I was really happy to to get those done and how well they came out. Because it's a complex topic, we did a whole episode on it. And it's not an easy thing to just whip up, especially when you're doing it all from scratch.

5
00:01:42,179 --> 00:02:14,060
Scott Tolinski: Yeah, and you're having to show people and explain it and everything like that. That's super good to hear I finished recording my my testing series, I'm just like in editing now. Yeah, and it is it's one of those things, we're working on the stuff that's like, almost the moment you finish recording a video, you really know how well that video is going to turn out. Sometimes you record when you're like, Ooh, I'm gonna have to like really, really fix this in editing, or maybe even recorded a second time or something like that, or, you know, get into it a little bit more. But sometimes you finish a recording, you're like, Ooh, this is gold.

6
00:02:14,519 --> 00:02:49,110
Wes Bos: Yeah, so I feel that way a lot. Sometimes I will record like 35 minutes worth of stuff, and then I'll, I'll start editing it, and I'll just scrap it. And that's the reason why I'll edit the video immediately after recording it. Because I'm in that headspace then. And sometimes I'm like, I find myself a little bit too flustered with all the stuff that's going on. Or, or maybe I hit one one too many bumps in the road, I often will leave my little mistakes in because they're helpful, but too many is is too confusing. So I'll just scrap the entire thing. And start again. And it's often much better after that. Yeah, I

7
00:02:49,110 --> 00:03:09,479
Scott Tolinski: think I have like a rage limit. And then like if you keep like, let's say, just keep messing up really dumb things. And then I'm just like, Okay, this is not happening. Let's stop this. Let's regather myself look, three, gather what I'm doing. Let's look think about it a little bit more. And then like, try it again. It's almost 100% better every single time the second time.

8
00:03:09,779 --> 00:04:02,580
Wes Bos: Totally. That's interesting to hear. All right, I think we're ready to jump into we got a whole bunch of questions. As always, if you have questions you'd like us to answer on a potluck episode I often will defer people from Is that the right word defer people email me questions about their lives all the times. And I'll tell them to send it to the potluck button because then we can answer it and everybody gets the benefit of it. I don't like answering questions in private too often, because it's helpful to do it in the open and for other people to answer. That's why I was such a big fan of Stack Overflow back in the day, because everybody could benefit from you spending a little bit of time on it. But we've got this potluck button, go to syntax.fm. And there's a button in the top right hand corner that says ask a potluck question. You can ask any question you want there? And if it's too big of a question, we'll obviously just turn it into a full episode. So anything you'd like to hear us talk about? Make sure you send it to the Pollak button.

9
00:04:02,669 --> 00:04:13,319
Scott Tolinski: Yeah. And we do one of these episodes a month too. So it's not like, you're going to wait forever to hear your question answered. Although we do have a considerable backlog of questions. We got a lot of cool. Yeah,

10
00:04:13,319 --> 00:04:47,850
Wes Bos: not all of them are great, though. Like, what do we got here? We've got probably 300 questions. And we've answered probably 70 of them. And then I would say another hundred and 50 of them are our questions that aren't great for the show. But but they still help us to get an idea of what are people trying to get out of us, right. Sometimes a question isn't like something you directly answer, but it's something that you can you can sort of hear the motivation behind the question. And that will help us answer and a lot of other questions are duplicate as well, which is also very helpful to see what people want the most.

11
00:04:47,850 --> 00:05:07,440
Scott Tolinski: Yeah, yeah. Well, fear not. We should. If your question is good, we will get it on the air. But we have a host of excellent questions today. Do you want to kick it off from a question that comes into From you gonna butcher it anyways, someone has caught on that we do not do names well here.

12
00:05:10,410 --> 00:07:23,250
Wes Bos: Alright, let's kick it out. So I'm curious why you don't work with TypeScript, I've done a couple bigger react projects now with it, and it saves so much time in the long run. Also, the autocomplete just is obvious on the whole other level, most of the time, I find myself not looking at the docs anymore. If I use TypeScript module since autocomplete works so well, implying that the author has chosen good function names, you're gonna butcher it anyway. So thanks so much, you're gonna butcher it anyway. So maybe we'll start off with first our thoughts on on on TypeScript. It maybe we should explain kind of what it does as well, because I know not everyone who listens to podcast knows what it does. So TypeScript is sort of a language that you write that compiles down into JavaScript. And it's a typed language, meaning that when you define a function, you have to define what are the inputs and the interfaces to that function, and what type of thing that it returns. And by being so rigid with what it takes in and what it returns and all the information about your function and about your package, you get really, really good autocompletion, you get really good compiling, oftentimes, you'll catch errors before it actually goes out to the website. And it's just amazing, because it fixes so many of the the problems that people have with JavaScript. So I'm a big fan of it, I think that it's is really, really neat. I definitely recommend learning TypeScript. I myself, don't use it for my tutorials. And the reason behind that is because we've talked about this before in the past, it's because not everybody knows TypeScript. And I would say that TypeScript does have a bit of a learning curve to it, I wouldn't say it's significant, because you can, it's like, it's one of those things where you can kind of just start to use little bits and pieces, and then kind of go whole hog on it once you once a year you're into it. But I can't do an entire tutorial in TypeScript, because the people who already know TypeScript, they will do the tutorial in TypeScript anyways. And because they already know it, but the people that don't know, TypeScript, it's just another barrier. And there's already a bit of an exhaustion in JavaScript where people go, Oh, I have to learn another thing before I can actually build this thing. I'll likely do a TypeScript tutorial at some point, because I'm such a big fan of it. But it's, it's not something that I'm going to put as a roadblock to someone who's going to be taking my courses.

13
00:07:23,430 --> 00:08:38,399
Scott Tolinski: Yeah, I have it in my notes here. TypeScript is dope. I mean, I love TypeScript. And I put a lot of the same reasons that I don't utilize it in my courses. And the reason I don't have it in my code base is largely that I just don't have the time to move everything over to TypeScript. And maybe it's one of these things that any new component that I'm making should be built in TypeScript. But again, I just haven't, I haven't done it. A it's funny, you did mention it being a little bit more difficult for beginners, or people who haven't used it to to ramp up that learning curve a little bit. It's interesting to me, because when you go from a non type language, a lot of people have JavaScript is like their first programming language. And they're not they don't have the experience with types in general, when you start to get into a type language. And what that means I think it can be a little jarring for people who are so used to just like throwing stuff around wherever they want. And then the benefits definitely outweigh the costs in that regard. So I highly recommend I mean, I've been planning to do TypeScript videos for a little while here. I actually recorded a what is TypeScript video that has not yet made it up onto what is Wednesday just yet, but I think there will be some TypeScript stuff, probably in the free tutorial category coming on level up tutorials at some point in the near future.

14
00:08:38,539 --> 00:09:09,529
Wes Bos: Yeah, totally. I think it's, it's one of those things that you often will hear intermediate advanced developers being like, oh, why did I take so long to learn this, everybody should learn it. And I think the kind of looseness of regular JavaScript, although it does cause many problems, and is a bit of a mess. It does help it I think it does aid in learning, learning JavaScript, because it is so so easy to just get up and running. You don't need to know a whole bunch of stuff. Like, what is a string? And what is a float and integer and all that stuff?

15
00:09:09,720 --> 00:09:25,080
Scott Tolinski: Yeah. Also, we've mentioned in an episode before I was sort of waiting for the like, winner of the typed language horse kind of thing. I think TypeScript is is is pretty has a pretty commanding lead. I don't know. What are the alternatives? TypeScript?

16
00:09:25,350 --> 00:09:27,330
Wes Bos: Hello from Facebook.

17
00:09:27,390 --> 00:10:03,049
Scott Tolinski: Yeah. And reason. Not live reason is like, Okay, so here's my thought I would my thoughts on this is that TypeScript is probably the most popular and the most used at this point. And then reason is really super cool. But I think it's so different from JavaScript that it's going to make it difficult for people to dive into it, and therefore you'll probably see a slower adoption unless something happens and it's like all of a sudden blowing up. But you know, I was really really interested in having reason, friend center, but it's like, I just don't know if If it's going to gain the traction that TypeScript is going to gain,

18
00:10:03,330 --> 00:10:47,490
Wes Bos: Yeah, totally. I think that's pretty good answer so that if What if you have thoughts on TypeScript or any of the stuff tweeted at syntax FM, we'll retweet it to your our followers. Well, how many? Listen, how many followers do we have on our Twitter right now let's pull that up real quick. I really like when people tweet their thoughts to the syntax FM, because like, this is just got nice opinion. And it's not the final word on things. And you're very much welcome to have your own opinions. And also, I really like hearing the insight to it. And when you send it to the at syntax, FM, it's it's helpful for the entire syntax community to hear that stuff. So I think we've got just over 12,000 people 12 point 6000 people on our Twitter followers, so we usually get some decent discussion going on there.

19
00:10:47,700 --> 00:12:18,120
Scott Tolinski: Yeah, absolutely. Cool. All right. Let's get into this next one here. This next one is from man, why did this put this on two separate lines? It's from Matthew Leland, which is an easy name to say, but the name it broke it off into several lines. So it was math, W. And I was like, Oh, is this some sort of? Is this a for name here? Matt? Ellis? No, it's Matthew. Okay, so I'm even butchering the easy ones. How do you recommend work with API's libraries that compete with the DOM, like d3 plus react, or react plus Google Maps? The biggest issue is if you unmount, a component, you lose the ability to update that d3 chart with your parents state. Oh, this is a good question. I do some things like this with the Braintree API that has like these hosted fields that throw onto your page. I don't do much with d3, any sort of charting library, I'm usually going to victory from formidable labs. So sweet charting library. But yeah, I don't know, I don't deal with this any sort of crazy way. I instantiate the I use a What is it the async script loader that loads a script as a higher order component on the page. And then once that script has finished loading, then it renders the page. And that's pretty much all I think about it. But then again, I'm not doing things like visualization. I'm just loading a hosted credit card form. So how do you do this? Wes? Yeah,

20
00:12:18,149 --> 00:13:33,750
Wes Bos: we talked about this a little bit in the React episode, which was last week. And it's a pretty common thing to do. because not everything that you are using, has a react component that is equivalent to it, right. Like, let's say you're using stripes, checkout, there will often be somebody builds like a react stripe, but under the hood, all they're doing is they have to manually listen for the component did mount and the component will unmount lifecycle methods of a react component. And when those things happen, you need to sort of like prepare on component will mount you have to do all of your binding to elements and listening for events. And anything that you would normally do like on a page load, you just have to do that in your component did mount and then when it will unmount, you also have to sort of clean up or tear down stuff. So you have to remove any event listeners that you have. And you have to sort of do it yourself under the hood. So that's why react has these lifecycle methods because not absolutely everything is going to be built in in react often you'll just get a vanilla JavaScript library from a third party that you need to interface with like Google Maps or like d3. And it's just a matter of sort of doing the heavy lifting for you. And it's not as nice as just using plain ol react, but it's not that big of a deal for you to do that.

21
00:13:34,020 --> 00:14:59,130
Scott Tolinski: Yeah, so I don't think either of us do anything fancy for that. Next one is from Luke, and Luke. Your last name, Venables. Venables. That's a cool last name is a cool last name. What is meant by the worst state when referring to view or react? Yeah, it's one of those things where people just toss around Oh, you know, Redux is a state management library, your state state machines state blah, blah, blah with this. And nobody ever really says state is this sort of at in my tutorials, I usually like to just refer to it as like sort of the basic ideas where you think about this, you have an application, right? Your application might have several different components that have state one of these components, the easiest one to visualize is the mobile navigation, right? You could think of the mobile navigation, it's either open, or it's closed, right? Those are the two positions that this can be in, and whether or not it is open or closed, that is the state of that component. Now, you can also think of this as components with data, right? You have data coming in, those components are going to have several different states. They could have a loading state that's like pre data, they could have a data state where the data has been loaded. And they could have an error state if there was an error situation in grabbing that data. So the state is the different ways that these components can be rendered output based on what it should be doing. It's basically like how your interface just is right.

22
00:14:59,520 --> 00:15:54,750
Wes Bos: Yeah, I'm looking At a Facebook post right now, and I'm thinking, Okay, this Facebook post is likely built in react. And what would be the state of that? Well, the the state would have information about who posted it, when they posted it, what they posted any photos about it, how many likes that post has, if the person currently viewing it has liked it, if the person currently viewing it has commented on it, who has comment on it? How many comments are on it, all of the information about that post, as well as any interactions that the user has taken again, that so say, it's the reason why we always say status, because it's kind of hard to describe, but it's generally just a bunch of information that that component needs in order to display itself. And that state is generally specific to the user that is actually viewing it because they might interact with that thing. And then the internal state of that component will have changed.

23
00:15:54,899 --> 00:16:31,440
Scott Tolinski: Yeah, then you can think of this also, it's frequently mentioned as like global or local state, and like a local state would be state that is specific only to that component that nothing else in the application cares about, right, let's say you have an accordion that accordions opening or closing, if your application doesn't care about whether or not that accordion is opened or closed, and that's just local to that component, or you have like a global state that could be if the user is logged in, and what kind of access levels they have is going to change what shows up on the screen. So again, yeah, the state is really just these these different ways that your component can render based on the data provided.

24
00:16:31,860 --> 00:21:24,690
Wes Bos: Next question we have from fudge, which is Hey, guys, just Hey, folks, I didn't know you can say guys to us, because we're both guys. Yeah. So I recently enjoyed the episode on burnout, freelancing and other soft life skills. A feeling I have had lately is being overwhelmed on how to put these soft and hard skills together. Obviously, the answer seems to be to learn gradually, as we will have more experiences. But are there any exercise or situations, we can engage in and try to link these soft skills a little bit faster? And this is from fudge? I think this is this is an interesting question. So I kind of put together a couple of examples for that I've been thinking about in the past little while, like how do you practice these soft skills so that you get better at them? So that when it comes time to actually integrate it with your your professional life? How do you and then you can apply it there? So I myself think about this a lot like how can I take these these skills and practice them in my everyday. So I think that instead of immediately reacting to situation so often, a lot of these soft skills that we talked about are how to best handle when things go south in your life or when things get a little bit overwhelming to you. And instead of just immediately reacting to it just to take a stop and say how can I like better handle the situation? I want an ideal outcome here. Things aren't ideal right now. How can I make this the best possible outcome? And how can I apply it to it. So I've just taken a couple examples of my life in the last maybe six months or so maybe Scott has had some other thoughts on this as well. But one that we talk a lot about is time management, getting things done is the system I think Scott and I both use, I often like to apply that to everything at my house. So I'll maintain either a Trello list or a things list of stuff that I need to get done at the house. And then I'll just sort of burn through it. Taxes I get like letters from the government probably weekly and I often will have a stack of I'll 15 or so things from the government whether it's taxes stuff, whether it's business registration stuff, whether need to remit quarterly taxes, all of this information, and that stuff can stress you out, right. So what I do is I just put them in a stack. And then once every week or two or three weeks, I'll just go through them all. And then I'll write on them this needs to be paid, this needs to be followed up on this needs to be sent to the account. And I'll just batch it and it's it takes me like 20 minutes to get through the mall. And I feel much better about it. So that's the time management that's the batching at play. Another one that I have is is confrontation I hate this is my wife will tell you this if you ever talk to her, but I hate confronting people when when things aren't great. So if you had a restaurant and they they forget something or something isn't right, that's like my worst nightmare to like, call someone over and tell them and yeah, my I would like some Grey Poupon. But I just don't like that, but I want to get better at it. So I try to like work with people that when you're in a non ideal situation. So last week, our car had to go to the garage to get the backup camera replaced and the dealership gave us a rental. So we went over to the rental place and started signing up for it and the girl signed us up and she says okay, just to be sure that you're the only driver on this rental car. I was like No, the only reason I'm getting this rental car so I can my wife can you Do do her regular day to day things because we need a car. Well, this thing is in the shop, she's like, Okay, well, you're going to have to go into the rental one near your house. And and they can put your license on the agreement, right? And I was like, No, my wife is not going to take our two kids drive across town, get them out of the car, or she can't even drive there, I have to drive with her, take her kids out of the car, put the license on the thing, put them back in, drive back all the way home, drop me off. And then she can go back and do her things. I'm like, Listen, like, this is a huge pain to me, I understand that. That's your, your rules. And that's how the system works. But I need you to like, help me out here. Because this is not going to be good for me and for what we need to get done today. And then tell you a couple times, I'm sorry, that's just the way it is. But if you kind of like you don't have to be mean to people, but if you just have to be like, Look, if you're in my situation, this is this is a big pain to me. And this this is not my problem. And then she went inside talk to her manager goes Oh, no problem, just email me a photo of of the license. Right? That was like a good example of sometimes you don't have to take what people tell you. And and just try to work with them and and push it a little bit further than what normally happens. Because almost always there's a somebody can change the rules a little bit or push it a little bit farther than then you have to. Yeah, another one I have sorry, do you have a some sort of,

25
00:21:24,990 --> 00:21:27,830
Scott Tolinski: though I got a lot. So you can keep going if you want to know, kind of

26
00:21:27,830 --> 00:22:33,990
Wes Bos: Yeah, I'm just I got a list here, I won't go through the mall asking for discounts. So sometimes this has happened three times now where the bank will call me and be like, something's wrong with your account, please call us. So like, they'll leave a little message or they'll like have a thing and then you'll call them back and you have to wait on hold for 45 minutes. And then you get transferred around three times. And before you know it, you've spent an hour of your time on this. And it's really frustrating because it's not my fault that they their fraud detection or or something goofed up on their end, and they needed to clarify something with me. So all three of those times that that's happened. I'm like, Look, I just spent an hour on the phone waiting to get this resolve. This is not my fault. What can you do to remedy it, and they've every single time they've given me I think 50 $75 just cash, or they've just applied it to my credit card for my time, which is great. Because like you don't have to deal with people necessarily wasting your time. I didn't know that that was the thing. But I thought like, Huh, I wonder, I wonder what they can do for me in this situation? and turns out if you ask and you're polite and respectful to the people, they will they'll help you out usually.

27
00:22:34,350 --> 00:24:34,800
Scott Tolinski: Yeah, yeah, I use like a ton of these same things in my my day to day, right? If there's, if there is like, if there's something that I have on my task list or whatever, I'm almost always applying the same sort of thing, soft skills that I apply at work to what I'm applying in my personal life. And it does, it just gives you practice with that stuff. I think one of the even like, the biggest ones is like I don't know, if you ever like our kitchen gets really dirty really quickly, not like dirty, dirty, just like cluttered and stuff everywhere. Yeah. And so I'll do the, you know, the 8020 principle and knock out the stuff that's gonna make the biggest difference. That's like the easiest stuff to do. Like simply just like putting away all the spices and putting all the dishes somewhere. And like in organizing stuff, like instantly, we'll make it look better, even if it's like really not that like it's not complete, but it looks better than it did. So I'm always applying stuff like the 8020 principle. So I do the batching and sorting for everything, like we get a ton of mail, junk mail, whatever mail comes in, it goes into a few different piles like a shred pile, I open. I don't even do this every day our mail comes into it falls into a basket in our little front sunroom area. And I can like pull through it. And I just pull out the stuff that's important. And I sit on the table, and I take care of it or I prepare it or I put them in a stack. But everything else just sort of sits there, the non important stuff. And then at the end of the week, we look through the non important stuff and we sorted from just like this goes into recycling this goes into shred pile this goes into stuff we actually have to take care of or whatever. But that batching and sorting and doing things all at once rather than just whenever they fall into your plate is just a huge thing and it'll teach you you know all sorts I mean, you're whether it's your your mailbox out front or it's your inbox on your computer, the same ideas apply, right? You can breeze through email way faster if you're doing email at a designated time than if you're doing it all at once. Or I mean whenever it comes in, right?

28
00:24:34,920 --> 00:25:40,590
Wes Bos: Yeah, go back to Episode 25. We did a whole episode on email on how to do it. I have a bit of a system. I'm not like the best email I still have tons and tons but I definitely feel really good about where I'm at with my email. So check that out on the same topic of mail I get like so much mail coming in that is just annoys me because I'm like why are they sending this to me right. So for I think for like three months. Once Every time I got a piece of mail that I asked myself, why do I get this? I just wrote stop on it. And then I one one day, I took like two hours. And I called every single company that was sending this mail. And I'm like, why are you sending me credit card offers? or Why are you sending me these like, like CA, which is my like, like, it's like AAA in the States. They send me all kinds of stuff. I'm like, stop, stop sending me emails. It's wasteful to the environment, all of this paper. And also, it just is annoying to me, because that you get so much like you have to figure out Oh, is this important what you have to figure out if you have to deal with it. And that really cut down on the amount of not junk mail, but it's just like unnecessary email that comes from the the different companies.

29
00:25:40,620 --> 00:25:58,260
Scott Tolinski: Yeah, and a sick sick tip here. There's an app called paper karma. I don't know if you've ever heard of this app? No, this would save you some time in that regard. You take a photo of the junk mail, and the app automatically tells them to stop sending you that mail. And it works really well.

30
00:25:58,410 --> 00:26:00,000
Wes Bos: Really, I wonder if this works. And

31
00:26:00,239 --> 00:26:29,340
Scott Tolinski: yeah, it could be a US thing. I'm not quite sure, but I've used it in the past. And it works surprisingly well for stopping that junk mail. There's some persistent characters out there, but definitely works very well. So yeah, you definitely need a system for everything in your life. And one of the things in your life that really needs a system is your accounting and bookkeeping. And Wes and I both really love to use fresh books for our accounting and bookkeeping, because it makes everything super duper easy. So with more about fresh books is Wes Bos.

32
00:26:29,400 --> 00:28:18,480
Wes Bos: Hello, yes. So fresh books if you are a freelancer, a small business, or just someone who needs to send off an invoice every now and then you got to check out fresh books at freshbooks comm forward slash syntax. So what does it do you able to have your invoices, you have a list of all of your clients as you can keep track of all of the taxes that both taxes that you've collected, at least in Canada, I know that you I both collect taxes, when when I build somebody that is Canadian, and then I also have to pay out taxes, when when I buy something and I get that tax money back. But I also have to withhold the taxes that I owe. And it's a little bit confusing, because if you pay more taxes, then you Bill then you get money back. But if you Bill more taxes than you pay you then you owe money. And you know how much that is because you should not get it be scared at the end of the year of how much you have to pay. Yeah. And freshbooks is a fantastic I just showing you at any time just being able to click on a report and it'll show you exactly what you owe, at what time how much expenses you have what's coming in, what's going out, what are the invoices that are currently owed, who's paid the invoices, super, super helpful, I love it. I also love that they have a really, really good mobile app. So if you're just out and about and you want to, sometimes I'll go and deposit a check. And I do this all the time where I used to just deposit a check. And then like a month later, I'd be like, did they pay that. And now what I do is every single time I don't leave the ATM until they until I've marked that invoice as paid right from the mobile app. And that has just just solve so many of my problems of trying to figure out if they've done it or not. So check it out@freshbooks.com forward slash syntax for a 30 day unrestricted free trial and use the syntax code in how did you hear about us? Thanks so much to fresh books for sponsoring.

33
00:28:18,660 --> 00:30:30,240
Scott Tolinski: Nice, thank you Freshbooks it Okay, let's get into another one here. Do you guys use different environments like Q and A and prod? Or do you only deploy to quote unquote prod and verify functionality is ready through automated test as well as manual testing locally? What are your thoughts on determining the best approach? Now I do this fairly structurally, I only have a couple people working on the code base. So it's, you know, by no means a large team of people working on this codebase. Right. So my situation is going to be a little bit different from maybe different smaller teams, larger teams, whatever. So I have a development and production environment. That's it development environment runs locally production environment runs on my server. And that's that's all I necessarily worry about. I don't have a QA I don't have a staging environment. But my development environment is as similar to my production environment as it can be. And I test everything pretty thoroughly. I use continuous integration and I use semaphore ci, semaphore ci comm to run my tests. And those run every single time a pull request is created. If someone's requesting code be added to any branch it runs all the tests, and then it also runs on deploy. So what I do is I just push up to master it runs my tests for me, everything's good It continues to deploy. But I also do test manually, but I don't I don't The only things I test manually are mission critical things also Test manually before a major deploy, that you can create, you can sign up, you can become a level of Pro, I checked that, once you did that you get access to the content, and then I manually check that sales work, right, you can purchase something. So there's like business critical things, I will manually test only because I'm ultra paranoid about that stuff not working. Even if all my tests pass, even if I'm superduper confident that my tests are good, I'm still pretty paranoid about it. So I want to make sure that that's working.

34
00:30:30,570 --> 00:32:19,980
Wes Bos: Yeah, I pretty much do the exact same thing I run locally in development, I'll test everything locally, just before it's pushed to prod or as part of the the CI continuous integration pipeline, they will run all the tests and not push to production. That's just me, it's a little operation that people have bigger applications do that, like I've worked on many applications where it's pretty common to have you have your local Dev, and then you have your your staging, which is once like a pull request has been approved by a third party or somebody else, then it is merged into staging, and then the staging. Sometimes people even have just like QA people who just go through the entire site, and make sure everything is good. And then once that's all approved, then it gets pushed through to production. I myself, I'm just development then push to production. I also so running tests will cover most of it, I'll test everything myself, mostly the checkout process. That's the one thing I don't want to really, really break. And the viewing process. I don't want that to break either, because those are the two mission and mission critical pieces that Scott said earlier. And then I'll also monitor my century, which is a sponsor not of this show, but of past shows and future shows. Anytime I do a significant change. I'll monitor century pretty closely, just because that if I have like a spike specific error, I know that okay, I goof something up. And something is weird between the data that I was using and the actual production data that people have in their, their course, users and whatnot. And then also I'll I kind of am lucky because usually when something's wrong, I'll get like a tweet or somebody will DM me or email me. And I'll know immediately because I'll get 20 emails from people saying, Hey, this is broken. Here's the error message. Here's, yeah, here's the browser I was using and the most helpful error reporting. But that's, that's doesn't happen in most industries.

35
00:32:20,010 --> 00:32:40,110
Scott Tolinski: Yeah, yeah. And I mean, I have Sentry and I have a time robot and everything like that everything's up and running. So like, if I do push something and my all my tests pass, and I'm like, seeing some alerts come in. Yeah, like that's a big thing. I'll roll back immediately. And then and then investigate. But yeah, we pretty much are very similar in that regard.

36
00:32:40,410 --> 00:33:35,940
Wes Bos: Awesome. Let's jump into the next question from Alex Nielson. I feel like I need to make everything from scratch, especially as someone trying to break into the field so that I can show I'm a good programmer, how do you decide to just say efit I'm going to use a plug in package whatever someone looking to break into the field will be looked down upon if I'm cobbling together too much of other people's code. I think that's that's a really good question. There's definitely a fine line between doing absolutely everything yourself and just cobbling together too much of prebuilt scripts and plugins because you certainly see it on both ends You certainly see people soldering together their own computers so that they can write a website and you certainly see people kind of throwing 13 WordPress plugins at something and then using what's that like web hook software that everyone uses to string together stuff?

37
00:33:36,270 --> 00:33:37,890
Scott Tolinski: Oh, if this than that?

38
00:33:38,010 --> 00:35:46,460
Wes Bos: No, not it's kind of like if this and that but it's like a little bit more Zapier. So you certainly see people stringing together Zapier, which is like, kind of like if this and that, but it's it's a much more Paul powerful, and I really like Zapier but sometimes you see people like running an entire business of just zaps, zapping one thing, and then that triggers another thing. And that's abs. Yeah, just happened one thing to another, right. So like, like, where do you find a kind of middle ground between that and I'm very much about as Scott and I have said in the past spice blends, meaning that when when I'm cooking, I love using a spice blend of somebody else's figured out? What are the perfect amount of salt and paprika and garlic and cumin. And I can just shake it on there. And it tastes great, right? I think that if you as a programmer, you need to sort of stand on the shoulders of giants. Because often when you reach for an NPM package that's really popular, there's been a whole community making sure that that is the best possible way to approach dealing with a specific problem that people in the crowd, at least for me, they're generally much smarter than than I am. But on the flip side, you can't just be using absolutely everything. So I say if it's an NPM package, go ahead, feel free just using these things. And then I felt as I got to be a better developer I found I found myself reading Less than less for plugins and packages and, and just doing it myself because you have a bit more control. So I don't know that there's something that we can tell you where to draw the line. But I think as you become a better developer, you're going to find yourself being like I shouldn't reach for it, like I found myself in WordPress world, almost never would reach for a specific plugin, because I would always hit a wall being like, oh, the plugin doesn't do this. Or there's no way to like to totally reach in and do the specific way that I want to do it. So I almost always find myself building custom themes. And then I would use custom fields to build my own custom functionality in my own smaller little plugin. So I think it's just fine that will come with time. Don't feel bad about reaching for for pre built solutions. That's totally normal.

39
00:35:46,559 --> 00:37:48,960
Scott Tolinski: Yeah, yeah. And I have a couple of things to add on to this, I think some of the things that get overlooked is that time and budget definitely dictate a lot of these things to Yeah, like sometimes, you really, really want to build your own thing. Or maybe that you have a great idea for how you can build this thing better. But the client needs this thing done today. So if the client needs this thing done today, and they're not going to pay for that extra time, you're going to want to use something that someone else made. I mean, even if you know how, and you want to do something bigger or better, it doesn't always work like that. So time and budget are definitely a big concern when you're choosing whether or not to add things. But there is sort of a, you know, a cost of this weight of using someone else's code. And maybe if this is a long term project, and you need to look down the line and say, Hey, is are we going to lose time and money based on this decision down the road, then maybe it is better to build it and spend that time upfront. Now, a little bit of paying, paying in advance, essentially, for the time to make this thing as nice as possible. But that's definitely something that you need to think about is is there a budget for this kind of work? And then the caveat there is, let's say, if you are asked to build a form system in react or something for a job interview, right, maybe it's like a code challenge. And then you come at them with like a Formic or I think it's Formic. Is that the the big input like that, yeah, you come out there using Formic or something like that, that's probably not going to get you the job. So if someone asks you to make something, don't use a library to do that, if it's like a job challenge, but again, you know, a way cost and time and stuff like that make your decisions. And yeah, I am one of those things that I always do like, like a toggle, like a little quick toggle, I almost always use a library to toggle, which is ridiculous, because they're pretty small. I just don't want to have to write that CSS. I'd rather just style someone, someone else's. Yeah, yeah, it's, it's dumb.

40
00:37:49,190 --> 00:38:42,210
Wes Bos: Maybe that's something you can put on your list for learning being like, oh, man, I use this toggle or use this form library all the time. And it's great, because it's quick, and I love it. And it's perfect for what I need. But maybe I should try to build my own at some point, just so that I know what's going on under the hood. And if I was ever in the situation where I couldn't use an existing, we saw that a lot with jQuery, where a lot of people were unable to build anything without the the crutch of jQuery. And I think at that point it, it becomes a bit of a problem. Because jQuery was great. It took away a lot of the problems that we had, it made us much better developers, we built much better interfaces from it. But if you can't select an element and loop over and listen for a click on a bunch of buttons without it, then then maybe that's something that you should put on your list as a high priority to at least learn how to do it so that you know exactly what's going on under the hood. And what is jQuery doing under the hood?

41
00:38:42,479 --> 00:39:43,670
Scott Tolinski: Yeah, there's a ton of learning possibilities inside of other libraries, especially popular ones, just learn patterns and that sort of thing. All right, this next one is from john Biddle. And john says, here's one to let your imagination fly. Forget for a moment, all the hard work it would take to get there. What WordPress what would WordPress be like if it were built on node and graph qL? Yeah, well, it would probably be more comfortable for myself and another note and developers to take a hacking into it a little bit. I was never like Mr. php, man. I was like never kept in PHP. So for me writing WordPress plugins, writing themes was always sort of a pain because I was always dealing with the white screen, always having to look up how to do things in PHP, and it was never like a blast. So for me, I think it would be hackable, it'd be a little bit more hackable. But other than that, I don't know. I don't know. What do you think Wes? What is your thoughts on this

42
00:39:43,679 --> 00:42:12,980
Wes Bos: one? Yeah, I got some thoughts on this I because WordPress is popular for a reason. I think that if WordPress was built in node and graph qL it for sure would not be where it is today and it would not be as popular as it is because why because PHP is very easy to learn. Especially the the flavor of PHP that WordPress is written in, where you can almost always just jump into a file and start hacking away. If you're coming from I know HTML, now I want to add a little bit of logic, it's very easy, because you can just say, Oh, I see the HTML, and then there's just some extra stuff in it, right? PHP is really cheap to host. That's another reason why PHP was very popular because you just throw a PHP file up. And you can edit that file directly. Like I remember showing people JavaScript, and then they would just like right click Open the.js file in the browser and be confused that it didn't work the same way that PHP works, right, you just visit the file, and then it runs, right, the barrier to entry with PHP is very, very low, especially WordPress, because you can get up and running with not really knowing a whole lot. But then on the flip side, the sky's the limit, you can do a lot of really advanced stuff with it. There's a lot of really, really good developers building complex stuff in WordPress, so and then the theme plugin and ecosystem is huge, right? We just talked about that being able to reach for a theme reach for a plugin. And that's why a lot of people like it. So if it was built in node and graph, you'd have a totally different audience, right? It would have an audience like Scott and I, and we there actually is something like that. It's called ghost and ghost was kind of like the WordPress being rebuilt in, in node and whatever. And they're doing really, really well. They don't have near the popularity, but I don't necessarily think that's a bad thing. Because people who are looking to build that type of website, but prefer a JavaScript stack, and are a little bit more comfortable with the the sort of ideas and also when you build something brand new like like ghost ghost, I think it's probably four or five years old, but they don't take along all of the baggage that WordPress has, because it's been around for so long. So it would have totally different audience, I think. And I think that everything has its place in the different audience that is looking for it. And if you especially if you go to there's this like Facebook group, that's like a WordPress developers, if you take a look at the types of people that are building stuff in there, it's just a totally different set of people who are much more focused on like, building websites and content. Yeah.

43
00:42:12,980 --> 00:42:15,690
Scott Tolinski: Internet Marketing, that sort of thing. Yeah.

44
00:42:15,900 --> 00:42:28,500
Wes Bos: Yeah. Small businesses, really popular in that world. And it's just a totally different where we're very much focused on the tack in the extendibility. And, and the developer experience and whatnot.

45
00:42:28,650 --> 00:43:00,210
Scott Tolinski: Yeah, yeah. It's almost like the audience is a hair between like, something like a full featured platform like Squarespace. And then a little bit more hackable, like WordPress, I would say the audience is closer to that. Squarespace. I mean, like the most of the people building WordPress sites, and not not I'm not talking about like WordPress, devs, and like freelance devs. and stuff like that. I'm talking about like the people who, who fire up a WordPress site, because a book about publishing like told them, that's what you needed to do, right? It is it's a it's a different audience.

46
00:43:00,270 --> 00:43:30,090
Wes Bos: And it's often like a means to an end for people that aren't getting into WordPress, because they want to learn coding, it's because they want to build a website for a friend, or they want to do some internet marketing stuff, or whatever. And often, that is the sort of gateway drug where people realize, Oh, I really like this stuff. Maybe I should be a web developer. Myself, I started off in WordPress, and I think it's kind of a nice little gateway drug that we'll send you looking for more and sort of put you down the rabbit hole of full blown programming.

47
00:43:30,090 --> 00:44:19,410
Scott Tolinski: Yeah, yeah, absolutely. It's great. I mean, WordPress is one of those. Again, it's one of these platforms. That is, I don't know, it's allowed so many people to build so many things so easily. And again, it's probably started more development careers than than anything. And it just takes it takes something that could be difficult, you know, having a database, a front end, having the back end, it takes something like that, and just makes it super easy. And one of our sponsors also does something like that for us. And this is m lab. Yeah, m lab takes the the whole difficult things of hosting and maintaining and managing a database, and it puts it on to a service that allows you to just connect to that database and never have to worry about things like backups, or having security or any of that sort of stuff, the stuff that you don't want to worry about when you host a lot of data in a database.

48
00:44:19,500 --> 00:46:52,650
Wes Bos: Yeah. So m lab is a host for your Mongo DB. It's a Database as a Service, meaning that if you're building a JavaScript application, you might go and host it up on something like sites now or like, you might put it on Amazon Web Services. And you're comfortable with that, because the code of your application, you've got it in git, and you can just redeploy that thing. If something goes awry, you can fix it. The kind of scary part for me is when you have a database, which contains all of your data for your application, and there's there's a whole new set of challenges with a database that not necessarily your skill set and it's not necessarily something that you you care to learn a whole bunch of Past actually learning how to query the database and, and save data to it. So m lab will host the database portion for you, it will do all of the backups, it will do all of the scaling in, you don't have to worry about your database going down or your database accidentally getting deleted or getting corrupt or any of that sort of stuff that that comes along with it. Because that could be that is an entire career for some people just working with databases and to understanding how to best scale them and in how to best work with them. One really cool thing about em lab that I like is they'll send you a slow query report. So you as the JavaScript developer, or, or any developer that's using a MongoDB database, you're writing these queries, right. And you should know some stuff about database performance, like what to index and what are indexes and how they work. But if you're doing something wrong in your database that is causing slow queries on your website, they will send you every week, a little performance report and say, Hey, you did this query so many times over the last week, you had this query 100 times over the past week. And now we you didn't have those things index, well, you can go ahead and index them and you're going to speed up your website so much better. So every week, they send me a little thing. And I can just tweak the indexes of my database within my note application, and it just helps their performance better. And lab does all the backup for you. They do all of that they have really, really, really good support. I've talked about that in the past. So if you are hosting a MongoDB or if you're just trying to like learn node and you're using MongoDB as a database, don't try to install it locally because you have to worry about drivers and brewing, installing and all of that headache, just use em lab set up a one of their free databases in there. They don't require a credit card. So check it out at m lab.com. And thanks so much Tim lab for sponsoring.

49
00:46:53,039 --> 00:47:42,930
Scott Tolinski: Nice cool this next one's from Dennis Dennis says Late Bloomer here, I'm learning JavaScript at 34. Dad, do you think I can learn how to breakdance at 34? Yeah, well, I think you can. There's, it's funny this is this is a hilarious question to me, because I learned when I was old, quote, unquote, which was like 18. So like, at that point, I had already missed the bus on unlike really becoming an elite level dancer in that regard. But there's so many aspects of the dance that don't require the gymnastic stuff. There's something called top rock and something called footwork. If you learn those two things, you can be a sick breakdancer at the age of 34. Just learning it's all about musicality and dance and fun anyways, it doesn't really matter, but you can definitely learn, get out there get busy and yeah, catch the groove a little bit.

50
00:47:45,270 --> 00:49:08,850
Wes Bos: I think we should also at this point, I get a lot of questions where people say I am xx years old, do you think it's too late for me to learn programming to break into it? Because I guess it seems like a young person's industry, which is kind of a bummer, because I don't think like somebody emailed me and said, I'm 28 isn't too late. And like, no, like, you're gonna work till you're 55 at the the best case scenario 65, you have like, more time than you've even spent in your career. Even if you're like, like 50 years old, it's for sure, not too late. And I think that, especially web development is a really, really good industry to get into. Because as much as you might hate it, the pace of our industry is that everything flips over every four to five years. So if you are learning and sort of just getting into it, I've definitely seen people go from, like brand new beginner to add a senior advanced developer in four or five years. So it really doesn't take that long, especially if you are enjoying it. And it's something that you have a have an interest in, you can get up to speed in it in no time. Like this takes years and years to work out something. But if you think about like, where would I like to be in five years, wishing I had learned web development or being really, really good at web development, and if you if you want to just put in the time for a couple of years, then it's going to be well worth it.

51
00:49:09,060 --> 00:50:20,760
Scott Tolinski: Yeah, I you know, is a good one, too. I went to a job interview one time in Tokyo, and the CEO of the agency that I was interviewing for, he was so cool. He was like, You know what, I Well, he said this in Japanese, say this in English, but saying you know, you know, like, I first started my career, I owned a landscaping business. And I was a landscaper and I did that for most of my life. And later in life. And he was like 40 or something. He was like, I kind of want to just do programming. And he was like, yeah, completely left turn for a man who had always done landscaping and was like, You know what, I'm gonna do programming and then here he is. He's the owner of like one of the top agencies in Tokyo and doing some like insane work for some huge clients, and he just looked at it and that that interview to me was really inspiring because I was just sort of like, wow, you can really accomplish anything. You just take the time you put in the work, you get it done, and you make it happen. So yeah, no, there's no too late for anything start now start yesterday, start tomorrow. But you know, don't start a year from now start right now.

52
00:50:20,880 --> 00:50:29,550
Wes Bos: Totally. That's the what's the wise old saying the best time to plant a tree was yesterday, or 10 years ago. And the second best time to plant a tree is today.

53
00:50:29,640 --> 00:50:35,730
Scott Tolinski: Yeah, it is something like that. I don't think you butchered that too badly. I'm pretty sure he was very close. Very close to that.

54
00:50:36,000 --> 00:51:13,260
Wes Bos: On the same note, I'll also say like, as you get older, I think you have more like life wisdom, and you have better soft skills, like we're talking earlier about, like these soft skills in terms of how to deal with like stressful situations and how to deal with people. And that's likely something that people who are older have those skills already. And that's a huge part dealing with Apple, because you'll often see these like, like 22 year old developers, and they're amazing at writing JavaScript, but they don't have that whole, like communication, soft skills dealing with people, which is I would say at least half of having a job.

55
00:51:13,530 --> 00:51:15,960
Scott Tolinski: Yeah, it's a huge, huge part. Yeah, absolutely.

56
00:51:15,990 --> 00:52:26,910
Wes Bos: Next question we have is from Nicholas Jackson, how do y'all handle high level page layout when using styled components? So this is a great question. Because when you have style components, you write CSS that is scoped to that specific component, and the CSS will never leak outside. However, often you do need CSS that needs to apply to the entire page, things like fonts, and padding and specific colors, and you have all of the stuff where it's like building the foundation for your website. How do you how do you deal with that, you just embrace the cascade, like you use CSS for what it was made for to cascade down to the other components on the page. So usually, what I'll do is I'll have global styles for my application that do things like the fonts, the line heights, the colors, the main colors of the page, although sometimes that will go into style component theme as well. And anything that needs to apply to the entire webpage, all of my heading tags, what my emphasis tag looks like, what my strong tags look like, everything like that, I'll do that as a global style. And then everything else that's specific to a component goes into it. So I do a fair amount of embracing the global style. And then getting into the nitty gritty inside of a styled component.

57
00:52:27,360 --> 00:54:35,460
Scott Tolinski: Yeah, yeah. inject global is a is the thing. Yeah, I use basically, yeah, a normalized CSS, I use that sort of stuff. I inject global, I embraced the cascade, my site at once was not using styled components. And now it is. So it was really easy for me to adapt these global styles into thing just drop it in, inject global and take care of it. Yeah. But that's, that's pretty much the answer. And there's nothing nothing crazy there is a stub components is a tool to help you better understand your your system, your design system and have it work within react. And it doesn't necessarily mean it's the right tool for every job. And in that case, you can use its escape hatch to allow yourself to use some global styles here and there for when that makes sense to this next question is from Andre Mac namira. As a junior Dev, do you think I should switch from PHP and Laravel to full stack JavaScript? I love PHP, but j s is taking over? It's a good question. I don't know. Laravel is pretty sweet. I'm a big fan of Laravel. I like systems like Laravel. And it has a big community. So I don't know, if you're getting work in your you're making websites, I think PHP and Laravel is a great thing to do. I mean, the benefits of full stack JS are being able to utilize the the same, the same code on your server side as your client side, like I used my react code for server side. I don't have to deal with PHP templates and react templates, right? Everything is all just the same. But that's it. Like I said, if you're getting work and it's you know, it's it's working out for you I don't I don't see any reason to just drop PHP and Laravel, what I would do is maybe sprinkle in some more full stack JavaScript here and there for no other reason than to give you a different perspective on the work you're doing in PHP. Maybe just expanding your your learning skills a little bit in different directions. I like to do that sometimes just to try something new and to have a different perspective on it. I don't think you need to drop or switch or anything like that. But again, I think it is worthwhile to spend some time with fullstack j. s, if that is, you know, a concern you have.

58
00:54:35,640 --> 00:56:58,590
Wes Bos: Yeah, PHP is absolutely massive. And by that reason, Laravel is is huge, right? Some people are telling me that Laravel is bigger than Ruby on Rails. I'm not sure if that's true or not just doing like, if you look at like GitHub stats, which is really not any anything to look at, but they do have more stars, but then if you do like a Google Trends search or you do a quick job search, it seems to be that it's not as big rails, but Laravel is huge. And there, so is PHP and both of those things are not going away anytime soon. If anything Laravel is going to keep on growing because people who know PHP, which is a lot of people are going to look for ways to build applications. And they'll reach for for Laravel. And I think that if you are just learning and you're looking for a job, it does make sense to sort of stack yourself for keywords. So often, we'll see Bootcamp, students learning react right now, why, because everybody's hiring for react developers, right now, that's a really popular thing to learn. But if you have a good thing going, maybe you have a job where you're building Laravel stuff, you're going to be learning a lot more about programming past what the syntax is of PHP, all of the ideas and concepts and, and building a good thing in Laravel, that's going to totally transition over to to any over any other one. And at the same time, like JavaScript might not be around forever, I do think that JavaScript is going to continue to be as popular as it is, and I'm betting my entire career on it. But that said, if it starts to go another way, if everyone starts picking up Python, or, or rails again, then like, who knows, maybe I'll start to go that way. And I don't sweat that that much. Because I know that I'll be able to, to pick it up. At the end of the day, I've been in this industry long enough that I've seen the popular thing switch over probably six or seven times. And I know that it will, it'll be a constant, constant change. And one more point on that as well as it's also just supply and demand as well. Because Yeah, JavaScript is super popular. But if everyone's switching over to JavaScript, then it might be very lucrative for you to stick around, even if it's something else. And I don't think that PHP and Laravel is going to be like antiquated either, because like, you look at things like single page applications and Laravel is like, totally embraced the view for building those kinds of experiences. So I wouldn't sweat it.

59
00:56:59,010 --> 00:57:46,380
Scott Tolinski: Yeah, I mean, it's funny, because like, it's a good thing that you brought that up, I was at this, like a guy, I don't want to call him a client. So it's just helping him out. And he was really in need of a ColdFusion developer. And this was after, it was kind of difficult to find ColdFusion developers, especially in the area that would be wanting to work on this project. And he basically had a stack of cash sitting there. It was a huge project. And it would have been a big pay day. And he could not find anyone to take his money. He was like, Is there any really good ColdFusion developers available? Like Where? Where can I find them? And I was like, I'm only I'm sorry, like, I don't know. But it's a getting it being that expert in something is always going to pay off. So yeah, no, I think that's a really good point. Cool. So I think that was the last potluck today.

60
00:57:46,590 --> 00:57:47,370
Wes Bos: That was it.

61
00:57:48,420 --> 00:57:57,870
Scott Tolinski: I'm full. That was a lot of questions. I can't wait to do the next one of these. We have so many more. I was like looking at the question sheet. And I was like, dang, we gotta get to some of these. So yeah, I

62
00:57:57,870 --> 00:58:08,250
Wes Bos: already can't wait for the next one. Awesome. Yeah. So answer. Make sure you submit your question at syntax. FM, click on the potluck button and fill out the form. Make sure you tell us how to pronounce your name, because we will butcher it.

63
00:58:09,090 --> 00:58:13,410
Scott Tolinski: Yes, we will butcher it. Oh, if you could put like phonetic spelling in there. That'd be sweet too.

64
00:58:13,830 --> 00:58:22,080
Wes Bos: unless you'd like us to attempt to pronounce your name. Because that's also fun. That's also fun and sick pick today. What's your sick pics? Scott

65
00:58:22,110 --> 00:59:49,140
Scott Tolinski: sukru. There was a it was I was watching. Was it the React rally? Was that the conference that took place this weekend? Yep. Yeah. Or this week? Yeah. React rally and Kent C. Dodds did a talk. And in this talk, he quickly accessed an emoji from his Alfred which got me searching and I don't know if this is what he used or anything like that. But I found one that is really really sick. And it's called Alfred e moje. No, I e m o j and you just install it with NPM and you type a mode and the coolest thing about this is it uses a deep learning to guess which emoji you're going to type so it's not like a string find where you type in fire and it gives you the fire like the Yeah, they their examples are emoji. Give me cats. And there's a whole bunch of cats. I typed in urgent because I wanted something that was urgent and it gave me options that were suitably urgent like aha or stuff like that. So I found this thing to be very smart and we both love Alfred. So this thing works so well with with Alfred you just do emojis I even just type e in a pops up and then you can just start searching from there. You find the emoji one you hit enter and then it copies it to your clipboard. I found that to be way way faster and better than popping open. That's the emoji and symbols panel and stuff like that. So loving this little little elfreda workflow here.

66
00:59:49,500 --> 01:00:25,110
Wes Bos: I use one called rocket which I have it hooked up to the the plus key. So anytime I type plus much like you type a colon on Slack, it will pop open this one They do a really good job at aliasing the emojis. Because the the built in one to Mac OSX is brutal. Like if you want to search for like, like tongue or something then it might not there might not be named tongue. Yeah, brutal. Yeah, it's not very good. So I use the rocket one which pops it up wherever it is that you're typing. But I'll check out this this one as well. Because sometimes you just have like a sentence and you want to put emoji on the annual what one would be the best, right where

67
01:00:25,110 --> 01:00:28,530
Unknown: this captures what I'm trying to get. Yeah,

68
01:00:28,530 --> 01:01:37,860
Wes Bos: I'll check that out. My sick pick today is motherboard, specifically the motherboard YouTube channel. So motherboard is sort of a, a one off from vice. And they do like tech focused videos, they do these tiny little like 20 minute documentaries that go into people that are working in in tech, and one that I specifically like was the hacking tractors, which went into how john deere doesn't allow people to repair their own tractors and like people are often like you're four hours away from the Neela nearest dealership, and you have to get this tractor pulled in when you can't because everything is a computer at the end of the day, and everything is coated at the end of the day, right. So they did a really good one on john deere tractors that I liked. And then they also did another one that covered one of my favorite YouTubers rich rebuilds. He's a guy that rebuilds test like Tesla's that have been salvaged, which is kind of like a dicey area to get into right now because Tesla doesn't like people, other people repairing them. They want to have their thumb on everything. That was a really really good one. I just enjoy it. I like vice a lot maybe because I'm a millennial, but yeah, vices motherboard is super good.

69
01:01:38,099 --> 01:01:49,620
Scott Tolinski: Yeah, I'm always a huge fan of their just production quality in general. So yeah, I don't check out a lot of motherboard but even just like looking at their YouTube homepage, I'm gonna like blow through these things. There's so there's so much good stuff on here. Yeah,

70
01:01:49,769 --> 01:02:04,380
Wes Bos: the latest one this Pyro makes the strongest DIY lasers out in the world of old tech. That sounds super interesting. Yes bowling mechanism keeping America's favorite pastime alive. I'm curious. How does bowling work behind the scenes?

71
01:02:04,529 --> 01:02:19,560
Scott Tolinski: Yeah, I'm very curious about all this. Hey, did you ever watch that Netflix show explained it's done by Vox it's a it's like a weekly show. They do a Netflix now it's like super high production value. It reminds me a lot of sort of ice stuff. It's done by Vox.

72
01:02:19,619 --> 01:02:22,290
Wes Bos: Oh, no, I haven't. I'm gonna have to check that out.

73
01:02:22,349 --> 01:02:49,320
Scott Tolinski: We breeze through every episode of explain the other day when a friend of mine told me to watch it and they're just awesome. They explained the best they explained all sorts of topics but in like really brilliant ways. They have different like celebrity narrators. So you can like always try to guess who's actually narrating it. But yeah, there's like the one episode on Kpop which it gives like the whole history of Kpop and that's super interesting to so many good ones cryptocurrency or whatever and it explains these No, I

74
01:02:49,320 --> 01:03:06,420
Wes Bos: think I've seen that. Yeah, cryptocurrency one. I remember looking at the Kpop app. I so hard to convince my wife to watch these weird Netflix shows. It's all I want to do is watch weird stuff about crime or drugs or on Netflix. And she's

75
01:03:06,449 --> 01:03:10,140
Scott Tolinski: not into it like deep undercover. I've been watching deep undercover.

76
01:03:10,229 --> 01:03:27,780
Wes Bos: Yeah, I love that kind of stuff. Or that or like, like ice Road Truckers and things like that. Yeah, frustrating, but we just watch Home and Garden stuff which it seems like Netflix is finally getting into the like HGTV space. See, I've

77
01:03:27,780 --> 01:03:30,570
Scott Tolinski: not I've not noticed that I gotta get Oh, yeah,

78
01:03:30,780 --> 01:03:38,520
Wes Bos: just just recently they they're doing one where they like go and visit like the world's best Airbnb s and it looks super interesting to us.

79
01:03:38,640 --> 01:03:42,720
Scott Tolinski: And my backyard needs a makeover. It's not bad, but it's just not like,

80
01:03:42,870 --> 01:03:45,270
Wes Bos: it's just not it's not HGTV. Yeah, I'm

81
01:03:45,270 --> 01:03:52,890
Scott Tolinski: gonna throw some aspen trees back there. We're gonna get a little bit of shade going on. Get this thing poppin God, shameless plugs. Today,

82
01:03:53,370 --> 01:04:12,060
Wes Bos: I'm going to just shamelessly plug all of my courses at Wes Bos calm for slash courses. I am feverish Li working away on my advanced react courses coming out in a couple of weeks. I'm really, really excited about it. I know that it's been a long time coming and everyone's super stoked about it. So sit on your hands for a couple more weeks and you're gonna get it,

83
01:04:12,450 --> 01:05:07,320
Scott Tolinski: you're gonna get it, I'm going to shamelessly plug the new course coming out for level up tutorials this month, which is react testing for beginners, and it's going to be super duper nice. We're basically going through all of the stuff that you need to get through if you don't have a ton of experience testing. Overall, we're going to go through testing basics with jest and JavaScript, and then dive into all of the important concepts involved in testing react, and reason Kent C. Dodds awesome library react testing library, my new favorite thing it like vanquished half of the lines, and most of my tests made them easier to read. It's an awesome awesome library that regardless if you're going to take this course you should check out anyways. And that's gonna be available for both purchase and level of pros. So if you sign up to become a levelup Pro, you can sign up for a year save 25% to get access to that, along with the other tons of other pro series as well as 12 additional ones that are going to be coming out over the course of that next year. So check it out, level up tutorials.com forward slash Pro.

84
01:05:07,560 --> 01:05:10,560
Wes Bos: Again. I think that's it for today. Anything else to add?

85
01:05:10,560 --> 01:05:11,160
Scott Tolinski: Nothing.

86
01:05:11,160 --> 01:05:15,750
Wes Bos: Awesome. Thanks for tuning in. We'll see on Monday, he's bass

87
01:05:17,609 --> 01:05:27,390
Scott Tolinski: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

