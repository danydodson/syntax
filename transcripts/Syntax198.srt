1
00:00:01,319 --> 00:00:04,590
Unknown: You're listening to syntax the podcast with the tastiest web

2
00:00:04,590 --> 00:00:09,000
development treats out there. strap yourself in and get ready to live ski

3
00:00:09,000 --> 00:00:10,530
and West boss.

4
00:00:10,589 --> 00:00:21,480
Wes Bos: Welcome to syntax. This is the podcast with the tastiest web development treats. My name is Wes Bos and with me as always is Scott to linsky. How you doing today, Scott?

5
00:00:21,539 --> 00:00:30,570
Unknown: Hey, doing good. It's winter wonderland here in Denver, which is not typical for this time of year. So Nick, I think it's gonna be back to 17th

6
00:00:30,599 --> 00:04:27,750
Wes Bos: I still have snow. We still have snow. Yeah, I don't know what happened. We got like a huge Blizzard dump. And then I mean, all the ski hills are psyched about it. So I'm psyched about it for that, but it's gonna be like 70 next week. So I just want that to happen. You know, you know, how are you doing? Good. It's it's getting a little chilly over here to note thankfully, no snow yet, but it's unseasonably cold, which I kind of like getting out all the beanies and parkas and stuff like that. But we're used to it a little bit too early. Yeah. Just odd that I'm so much further south than you. It's the mountains. Yeah. Old World even work. Maybe the world got tilted or something. It's flat, though. So I don't understand. Well, I guess anyways, like a you know, give it a little shift. There you go. So today, we are talking about how to get better at problem solving. This is a, I just asked on Twitter, like, like, have you ever taught another developer to get better at problem solving? Like what are your tips and like, a flood like, this is something people are super passionate about? And honestly, because I think it is like the core of being a developer. And clearly, debugging and problem solving are probably the two biggest skills that you can have. Aside from being React.js developer, that's probably the number one skill. But I'm really excited to talk about like, how do you think like a better developer? How do you how do you become a better problem solver? We got two awesome sponsors today. First one is Netlify, the host with the most they're going to host your website and go from local to your global development. They do all kinds of neat stuff around caching and making your website super fast and check it out. And the actually these sponsors go really well together today. The second one is a new sponsor called Prismic, which is a headless CMS with a graph qL API. I actually went down to Prismic. Last last December, and we did a couple little videos, trying to explain the differences between next and Gatsby. So if you want to check that out, just Google Next versus Gatsby, Wes Bos on YouTube, you could check it out. We'll talk about these partway through the episode. You want to kick it off there, Scott? Yeah, let's get this started. You know, the very first step when solving any sort of problem is the the most important real real step here is to start gathering the info in the ways that you can, because that's really how you know what's wrong. And it's really difficult to solve any sort of bug issue or literally anything if you have no idea what the problem is. So this is this is a sort of a key step here. So first and foremost, the thing that you're doing, like, what is it trying to do? And where is it getting stuck? Okay, there's tons of tools at your disposal to really start to get into the heart of the matter here. And we are as developers, we're very used to our dev tools for all sorts of things, right. And maybe you don't even realize it, but even just doing little simple, you know, inspect element, that's a, you know, a very low level troubleshooting thing, because you're, you're just looking at the element in the DOM, right? So we have all of these tools at our disposal to help us gather information to what's the problem. The big problem with these tools are is that a lot of developers don't know how to use all of the tools at their disposal. And therefore they may pick a tool that is not the most appropriate tool for getting to the heart of whatever your issue is, ie if you're having network issues, use the Network tab. Don't rely on console log to solve a network issue, right? If a request isn't working, the Network tab is the best place to do that. So on and so forth. There's a billion tools at your disposal, make sure you're using the right one to find the right information. Yeah, one example I have here is you often hear developer say like WordPress is slow or my website is slow. Or this thing sucks because it's slow. And you go, Okay,

7
00:04:28,520 --> 00:08:56,899
well, what's slow about it? Because certainly you can have slow all over the place. So right, that could mean anything. Is it the Is it the database that is querying? Is that slow? Is it the PHP scripts that are running are like the time to first byte over the network? Is that slow? Is it your server that is having a slow response? Is your source server overloaded? Is it slow in the client side, like does it feel laggy in the interaction? Are the images loading slowly? Are you using caching? Are you not There's probably like eight different parts of it and just kind of looking at a website and saying this is slow, you need to know how to be able to. And I think like we should say, for all of this stuff, if you're a new developer, you'll get better at this. And this is something that you're going to be able to crack open. Like, I clearly remember very many times in my, when I was doing WordPress, I would get like 500 bucks to make a WordPress faster. And like, I was so good at it, because I could just crack it open and see, where is it slow is slow on the servers, the database is there's something wrong with the, the server itself is the or they're loading too many plugins. And you can kind of look at all of these parts. And then you can just start chipping away at each of those and solving each of those problems. Whereas if you sort of just go like mano, it's slow, like more more server, maybe not, let's just install a plugin that does everything. And no, let's just install it. Yeah, add more stuff to make it faster. Do you remember those things you could download to get faster internet when you Oh, yeah, speed up the internet faster button. Yeah, let's just, let's try that. I recently did this as a favor for a friend of mine who had a WordPress site. And he's not a developer, he just has like a small little blog going. And he was like, this thing's really slow occasionally, like what's going on. And sure enough, I went in there. And there was four different versions of jQuery being loaded, he had like, paid some people to make this theme forum for different versions of jQuery, all load to their entirety, along with a host of other plugins, and whatever. So I just like went in there and, and you can see that stuff really easily. I think the easiest way to see any of that stuff is just to see what's being loaded and how much it's being loaded. But again, it's all about knowing your tools at your disposal and where to look. I also had like an issue when I was first when I was very first working with PHP, and I didn't necessarily understand the server side aspect of what I was doing. And this is like pre This is like, you know, Scott hacker days when he was just like, you hacking stuff together and Dreamweaver type of system not once I was a professional, but I would get like a white screen in PHP, and I just wouldn't know what to do. It would be just like, Hmm, I guess I gotta like three download and install WordPress here with the data, all things poached whole things, pooch and I, once I realized that every single where you look, there is a path to solving any sort of issue, whether it's the error logs on the server, the error log in the client, the Network tab or whatever, once you understand where to look just about any problem gets quite a bit easier. It's a little treasure map. Treasure Map take. Yeah, you. You look at like something like a century or Log Rocket, and they're just treasure maps to your bugs, right, you can be able to follow your nose to whatever went wrong. Can we get some money for that little average? You just did there? Yeah. Well, we'll, we'll bill Yeah. We'll talk to Sentry and Log Rocket and get a couple extra bucks for that one. Yeah, Tom for fiber. Another thing we have here is just like knowing where to look will be one of the skills that you can develop over time. So like, I clearly remember I was at the doctor with my daughter this past week. And he just like we give him the symptoms. And he starts asking these questions. We're like, initially, I'm like, why are you know that the problem is not with her ears. The problem is with her chest or something like that. And if he starts asking these questions, and he's looking in places that seemingly are totally unrelated, but because he's so good at getting to the root of the problem and asking the right questions, he knows exactly where to go. And same thing with like a mechanic with your car. Many times have brought my car to a mechanic with a weird rattle or shake or something like that. And they will quickly rapid fire ask a couple questions to you just to narrow it down. And I think that that is probably one of the biggest skills you can have as a developer is being able to narrow down what's going on with him.

8
00:08:57,020 --> 00:12:41,850
Yeah, and there's no reason to worry about that. If you're not, if you're still somewhat new or even intermediate with development, one of the things that separates, you know, senior developers from junior developers, besides, you know, actual technical skill would be straight up the amount of things they've experienced, because just like with any other profession, wisdom comes from experience. And the more experience you have, the more your brain has remembered situations that it's encountered before. And you know, there's some times you see bugs. And since I've encountered this bug two or three times, I'll just say, Hey, I know exactly where this problem is. But somebody who's never encountered that bug is going to hit that issue and say, who, I got that problem on my hands here, what do I do, but the next time they come about, they're going to quickly and easily have a way through this mess because they've seen it before. It's just part of the reason why more experienced developers can work through issues a little bit quicker, and some of that really just comes with time and putting in the reps right, really finding out what the issues are through repeated exposure to that Next one we have here is look at the end game. So ask yourself the question like, what are you really trying to do here don't focus so much on the tech, because your problem likely isn't a problem with the framework or library or even language that you're working on. So like one example I had was, when I was in initially working on my advanced react course, one of the problems we had was with pagination, caching. So you, you have page one, you go to page two, and then you go to page three, and then you go back to page two, and that's already cached, right? Because you visited it, and you can go back to it, and it loads nice and quick. And then you'd like delete an item from page two. And then all of a sudden, you have to refresh page two, because now you have one spot, and you have to shift them back once right? And then all sudden, page three is out of date, because you've shifted them by one and then page four is out of date. And then I was like, like, what's the what's the solution here for being able to tell which which pages need to be refreshed. And so pretty much everything in the future needs to be refreshed. I know there are some solutions with cursors. And, and stuff like that. But there wasn't like a really good solution with that. And I went and talked to the devs behind it. They're like this is a fundamental cache invalidation problem. That happens absolutely everywhere, where if you're trying to cache things, but you need to clear that cache, by deleting one thing, it sort of will ripple through either the rest of the pages or if you add something, then it will ripple backwards. So what I should have done there is that not like I was so honed in on like, this is a problem with the Polo. Like, surely they could fix that. But that was more of like a Oh, this is the problem with just like in general, like same with like, we were talking about CMS is we were talking about with Brad about migrating data. Yeah. How do you what happens when your data changes on both places? Right, right. And you have like the and he's like, that's kind of a fundamental CMS issues. This is not necessarily just a WordPress issue. So what I'm trying to say here is that maybe zoom out a little and see, what are you really trying to do here? Something I see a lot is I love cooking. And if I run out of an ingredient in something, I can very quickly replace it with something else in my fridge. So if you run out of oil, you can use butter. Because why? Because I know that what are we trying to do here? We're trying to add fat to the recipe, right? Not the fact that this thing needs oil, because it works this way. What does the oil do in the recipe? What is what are we trying to do with this fast, same thing with like, you run out of milk, you can swap it out with sour cream, or applesauce because you're trying to add moisture to the recipe. So there's like, a lot that can be done there, where you if you understand what it's doing and how it works, you can problem solve a lot easier.

9
00:12:42,360 --> 00:16:15,029
Totally. It's funny, because that goes along with the thing we just said is that the reason why you know what you can swap out is because you you're experienced in that regard. Mm hmm. And that's the kind of thing that can come with experience and having issues or working through things. I think a point I wanted to make is, after we sort of isolate whatever the issue is, we'll talk a little bit more about isolating the issue. Next, but after you have isolated the issue, and you can't figure out what's wrong, I mean, how many times have you ever looked at a bunch of code and just like sat there and stared at and say, I just don't get why this isn't working. And if you hit that, my advice is always to read it again, read everything, read the error log, read them closely, read it again, one thing I really like to do is actually read my code line for line like straight up read it, it so happens that when you write it, you've looked at it, you sort of have this idea of what it should look like in your brain just easily skims over it right. But if you actually read it line for line word for word, maybe you're encountered a little bit of a bug here that you wouldn't have seen that maybe you know, whatever language you're writing in isn't going to find itself. And so, you know, one thing I like to do to do this is to actually take this as an opportunity to comment my code really well, which is, you know, kills two birds with one stone. So if I have a bug, and my code isn't commented, well, I'll read it line for line and all add comments to say, Okay, here's what this code should do. This code should get the user, it should check their order status. If their order exists, it should do this. If it doesn't exist, it should do this. And then I'll attach those comments to the lines of the code and make sure that the control flow that I've imagined is happening one to one with my code into English exactly the way I would understand it to happen. And I can tell you, there's so many times where I've solved major issues that way just by breaking it down and saying, okay, line for line in English. What is this supposed to do here? And is this code actually doing that? That's such a good tip. I often do that. When I'm doing my tutorials. We often write that that's called pseudocode, where you just write in English, what should happen first, and then go back and write it in actual JavaScript. And I often hear from I don't anytime I tweet something, people Like, well, if the code was good enough, it will comment itself. Like there's, there's like a subset of developers there that think that commenting your code is unnecessary. Because if you write good enough code, you don't need comments. And that what do you think about that? Scott? Man, I write good, good code sometimes. And it's like, Great code. And regardless of like, how well labeled and well named things are, you know, I have a huge emphasis on naming things correctly in my code, no matter how many times I do that, I could come back to something, you know, four months later, after not looking at it and being like, okay, so I get this function is sending admin an email, but how's it doing that? Okay, let me let me actually have to reread the code, what it does is it reduces sort of that, that cognitive load that you have from trying to translate code into English, and then instead, you can just read English. So what it does is it makes it easier for you to understand the code. It's not like it's, it's not like you couldn't figure it out just by reading the code. But it makes it so much easier. Because at the end of the day, when you're reading the code, you're translating the code into English into your brain? And if the answer was just there in the first place, there, hey, it's at that time translating it. So totally agree. Yeah. That's a big thing. That's silly. Yeah,

10
00:16:15,029 --> 00:20:59,060
I know. And when we're talking about timesavers, here, let's talk about a hosting platform that we both love, that's going to save you a ton of time, wow, you bought this netlify@netlify.com forward slash syntax is is seriously, you know, it's so funny, no matter how many times we do these ad reads, we always get people who tweet out afterwards saying, I heard that they really loved it. But I didn't believe it until I tried it. And it blew me away, I seriously will get so many of those after each episode that we have an Netlify ad, right, because we really do use this service and love it. I'm absolutely huge fan of this platform. We talked a lot about really just making things easy for us developers. And this is a platform that gets it if you want to host a Gatsby site, all he could do is you just point it to your repo. And then it just takes care of the rest. All of a sudden you have HTTPS, you have continuous integration setup, you have so many excellent features out of the box for free with a couple of clicks, that it's just unbelievable. When the first time I used this, it honestly felt like magic. And sometimes people see simple platforms and think, Okay, this is a simple platform, but no Netlify has access to server side functions, it has access to their whole authentication identity system, server side forms, can handle large media, it gives you so many things for free that the stuff that you have to pay for, you'll gladly pay for it. Because once you hit those limits, it's like, yeah, this service makes my life so definitively better, that I'm happy to, you know, pay for these services. So check out Netlify netlify.com. Again, it's the host, with the most I guess, is the tagline we're making up for them at this point today. But we absolutely love this service. And again, you got to it's one of those things, you got to see it to believe it. It's totally magic. Love it. Alright, next we have is this is probably the the most advice that we received on Twitter, it was break it into smaller parts, simplify it. So that probably the best example I can give about this as if you're having trouble with writing some CSS and your layout is broken, you got to go to code pen and make that thing in code pen where there's nothing else in the world that will go into it. And if you can replicate the thing within your code breaking, then, of course, there's a problem there. But almost always, it's something else on the page is leaking in there. Some other CSS, some JavaScript, something else is goofing around with your CSS or JavaScript. And by making a little use case, that is totally outside of everything else will help you and the person you're asking help for people send me stuff all the time. And often they'll just send me their entire GitHub repo and like, sure, let me just spend, like 45 minutes replicating your development environment to get this thing running. Whereas if the problem really is with something very small, then we should be able to make a smaller reduced test case for that. Totally. Yeah. And this is such a huge part of it is this isolation, right? To understand what the problem is you have to isolate it and figure out where where it's happening. And one technique that I like to do is let's say, let's say I'm getting an error in a like a weird, okay, here's, here's a difficult bug that's difficult to track. There's no error log, but you're getting this is when I had specifically in Safari, I was having like major CPU skyrockets and slow animations. And so you might think, okay, the problems with the animation, there's no error log happening. There's nothing on the console. There's a you could hit to the Performance tab, but honestly, I wasn't getting a whole lot of the Performance tab, I was able to see that components were mounting and unmounting themselves for no reason. Then it wasn't happening on any other browser. Okay, what do you do? Well, what I did is I started commenting out components, because there was no real way for me to figure out what component was causing the issue. So I started out at the main source of my application, which would be the layout, I commented out the header had commented up the footer, I commented up the main body. And sure enough, the site started loading with no performance issues and Safari. So I've isolated that it's now taking place in one of those three components. Next thing you do uncomment out the footer, all right, it's not happening in the footer uncomment out the body not happening in the body, this issue is happening somewhere in the header, right, what I've done is I've basically taken out everything other any other possible issue out of the equation, and I've isolated where it's happening. And you can drill that down into smaller and smaller chunks, until you find the chunk that is causing the problem. Not every problem is going to have that trail map leading you to the treasure.

11
00:20:59,730 --> 00:24:49,950
One other example I have here is does this problem exist outside of the framework? So a couple a couple months ago, someone tweeted a link at me, they're like, hey, why. So I'm trying to use SVG clip path in react, and they were piping data from a react state into into an SVG clip path. And then and then using that to, or to add a blur, I think it was like a special kind of blur in SVG. Which, by the way, you should go back and listen to our SVG episode with Sarah, it was awesome. We talked about this the same problem in there. And we said like, okay, like, is this a problem with the browser? Or is it a problem with react because it was working in Firefox, but it wasn't working in Chrome, or something like that. So what we ended up doing was making a reduced test case, and just vanilla JavaScript. And then we saw that it did indeed work in vanilla JavaScript. So we knew it was a problem with react. And at that point, we had had done another example, just in react, if vanilla, sorry, not vanilla, react, but only in react. So then we took it outside of their application. So now we had two test cases, it does work in JavaScript. And it doesn't work in Chrome in react at a very reduced test case. And we could say, Okay, this is likely a bug with react. And at that point, you have to go and push it. But that's like the perfect example of how do you tackle something where you're like, there's so many moving parts, right? Yeah, the browser, you've got your, your application, you've got your own code you've written you've got the entire framework, and the problem could exist anywhere in there. And it was a good example how to narrow down on that and break it into smaller pieces. Yeah, another thing you want to do is test to see if this works in a clean environment. And this one is kind of, it's kind of more difficult sometimes, depending on how entrenched in and intertwined to your code, your code is. But honestly, if you have, let's say, a component or a function or something that's not operating the way that you think it could be, this goes along right with it, does this problem exist outside of the framework, but also does this exist within whatever same sort of system, just a clean version of that system? Right, it takes absolutely nothing to fire up a create react app, maybe toss some components in there, it depends on how big of a problem and how much time you spent on this thing, if you spent all day on it, what's another hour recreating this component inside of a clean environment? Or maybe you're not sure if the issue is with a library itself? This is an easy one, right? Let's say you're using a third party library. And whenever you use that library, something funky is happening. Well, it could be your system and how its interacting with that library, or it could be the library itself, fire up a create react app, or, you know, create view app or whatever, and start adding the component to it. And without anything else, seeing how that library functions within a clean sterile environment that is very similar to your current environment. And that should hopefully help you understand a little bit more, I should say, before we move on. Sorry. Go for it. Yeah, I told Wes to move on. And then I immediately interrupted him. No, the, I think that this is this is really my, in my mind, this is the most important step is isolating the problem before you try to solve it. So this is the one that like, I think you could spend a ton of time on just figuring out where the problem exists. Because again, if you're trying to solve a problem, and you don't know where the problem exists, you aren't doing anything. You're just you know, shooting in the dark. Honestly, that's probably unfortunately this also takes the longest I think totally you often hear people, like people out off to ask me questions like, Hey, I'm trying to do this, like, why is it broken? And I'm like, Well, have you like, have you tried to make a test case and they're like, right,

12
00:24:50,370 --> 00:29:38,610
post some code. You never hear from again because like, oh, like that's so much more Just tell me what the problem is. But like I had at the top of this episode, essay is like problem solving. is most of our job, the stuff that is easy will get taken over by robots. That's probably one of the biggest skills that you can have as a web developer is being able to break things down and figure out what it is. That's what we're getting paid what's what we're getting paid for at the end of the day. So if you don't like that, that's a bit probably a little bit concerning. And, and you might not like it because you just don't like problem solving. But you might not like it because you're not sure what to do. And that's our hope with this, this podcast is that you will have some steps as to how do you tackle something like that? Totally. Next one we have here is take yourself out of your environment. So one of the tweets we got was from Andrew Walpole, he said, you should be able to look at the problem at all different zoom levels. I love that idea of zoom levels. Because if you're able to check on a problem at all zoom levels, often you're in the weeds, everything looks like a problem. He uses old Library's low server resources, bad scaling tightly tightly coupled code. But does it do what we need to do to do level it's working for no other reason. So I like that a lot like Scott Scott says it doesn't work locally doesn't work on your server doesn't work in different browsers, yet doesn't work in a production build on a staging server. You know, that's even a big one, too, is to have some place to completely emulate your production environment. In case this is a bug that's only showing up on production. Yeah, I we often talk about in debugging, we talk about rubber duck debugging, where you explain the problem to a duck, I think we should have something similar for problem solving that is like stand on your head. And what that means is that the Can we make that a thing like I've stood on my head, and I've talked to my duck, and it's still a problem. And I think because standing on your head means like, look at it from different viewpoints, right? This is gonna sound like the most college student thing ever. But when we were in college, and like I was this was when I was like learning how to breakdance and be boy, gosh, when I had a break, we would be like, sometimes we would go to practice and you would get into a headstand because you were practicing headstands. And we would just watch other people break dance upside down. And like a bunch of college kids, we'd be like, Whoa, looks so cool upside down. Like, it was just so interesting to watch that kind of thing from a completely different perspective. So I love this, turn, go turn, what is your little saying that you're you're on your head and on your head, I've literally done this for something else. And a non related context, it can really change your perspective. The next one is going to be to this is a big one, stay calm. I used to have a job where I worked as a technician on projections, projections, projectors, like the digital kind of projectors. And it was with a bunch of doctors. And so it was in like medical auditoriums. And so I would these doctors, turns out they're not good at they're not good at pewters. They don't understand pewters. And so they would just like be like God put the the flash drive in the CD player and it's not working, you're like, Okay, let me plug the flash drive in for you, you know. And so that was largely my job. But usually, you had to solve these problems like, hey, this computer isn't working in front of an auditorium of 100 doctors just staring at you while you're some, you know, punk kid projection is to who's trying to fix the system. And a lot of people who took that job would get like very nervous because you're standing on a stage in front of all these people. And they're all waiting on you because they got all this stuff to do. And they're just like, why isn't this guy fixing this thing yet? So the biggest tip that I always gave to new people in that job, and then work environment was to stay calm. Because if you are freaking out about whatever bug you're solving, maybe it's a bug in production. Maybe it's a high stakes bug, right? Like this thing is in production. You can't roll back for some reason. And you got to fix it as fast as possible. You got your project manager breathing down your neck, the CEO is knocking on your door. What do you do? Well, you breathe. Sometimes it's counterintuitive. Take a 10 minute walk, go just take a walk clear your brain, because it's going to reset things a little bit. It's going to get your mind off of being terrified of the problem. And that's really just a big thing is when you're scared when you're nervous when you're that excited. So to say your brain is going to be thinking about how nervous you are. It's not going to be correctly solving the problem. So take some time. Go for a walk. Bree, chill out, sit at your desk. Deep breaths. So if the doctors are waiting there, you just go for a walk. Well,

13
00:29:38,729 --> 00:31:01,260
that's a different situation. I'm talking about code bugs when Oh yeah. When the doctors are waiting, I stand at the stage. And I say, all right, what's the problem? There's not a whole auditorium full of people watching me. It's just me and a computer and I know how to fix these things. Okay. I'm experienced enough to know Know that if I restart the computer, that's a good start, then I can do this, then I can do this. And sure enough, it's most likely going to work. But if I start freaking out and plugging things in and pulling things out, who knows where I'm going to be another tip I have here the actual we don't even have a center notes, but I'm going to add it in right now. And it's just like, talk it over with with other people. So it's like so underrated. And quite honestly, a downside to working from home is that you don't necessarily always have people to talk it over. It's a little bit too sometimes too slow to do it on slack or something like that. But I certainly do. Do do that with people on slack or on Twitter or something like that. You started to just like say, here's my problem. It's my least favorite thing about working from home, or working for myself. So yeah, I loved being able to show some code to my deskmate, Jeff, or Ben and just being like, is this a bad idea? Is this dumb? Is this okay? And then they could say, yeah, this is stupid. Why don't you just do it like this? Oh,

14
00:31:01,290 --> 00:31:01,830
Unknown: yeah.

15
00:31:01,830 --> 00:31:07,200
Oh, you're right. I mean, that no matter what we can all have those situations happen to us.

16
00:31:07,410 --> 00:35:14,550
Wes Bos: Yeah, it's funny, you often see that on StackOverflow, as well, where someone posts I have this problem, here's my code. And the problem is with this part of my code, and the answer is Oh, almost not almost always. But often. Why don't you just do this an entirely different way, which sometimes is unhelpful? Because like, you have to say, like, Well, I have my reasons. Like, this is why this is the code we've written, I have my reasons that maybe you don't understand my entire world that I have on right now. But sometimes it's just like, oh, wow, I was totally approaching this thing in the wrong way. And by approaching the problem and rewriting it a different way, that totally just gets rid of my problems altogether, because this new way of doing it no longer has those problems? Well, a good indication of that is if you're looking for solutions, and you can't find anybody else who has the exact same problem you are, it's like a good indication that you might be thinking about the problem in an incorrect way. You might be thinking, I want to do this thing. And nobody else is saying that anywhere else. So of course, there's not going to be here's how to do this thing. You might want to take a step back and say, What am I actually trying to accomplish here? What is the goal here? And what are the ways that people do that? And then look for techniques, I'm commonly used patterns for those type of things. Another one I like is the making it obvious as possible. This is a huge one. If I'm debugging CSS man, I started slinging primary colors, like a first grade teacher, I just started throwing yellow, green, or green, my primary color, yellow, blue, red all over this stuff, outlines backgrounds, I like to check on one of the things I love to do is if I'm debugging breakpoints, right, all right at this breakpoint, background yellow, this breakpoint background green at this point, background blue, and just make sure that my even my media queries are written correctly so that the thing is happening in a way that it'd be expecting them to. There's so many things that you could just reduce it to make life more obvious. Yeah, you the debugger is a really good one. Because often I have some code that does five or six things. And I think I know how it's working. And I see that there's a problem. But by throwing a debugger in there and being able to step over it line by line by line, it then plays it back to me. And I'm sort of lining that up with my head is like, Okay, next, I think it's gonna run this function. Next, I think it's going to wait until this thing is resolved, and then go, oh, man, the next line returned, and that thing was undefined at the time. And sometimes the console log doesn't get into there. So when when I'm really slammed on a on a bug, throwing a debugger in there and being like, Alright, let's just take the next two minutes to step over this, and make sure it lines up with what I think is happening. And if it's not, then that's where the problem lies, almost always. Yeah. And how many times has this ever happened to you, to some people is, let's say you just start slinging console logs, right? And so you put in console log here, whatever it may be, the console logs aren't even labeled, like so I like to label on my console logs, if I'm doing that. And then all of a sudden, you see the thing logging out and you're like, well, this thing is logging out correctly. So therefore, it should be working. And what you don't realize is maybe it's actually firing off a different console log than what you're expecting, and you're not paying attention to the fact and what the debugger is going to do is allow you to see Alright, this line of code is stopping directly here. This is the state of it at this moment. And then again, like he said, step over it, make sure things are happening. Ever since we had that episode about the debugger man, I just like debugger on node debugger in the browser. I live for the debugger now. Good. I'm glad that you went bonkers on it. Yeah, it's I love the debugger. I will say I don't use it on everything. Like nothing wrong with a console log, probably still 90% of my my debugging is with the console logger. But for sure debug, even in my last, I was recording a big video for my JavaScript course on Friday and it wasn't working. And I thought like perfect. Let's throw a debugger in here. instead. over and immediately we found the problem where a console log just wasn't helping us at all. And I left that all in because I thought it was such a good learning opportunity. Totally. Yeah, I mean, it's, it's so essential to see that kind of stuff happens. Another thing that can really help is to

17
00:35:15,110 --> 00:40:16,730
this comes down to the isolating of the issue again. But if you were using Git correctly, and committing frequently, having proper commits, and if your code is all committed, you could not be afraid of really goofing up your code, because like, sometimes, the bug is significant. And I just got to start ripping stuff out, I just got to start deleting code, who knows where I introduced this bug, but if my code is up to date in the comment, and I know this is the last working iteration of this thing, then what I can do is I can just start deleting stuff, start ripping it out, and then I can revert to the either non working commit or the previous working commit, you can always revert back to where it is. It's I mean, that's a good argument for always using proper version control. You never know when something's gonna break. And it makes sense. If you goof things up enough while you're trying to debug that you have someplace that you can get to. That's a clean slate. A next one we have is was one of the tweet replies from Bolen Dev, Poland. He says, I taught Java devs. For years problem solvers don't jump out solutions. They take the problem apart and make sure they've covered the thinking before the doing. They don't coudl ideas. Caught on maybe coddle can't read coddle, it's obviously caught on, I don't coddle ideas, but they stay open to the solution being different than they originally thought. They ask for help. But I love this, I immediately thought of somebody like Dan Abramov, who's one of the he's on the core react team. He's the developer behind Redux. And someone like that, who comes up with solutions. Like he's not the only one responsible for this. But he's a large part in react, suspense, Redux, React hooks, all of these things is that often we have problems and the solution is throw a render prop at it or do something like that. And what he does is they've take like, I don't know how the suspense has been in development for well over a year now. And what they're doing is they're really looking at what are the problems that people have tried to understand how people use this thing, to try and understand how browsers work, they're looking at all of the problems that is a developer experience, server side rendering, quickly rendering to the page without affecting performance on the browser, and they fully understand all of the problems that are at play there. And then they come forward with with some of the examples, I think that is a totally underrated skill. And I think even myself, often, I'll just find a solution and throw it at it. Because because that's the way without totally understanding the full problem first, and that's the kind of people that come out and make programming languages and and things like that, because they they really think like, if you look back at the if you go watch the talk from Ryan Dahl from I don't know, like eight years, nine years ago, when he created node j. s, he didn't create Node JS because he wanted JavaScript on the server. A lot of people thought that was silly. He created node j. s, because he had a problem with writing a synchronous code on the server. And he just like went through all of these different things. And he finally settled on using JavaScript on the server. I thought that you should go watch that talk after you listen to Spock s it's great. Yeah, I mean, how many times have you had a bug you worked in worked in worked in work to solve this bug, and then you didn't get anywhere you maybe wasted like two or three hours, and then you say, Okay, you know what I'm gonna do, I'm gonna start back from square one. And that's usually when you solve it, because you're actually taking that time to do the thing you should have done in the first place in this take the time to fully dissect it, rather than just straight up going in. I have a silly example here is when when we bought our first car, I don't know maybe six years ago, I had we'd always lived in a city and never owned a car. And then probably like six months into owning it, we got check engine light, and I was so stressed out, I was like, the engines gonna blow up. Like, everything is like, what's what's gonna happen? And then my dad is like, Did you check that the gas cap was like, screwed on tightly? And I was like, What? No, what? And then I went and checked it. And I was like, Oh, yeah, like if you have the gas cap loose, it will cause the check engine light and little did I know that it will actually most cars will even tell you that if you run a scanner on it, but I was just so like, Oh my gosh, like the, the engine is broken, you know? So like, if you just like step back and think about like, check the simplest things. Same with like a furnace repair. If you call up my furnace repair company. Unfortunately, I know this, because I've had to call them many times. We just got a new furnace. Get ready to call them and dealing with it. Yeah, one of the first things they ask you is did you accidentally Turn off the light switch that cuts power to your furnace? Did you maybe forget to change the furnace filter is the fuse that's on the server, the furnace popped. Like there's so many quick little five second things that probably covers 50% of their calls. And you go, Oh, no, I should have I should have done that before I started panicking.

18
00:40:16,770 --> 00:42:36,810
Yeah, even think about this one. This one relates right back to coding is that our furnace had like a debugging light that flashed. And if the light I mean, I'm sure all furnaces do, but it's like if this flashes twice for like every second and then stops for a second, and then this is the problem. And sure enough, like that's the error log, right? You can check it Okay, it's overheating, which means I need to chill it out for a little bit. You know? It's it's super funny that I don't know, when I think about troubleshooting. I don't necessarily jump to my mental model list and go right to programming. It mostly goes towards other things in life that I'm frequently trying. Yeah, we'll shoot because these are all super transferable skills. Like I mentioned that job I hit with the projectors, or again, your car, car troubles or furnace trouble owning a house is a non stop tour of troubleshooting issues right now are right now our house is leaking. Well, we have a old house 1920s house, right. And it is very cold outside and our house is very cold inside. And our house is obviously leaking like crazy. And so it's funny, I'm doing a lot of troubleshooting. Right now what I did is I bought one of those thermal draught detectors, I'm going around the house, and I'm trying to identify the biggest issues, and then I'm solving them and then confirming that they're fixed. It's like one by one by one. I'm troubleshooting. Alright, the doors drafty. How do I fix the door, okay. And that's, that's life right there. If you keep on always troubleshooting and moving on from things like that, you're gonna solve a lot of problems in life. quick break for today's sponsor, which is Prismic. Prismic is a headless CMS that has a graph qL API on the endpoint. We didn't Scott, me and Scott just tried it out ourselves to kind of kind of take a look at it. And it's, it's awesome, you can get up and running, having the whole CMS actually without even writing any code at all. So you, you log in, you create your project. And then you go ahead and make all of your different data types. So we made one that has a podcast, and we have authors, and the authors are related to the podcast. And if you've ever used sort of like advanced custom fields in WordPress, it has that kind of vibe, where you got all these different types of input fields, you drag and drop them in. You can do nested content types, repeaters inside of their maps with with pickers all kinds of stuff like that,

19
00:42:36,960 --> 00:42:54,330
Unknown: I think we should be very clear about its similarities to advanced custom fields. Because only in functionality, this thing, like anybody who's used advanced custom fields knows that the interface is total garbage. This is Yeah, gorgeous. Yeah, they do a great job of design throughout the application. Yeah,

20
00:42:54,380 --> 00:46:32,520
Wes Bos: once you've got your content types, you can go ahead and and start to make your content, you can schedule it, you can have revisions of your content, go ahead and publish that relate different pieces of content to each other. And then once that's, once you've got your content in there, you can give that interface to your client, and then start pulling all of that data into whatever application you're working with, whether that's a Gatsby or that's a next. They have a JSON API and a graph qL API, they give you the graphical editor that you can kind of play around with it right in there. They have lots of demos on making it work with Apollo, which would be very much of interest to our listeners, they've got some examples with different languages, PHP, as well. So check it out. If you want a headless CMS, it's at prismic.io. And we're going to send you to prismic.io forward slash syntax. Make sure you check it out there. And thanks so much, Prismic, for sponsoring, thank you. Another thing we heard on Twitter, and this one's specifically from Laurie on .TECH. I think probably a whole bunch of people mentioned this is just like this concept of pattern matching, being able to see problems and match them with patterns that happen often. And I think this is something that will probably come with time. Being able to just look at what happened. Do we change any code? Do we change any logic? This this problem tends to happen when this thing happens? So this slowness tends to happen when you incorrectly use a sink await. And I think that is something that will unfortunately only come with time, but just sort of logging it even just listening to like the Halloween horror stories when we did. You should be logging all of those horror stories in your head. And knowing Okay, this is what happened, or this might have hopefully, this is what might happen. And here's how we can go ahead and prevent it. mort. I think the next thing is obviously one thing that we often almost joke about as developers but is that developers good developers use Google or you know, the internet to solve their problems. And there's really a very real thing. It's not just like, Oh, we don't know what we're doing. So we Google everything. It's that typically, when you run into an issue that you've never had before, the first inclination is to gather information about what the issue actually is. And getting good at understanding Google and maybe how to do more advanced searches on Google is a real good way to get better at bug solving. No, I actually did a test test drive. And some people might not agree with this. But I did a test run of duck duck go for a while to see if I could like live off of DuckDuckGo. And I found the search results for programming issues to be significantly worse on DuckDuckGo. So much so that I found myself always going to Google anytime that I had a bug and I wanted to Google it. Because the DuckDuckGo results, were just not getting me what I needed. I know DuckDuckGo people are not gonna like me saying anything bad about that. But that's honestly just the way it was, for me my experience. And so when you understand how to search for what, on Google, or even within GitHub issues, or things like that, when you understand how to search for issues or bugs, you'll find hopefully, people that have answered the problem, or at least ran into that same problem. The worst, one of the very worst things in the world, is when there's only one Google result with your bug. And somebody responds with fixed it.

21
00:46:34,230 --> 00:46:35,580
Unknown: They fair how they fixed it.

22
00:46:36,210 --> 00:46:42,060
Yeah, you solve a bug in your in a GitHub issue. Always leave another comment to say how you fixed it, because that's a big one.

23
00:46:42,630 --> 00:47:30,330
Wes Bos: I can't believe sometimes I go back to issues I've posted on Google, like, two years ago, and there's like, 400 thumbs ups on it. And like, I'm good. Like, I clearly have helped thousands of people by taking two seconds to post it. I think getting good at googling is, is key. Honestly, like I'm such a good Googler often my wife will bring problems to me and say like, I can't find anything online, can you? Can you Google it? And I don't know why I'm so good at googling, but like practice being it, like, practice, like like, what are like what are some tangible things when one thing, one tip I have for JavaScript development is, if you can't find anything on the error that's happening. First of all, when you paste the error, take out any thing that's related to you. So yeah, you might have like an error that's like

24
00:47:30,330 --> 00:47:33,060
Unknown: a path, remove your system path.

25
00:47:34,140 --> 00:50:18,630
Wes Bos: Remove, remove your system path, or try to qualify it with like add react to the end or add whatever framework you're working on that we'll focus it in, because often you'll hear like, cannot read property no of undefined or cannot read property, Scott of undefined. And that's the most common error out there. So you have to like narrow it in. Another one is open that open it up in another browser and search that error message. Because often the error message might be slightly different in another browser, and searching for that will hit bang on hit somebody, maybe somebody had the same problem. They were using Firefox and you're using Chrome, then you can sort of narrow in on that. Yeah, use use quotes to when you're searching, like if I'm having a next .js issue all do quote next .js quote, and then that way, it tells Google that this word needs to be found in the in the results, right? Yeah. Or you could wrap a sentence in quotes, maybe the bug right accounts not found, I guess that's not a good one. Something not found is not typically good to search because bug is itself that is not found. That's not the problem. That is the result of the problem, right? So you want to be googling the problem itself, not necessarily the results of the problem. And on the flip side, make your search more generic as well. So I had a problem with our fog lights the other day, and I was searching for 2015 BMW, and I couldn't find anything. So I figured out okay, like, well, this is the same car as like four other years, the same problem would occur on all four years. So I found out the name, like the model number for our car, which was f 15. And then I searched f 18 Foglight issues. Yep. And I found that problem and it was someone who had a 2016, right. And I was like, okay, like, good. Like, I'm glad that I could I could step back, I could zoom out a little and be able to find somebody with the same problem. Even though it wasn't the exact same car it was the same problem. also changing up the word itself for a synonym also works because we had like, a thumping sound coming from our fridge water thing when you push the fridge Up, up, up up the Yeah, I just changed the word. You know, Maytag fridge, water thumping, nothing may tag the fridge water, chucking whatever I was just trying to like, find different synonyms and sure enough, I found the exact Issue under I forget what the word ended up being. But it was like a rumble word or something like that. And I found a YouTube video of a guy showing exactly how to fix the problem. It's like just by using a synonym from what I'm thinking, totally blew up that Google shirt search and actually led to the solving of the problem. That's such a good point. Use sentiment. Okay, you

26
00:50:18,630 --> 00:50:21,120
Unknown: send it on. Yeah, lots of cinnamon.

27
00:50:22,710 --> 00:50:53,820
Wes Bos: Ah, I think that's all the tips we have here how to get better at problem solving. It's kind of a hard skill to just sit down and get better at. But every single time that you encounter a problem, you should start thinking to yourself, okay, break it down into smaller pieces, read the error logs, figure out what I'm trying to do here. Maybe just make a list of like 10 things you should do when you encounter a problem from this podcast, and then start to go through them. Because honestly, I think that will save you time in the long run. Totally.

28
00:50:54,180 --> 00:51:02,280
Unknown: Cool. So I don't know if I have anything else. I'm sure there's lots of other tips. We will retweet you if you shout us out with some of your sick troubleshooting tips.

29
00:51:02,610 --> 00:53:55,860
Wes Bos: Yeah, honestly, there's so many aliens. I'm just looking at the tweet. I tweeted that thing two hours ago and has 54 replies. Yeah. And it's also great because a lot of these people are like senior developers, who have helped juniors get into a spot where they can be better at debugging, so they know exactly how to how to explain it to somebody. For sure, for sure. Cool. So let's get into some sick pics. For those of you who this is your first syntax. Sick pics are the stuff that we find to be sick could be literally anything that we like. And I use it looks like you have something pretty cool for us today. What is it Wes? I can hear it's a little widget that was actually a problem. So this is the marpac Rome sound machine that I sic picked probably six months ago, something like that. And we've went through all kinds of different sound machines with my family. And we use them all over the place because it helps our kids sleep. And we have such a creaky house. That like if you create the wrong floorboard, it wakes up our kids. So we we have these things running all the time. And it helps our kids sleep and they love it. And this sound machine has such a good bacey sound that doesn't irritate me. And we bought we bought four of them just to have them in like the kids crib and attached to the car seat and things like that. And one of ours or two of ours broke. And I was like, Man, this sucks. Like I said, pick this thing. And I love it. And I'm annoyed that the power button like went in like it basically it looks like someone pressed it too hard. But everybody in the family says they didn't they didn't press it too hard. But the power button, just like push itself in and it's causing it to turn on and off randomly. And a couple of times it made our kids wake up because it turned off in the middle of the night. So I was like, This is annoying. So I contacted the company and they sent me two new ones immediately. Just part of I sent them the receipt and it showed that I bought them and they FedEx me to brand new ones. I had them and a day. So I still stand by this product. I think they're very good. It sucks that that happened. But hopefully they are fixing it. Tech. Maybe I'll I'll report back in six months again, if the new ones have any issues with them. Because it's such a it's got a little battery in it. It's got all kinds of different sounds. It's loud enough. So big fan. Yeah, it's funny. Um, Landon has a noise machine. That's a turtle and it flashes like like kwatak lights, IT projects in sort of under the ceiling as well. It's really sort of awesome. Yeah, but the weird thing about it is this that it doesn't have to like the timer shuts off way too quickly. So we'll put him down for bed. And he loves his little turtle and doing this like sort of Twin Peaks a little like thing. Like sort of and he loves that. And then it shuts off. And you just hear it on the baby monitor

30
00:53:56,100 --> 00:53:58,080
Unknown: my show.

31
00:53:59,610 --> 00:56:51,510
Wes Bos: We got to like run down Oh, I've like gone downstairs like four times in one night to turn the turtle back on because he hadn't fallen asleep. I'm so sorry man. I just wish Yeah, so how long did those things have a timer on it that they're pretty decent? No, they don't they don't have a timer don't have a great they just they just go and I think the battery lasts for eight hours. It's enough. I think it says 12 hours on the listing. It's enough for an entire night sleep with the kids. We have a just constantly plugged in. And then you can just unplug them when you need to go somewhere and you take it with them. So big fan. That sounds dope. Yeah, it's the marpac Rome Mar Pac aro Hmm, I'll put a link in the show notes. It's kind of a weird spelling but cool. Yeah. lindens Turtle takes triple A batteries. So a lot of them to buy a bunch of batteries. Alright, my sick pick is this YouTube channel. And this is a it's like a fitness channel, no fitness channels. There's just a billion of them and you want to go to a real full market. Alright, I just I just clicked the link and started playing hardcore. And so this is a basically this guy isn't doing anything that nobody else has done but his presentation Everything about it is really well done. The whole thing is science based so he does a lot of it's like the the science based working out videos like you know, what is the science say about building a better back with three o'clock what is the scientifically that three back exercises you should do. And he goes through studies and stuff like that, but he makes it really nice to watch. Like, there's nice infographics, there's nice animations, there's not a ton of fluff in this, there's one thing that I really love is that I used to watch this other YouTube channel that was very similar called it was a Jeff nip fired, I think was like the science of something else. And it was all you know, or he'd read out studies and things like that. But the first like 10 minutes of the videos would just be like, you know, lo fi hip hop beef with him like making a protein shake, and like eating his cereal and like running through his day, you're like I don't I don't care about any of this stuff. I don't care about what you get from, you know, 9am to 2pm while you're waking up before you go to the gym, and whatever, because clearly all you do is work out and make YouTube videos. But this this one I found to be super informative. None of the videos feel like they're too long anywhere between like six and 12 minutes long. And it's all science based. He talks about the studies makes it really interesting. And I've just like been really, I probably watched all the videos because they're all great and they don't take too long to get through. And you feel like you can build your own workout plans and stuff from this. So big fan of this channel, link in the description of this video. If you are interested in going to the gym, or going to the gym or almost approaching then resolution time, we're almost approaching that 2020 heading into the future. So a good time to start thinking about this stuff now.

32
00:56:52,440 --> 00:56:53,010
Unknown: JOHN,

33
00:56:59,400 --> 00:57:02,370
cool. Shameless plugs. Whoa,

34
00:57:02,370 --> 00:59:08,700
Wes Bos: Jinx, shamelessly plug my upcoming beginner JavaScript course it's going to be at beginner JavaScript calm. I am heads down, blowing through these recordings of it super excited to get it out. It's going to be at beginner JavaScript calm when it's out, check it out. My shameless plug is going to be the course that is coming out on level up tutorials this month, as is in the last day in November. And that course is going to be on TypeScript and react. And for those of you who have never spent a ton of time with TypeScript or react, I just got done converting the entirety of level up tutorials to TypeScript. So I got a lot of thoughts on TypeScript and react. And if you want to learn how to use TypeScript in react, or maybe you're just curious, this is going to be for people who are very new to this as in, you maybe have never done TypeScript at all. Maybe you've never done TypeScript in react period. Maybe you you're just very curious about why everyone is talking about TypeScript. So this is specifically TypeScript course TypeScript basics, with react, and it's coming out the last day in November, if you want to get on to level up tutorials, head on over to level up tutorials, comm forward slash pro sign up for the year, and you'll get access to this upcoming course as well as last month's course, which was next year nine full stack with API routes, and then the previous month's course, which is on Felton every single course that I make next year so thank you so much for checking that out level up tutorials comm forward slash pro jobs. No, we need is like a intros with that but and his name is Scott Delinski. Yeah. I really liked the basketball one too. That one sounded fun. Yeah. And I've got the blink 180 to one comment. I think we're gonna get sued for that one. We can't do that one. Now open 22 is not going to sue you to show us No, I think it's old enough song. It's in public domain. Isn't it? Isn't isn't blink 100 years old?

35
00:59:08,730 --> 00:59:14,250
Unknown: No, it's owned by its own. I don't think I don't think blink way too will sue us. I think Sony Entertainment will sue us

36
00:59:14,250 --> 00:59:23,910
Wes Bos: and that's because it was. Alright, that's it for today. Thanks for tuning in and we will catch you on Monday. Please

37
00:59:25,860 --> 00:59:35,610
Unknown: head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

