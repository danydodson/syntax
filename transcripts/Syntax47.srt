1
00:00:01,319 --> 00:00:09,930
Announcer: You're listening to syntax, the podcast with the tastiest web development treats out there. strap yourself in and get ready to whiskey and West boss.

2
00:00:09,930 --> 00:03:27,090
Wes Bos: Hello everybody and welcome to syntactic podcast with the tastiest web development treats. Today we are talking about debugging here are some we're gonna go through like first we're gonna go through some tips. How do you get good at debugging? How do you tackle a problem that seems impossible to fix, and go through these steps actually figure out what it is. And then we'll go through some of the tools that we actually use to make debugging and development easy. Today's episode is sponsored by two awesome companies. First one is fresh books. They provide awesome cloud accounting software. And the second is coffee cup software. But more specifically, they just launched a CSS Grid design tool. And we'll talk a little bit more about that partway through the episode. It's actually pretty sweet. I know what you think of me immediately think about a design tool, you think back to like Dreamweaver or something like that. But I actually checked it out and the coder puts out is pretty, pretty sweet. So we'll, we'll talk partway through them partway through them partway through the episode. Today, Scott, hey, I'm doing good. I just came back from a long trip. I went to Romania for a conference. And on I am exhausted, definitely taken a little while to recover here. But everyone will be happy to know there is a terrible Part Two to my health adventures, which is actually sort of related to the first part and so like, I don't know, if you remembered me mentioning that Courtney also got sick and had to go was her thing that she got sick for was actually a sort of like a reaction to getting strep throat. It was like the strep throat and then that infection, like did something else. And that's why she had to go to the doctors. So she had strep throat. Right. Okay. Yeah. And I I had whatever, just that thumb thing going on that it was an infection, right. So well, I you know, we all think we're good. I go to Romania, and I go on, you know, to like straight days of traveling, and I end up in Romania. And I get there at three in the morning, and I pass out and I wake up with the worst strep throat I've ever had. It was like, I'm speaking the next day. And all I can think is I'm in Romania, I don't know where I am. And I have like no access to anything. And I just I just like my throat is been dominated. So yeah, after struggling to figure out how to contact a doctor or something. I finally got a doctor to my room when I went to the pharmacy and got antibiotics and believe it or not, after taking that in like two day or a day or whatever. My throat was actually decent enough to talk but I definitely wasn't definitely wasn't feeling great. After all that here's a cue not getting sick ever again. Because what the heck yeah, I just I just got off last week, I was pretty like feeling rundown and not feeling great. And it just sucks especially like, like, it's probably has something to do with kids. Kids are always sick. And I feel like I've been super sick all of the past winter. And I'm just looking forward to it being warm out and hopefully taking a break from all this sickness kind of dragging you down. Because it's such a bummer when you're trying to get stuff done. And you get hit by a truck of sickness. No kidding. Yeah. And obviously, the travel and the not sleeping and the time zones. And all that stuff made it much worse. And yeah, a gear agreed, I'm home, I'm ready to chill out, I'm ready to get some work done and be totally not sick forever

3
00:03:27,180 --> 00:08:27,020
wicked. Alright, so let's jump into it. So I've got about 16 different tips are just going to rattle through them. And then we're going to go through a whole bunch of the different dev tools, tabs that will help you actually debug stuff. So we're going to be coming at this from primarily a front end web developer standpoint, and some note as well, but primarily things that you can do when you're debugging JavaScript, CSS, debugging HTML, I guess that I've been there before we forget to close the tag and everything becomes nested inside of each other. So first tip that we have is to actually read the stack trace or to actually read the error message. Yeah. And it's funny that this is a bit of a joke. But it's also often what happens is that when an error happens specifically in JavaScript, you just get this massive dump into your console into into node. And it's just so big that most people freak out and don't even look at it at all, because it just seems like nonsense. And especially because a lot of the like paths that it gives you are in your node modules directory. And it's like, well, I didn't author that couldn't be an error in there. But what I like to tell people is to like take a deep breath, and actually take each of the what the stack traces, maybe we should explain what this is a stack trace is sort of like a treasure map of what happened up until the accident. So if a function called another function, and that called another function in a library, and it called another function and a library, what it's doing is it's sort of following or following the hops of function calls to the actual to the point where it actually choked right Usually what you have to do is to read the first three or four lines of your stack trace to figure out where the actual errors happening. And there's often a lot of nonsense in there a lot of paths that are not helpful to you. And you can, if you can learn to ignore them, or even in my node course, what I did is I wrote a little filter on the stack trace to highlight the actual file name where the error was happening. Because most people, what happens in my courses is people just email me a huge stack trace without even looking at it. And so I just would, I just wrote a little debugger that would highlight the names of the files. And that helped a lot because it sort of just highlighted where it was actually happening. So read the stack trace, that's super important, you can get a lot of information as to what is happening in the stack trace. Yeah, and I think this one goes overlooked a lot, because there's just so many times where I get customer service emails, or get issues on a GitHub repo or something. And a lot of it the the time that you're spent even doing that, or sending an email and waiting for a response could totally be mitigated if you were to just read maybe the first line or the second line. And perhaps that's the clue that you need to solve this thing. But a lot of times people see this big error, and then all sudden, they just get concerned and maybe stop. Or maybe they just don't even know you know how to look at it. But you know, just even reading it and trying to take that into context of what you're working on. And how it fits in is really just such a big thing and a big skill that will go a long ways, despite seeming sort of basic and obvious, right? It's definitely something that you just need to have practice with. And you need to force yourself to just read and get by that, you know, it's one cool thing about stack traces in create react app that I learned when I was recording, my re recording, my react for beginners course is that the stack traces First of all, create react app does an awesome job, awesome job, they catch the stack trace, and they actually display visually to you on the page instead of in the console or in your terminal, which is great, because stack traces in the terminal suck. But you can also click on the stack trace files, and it will automatically open up that file in your VS code. And to the line where the error actually happened. And my mind was blown. When that happened. I didn't know that until I was recording and accidentally clicked on it. So hot tip there. Yeah, I think that is absolutely brilliant in tools that do this kind of thing that make error debugging, like that much easier by even maybe potentially showing you where the issue in the code is like what line? Yeah, that's just on. It's unbelievable. It's one of those things that can only get better, right? Totally. Yeah. Next one is make sure you aren't debugging production. So this is a silly one as well. But I've done this 1000 times where you're trying to you are also maybe I should add to this, make sure you're not debugging production and make sure you're not cached. Because those two things I've pissed away so much with caching, because you just like all this, and maybe you're trying to fix a problem that's already been solved. It's just you're getting the old version in the cache. Yeah, that's the worst. So like, just check yourself I've so many times have been refreshing the actual live site link to local site was not. And then also make sure if you've got Think about it, because often I have like a, like one or two levels of caching turned on like the other day, I my own website was not refreshing. And it turned out that I had my I forgot to turn off my CloudFlare caching hit to turn that off, and you have to wait like 10 minutes for that to clear. And then it starts immediately showing up.

4
00:08:27,059 --> 00:11:55,919
Yeah. And also, if you're debugging react in your in production mode, it like changes all of the component names and the React dev tools. And that can just be a huge mess. Sure. I mean, you can turn that off. But yeah, okay, yeah, the next one is going to be check the network panel for the whole response. Now, this was sort of a game changer for me when I figured out this, especially when you're working with API's and stuff like that. Now, this one is superduper important even for things like graph qL, or anytime that you're doing any sort of network requests, or maybe an image isn't loading or something like that, in the Network tab in your dev tools, it's going to show you every single network request that your site makes, and when they made it, how long it took the file, and whether or not it was successful. Now, what you might not know is that you can click on any of these. And you can get the entire request, the response, the timing, and all that sort of stuff. And oftentimes when there's well not oftentimes, but when there is a failed request, that request is going to show up as red. So if you are working in anything, whether it be an API call or a graph, qL or something and your data isn't coming in, especially if you've messed up a graph qL query, and you click that, and you look into the response, the response is most likely going to tell you the problem, especially with graph QL. It tells you exactly what the problem is. So if you are having issues where things aren't showing up, check that out again, and some of the simple things like how many times have you been like why isn't this image showing up and maybe the images in the wrong folder or maybe it's not doesn't have the right permissions or something. But if you check that network panel, you can see the actual request made and see if it was successful and See if that's coming back and actually working. I really like this tip because one big thing that happens when I'm teaching newbies JavaScript is that it's really hard to understand what cores is. So core stands for cross origin resource sharing. And, and what that means is that when you're sharing data or scripts between domain names, you've got my bank.com. And you've got Wes Bos calm by default data is not allowed to go from one domain name to another domain name, because what could happen is that Wes Bos calm could request, drain my bank account method on on my bank.com. And as soon as you visited it, if you were logged in on your bank, then it could drain your bank account, right? Like, you just can't have that. So each domain is generally sandbox. However, there's lots of cases where you want to share data between domain names API share data between domain names, you might have like, for example, I have many domain names, I have RAC for beginners. And I also have learned no comm, I want to share data between those two websites, because I want to I want to share, like what products people have bought between the two domain names, but I don't want to share it with absolutely every website out there. So what course will do is, of course, will allow you to define what domain names can access the data. And often what will happen is people will get this like, obscure error message or especially with when you're using JSON p, which is we want to explain that right now. But if you're using JSON p, it'll often tell you cannot read property, oh of undefined. And it's just a very obscure one. And if you go into your network panel, you can often see the data that you're trying to request back, but you can't actually access it with JavaScript, because because, of course because of the security model of the browser. So again, open up your network tab. And if you can see the data, but you're not able to access it in JavaScript, it's likely a course issue. And it will have thrown some cores issue. It's it's that access control allow origin header message that you often see,

5
00:11:56,039 --> 00:11:57,450
Unknown: yeah, what's the worst?

6
00:11:58,559 --> 00:15:02,700
Wes Bos: Or the best if you don't want your bank account? drain? Yes. What do we got next here, use debugger commands in the browser. So we're probably all used to using console logs all over the world. But there's also this concept of setting breakpoints in the browser. And what a breakpoint is, is you can generally go into your code and click a little red.on a specific line or on a specific function, and what will happen is the code will stop running at that breakpoint, it will break at that point, right. And in. That's, that's kind of cool. But what you can also do is, instead of having to go through your dev tools panel and setting those breakpoints, you can just pop the keyword debugger, semi colon anywhere in your JavaScript. And what will happen is if your dev tools are open, it will freeze JavaScript from running and then it will pop open, it'll sort of like allow you to peer into the application as it were that one second. And that's really helpful when it's helpful and all kinds of use cases. But one use case that I specifically use it for is when you have what's called a race condition where sometimes you find yourself being like, okay, when this is running, it says cannot read property undefined. But when I console log it, it's fine. It has that method. They're like, why can't I access this property? Why can't access this method. And that's usually because you have a race condition where one thing is running a little bit quicker than another. And that's, that's a whole nother world of pain where you have to get into a synchronous fixes. But setting a breakpoint will allow you to pause it at that point where you would normally just console log it. And then you can peer into that. That's some of my future tips, how to appear into what the JavaScript looks like at that point. Yeah, another good one here is using source maps. Now source maps are something that become much more important nowadays, because we have all this code that's compiled, whether it's our CSS, that's been compiled from sass, or stylus, whether it's our JavaScript that's been transformed from ESX, to something that the browser is compatible with. Basically, our code goes through these changes. And sometimes the files that get minified and compressed and moved into another file, when your error log comes up, it could tell you that the error is on line 1000 whatever of app dot j s, instead of where it actually lives, now at source maps do is they sort of map one to one with your code when it makes that transformation. So that the errors in your dev tools or when you're looking at your CSS in your in your style tab, it actually gives you the correct file, whether that's a stylist file, or SAS file, it gives you the actual correct file file, note location and file line and all that stuff rather than the end compiled one, like sort of the end one so that you actually know where to look for when you get these errors are these whatever's in your less flying in the dark? Because if you're not using source maps, and all this stuff's compiled, as it is an error on line, you know, 10,000 whatever, you really have no idea where to look. Yeah, so this really just all it does is it gives you a map like a treasure map is like Here's the error, let's go find that error, you know,

7
00:15:03,000 --> 00:18:48,870
super helpful, especially when you have react components, it will tell you exactly which component and most, most browser dev tools will actually allow you to peer into your, that's what sorts of apps are. But if you have the file locally on your computer, it will, it'll show you the source file. So it'll show you your, your styles file or your sass file or your react component in dev tools. So you can actually see where that thing is, yeah, love them. Next one I have here is make full use of all of the console methods. So probably on my tombstone, will say, Wes showed people console dot table. Because of all the work I do for bird teaching people things, probably the one that I get the most praise for is showing people console dot table, which is when you have an array of objects. And each of those objects have the same properties. Like, let's say you have an array of people, and each person has a name, a last name and age and a dog, what you can do is you can console that table that array and it will show you a table of each of those rather than you console logging just a there's a huge dump of objects, you have to open every single object up individually. Right. So along with that, there's a whole bunch of other methods there. And you can go into the Chrome Dev Tools, or any or sorry, the MDN for console. And you can see and one of the ones that I really like, especially when you your console gets a bit messy, you've got console logs from all over the place, and you haven't cleaned them up yet. Like I know, that's probably not a good practice. But we all do it. And you all have too many console logs going on. So what console that group will do is allow you to open up a group, you can console log as much as you want. And then you can cancel that group end. And what that will do is it will just tidy them up into a nice closed group. And you can use a little arrow to open and close that group. And there's also another method for default, opening that group as well. And it's cool that you can visually see that this is for that one specific console group that I did. Nice. Okay, cool. Another one that seems sort of obvious here is opening your stuff up in another browser. And now for me, I have lots of in browser, lots of browsers installed on my computer, like I have like three different versions of Chrome, you know, Chrome, Chrome, Canary, that beta, Chrome, Firefox, Firefox, developers edition, Firefox, nightly, like all of these browsers, it's really important to try your thing in another environment. And sometimes it's a issue of a browser issue, right? Like the problem is the browser itself and how it's working. And other times it could be like an extension, maybe there's an extension installed on one browser that you don't have installed on another browser. And that's actually an exception. Yeah, I could run into that problem so many times. So also, maybe your browser is out of date, like Chrome Canary gets updates all the time. And there's often some issues in Chrome Canary. So checking to see if there's like a new update, and just running and restarting your current browser is a good little thing to do, too. But basically, just trying your stuff out in different environments. And seeing how the change responds to those in different environments is, is something that's always necessary if you're trying to figure out a problem. Yeah. Oh, is it that's actually a bit of a problem for me right now is often I'll get people reporting issues with my player. And it's almost always they've had an extension installed, whether it's like one big problem I have right now is privacy, badger locks, Vimeo, sometimes, so people are just watching it. And all of a sudden, they it says, for privacy reasons, we cannot load this video and the Vimeo, play@vimeo.js JavaScript library doesn't have a way to catch this exception yet. They're working on it, there's a huge issue open. Hopefully, it'll be solved soon. Because it's funny, I have a little snippet now that says, hey, try turning Privacy Badger off.

8
00:18:48,870 --> 00:23:03,210
Nice. Next one has to do with the whole breakpoints and debugger command that I said earlier. And it's the stepping into and stepping over function. So again, when you have JavaScript, and you want to see exactly how it's running, when you set a breakpoint, it will pause JavaScript. And then you can use these the little arrows in dev tools to either step into functions, meaning that you could just click, click, click, and that will run every single line by line by line. And then you can also step over a function meaning just run this function and pause at the next function that's going to be running. And I find this I don't use this all that much. But I do find whenever I have a specially tricky issue, or I'm not sure where things are happening, like maybe there's not necessarily an error message. But something weird is happening with my data. And I want to know exactly where this is happening. And this kind of leads into my next point is by setting a breakpoint, then stepping over it, what you can do is it gives you the option to peer into both your data, he can look into your window object and see all the data that's in there. You can console log things that are in scope, but it also gives you a peer into the scope of the function, the scope of the application where it's Running. So you can open up this thing called scope. And it will show you what your currently scoped variables are. Let's say you're looping using a for each, it will show you what your L and I variables are at the current time. And if they're undefined at a time that where you're trying to call a method on it, then you then you know exactly why that's happening. Yeah. And scope is an issue that can definitely play a lot of people, like what do I actually have access to? What is this actually mean right now. So this is definitely a great way to get some insight into that. Another good one is to create a small replication and either like a code pen, or one thing that I've been doing lately is if I need a small reproduction, I say replication Yeah, replication reproduction. Yeah. If you need a small version of what you're working on, or to try to find an error, I oftentimes will go for a create react app. And I'll build a little create react app. And I'll just build only that thing that is messing up in the crate, React app, or if it's CSS, and JavaScript based, maybe a code pen or any of those things. And those are nice, because they're easy to share, but a create react app, you can just share the GitHub or whatever. But the point being is taking your code out of its current environment and putting it into an environment that is a bit more, I guess, what's the word I'm looking for? It's like, you know, when there's an outbreak situation, when there's like a quarantine, quarantine, you're like quarantine or isolating your code in a way that it gives you that ability to see exactly If the error is in your code. Or maybe it's in the environment in which your code is running. But if you can't reproduce the error in a pristine environment, and everything's working fine, then chances are there's not an error with whatever libraries or anything they're using. And the chances are that the errors that the in the environment that they're being run in. And not to mention, it's also makes it way easier to show someone else that someone else can look at this code and say, Hey, actually, you messed up on line 34, dummy, like, check it out. I guess to me that creating and taking your code into a new context is such a big thing to figuring out where the sort of context of the problem is, I think this is probably the most helpful tip for newbie programmers. Because when I was learning, what would happen is I would just try to tell someone my problem, and they would say, Okay, can you make a j s fiddle? And I just be like, Oh, yeah, I don't have time for that. Just tell me what's wrong with my code. And almost always when I was recreating the production, or what is this word, we're trying to say, trying to replicate it reap reproduce the error, you would stumble upon what was actually happening? because it forces you to go line by line and really think about how you're you're doing it. So yeah, it might seem like a waste of time to actually make this thing error out again. But almost always, you're going to find the issue. As it happens. I was about to say that exact same thing, right? It is such a it's one of those things that always seems like a giant pain in the ass and like a huge time sink, and then you do it, it is almost always worth it. Totally. Speaking of worth it. Whoa, what's that? Good. All

9
00:23:04,290 --> 00:25:36,210
right. Let's talk a little bit about our sponsor, which is fresh books, fresh books is a cloud accounting software that I use for my business. And I highly recommend anybody who has a small business, whether you're a freelancer or have a couple of employees, you're trying to keep track of invoices, keeping invoices in multiple different currencies, I, I now have so far this year, have invoices in four different currencies that are going on. If you've got expenses, if you need to keep track of your time, how much time you're working on specific, specific projects, I use that a lot when I was doing hourly based billing for some of my clients, what I would do is just turn on the timer or at the end of the day, I would say okay, I spent six hours on this project, I would sell up in three or four bullet points what I had worked on, and then at the end of the month, it was really easy to generate an invoice that was detailed exactly what was happening on each of those days. So sign up for freshbooks@freshbooks.com for slash syntax and use syntax into the How did you hear about us, and you're going to get a 30 day unrestricted free trial. Nice. Yeah. Love that. What else do you got for me? here's a here's a good one. And this is always one that I really frown at when it comes about. But take a break. There'll be so many times it'll be a weekend. I'm like working hard, I'm frustrated or something. And I will just be like, take a break. Like go for a walk. You'll figure it out if you do that, because it always works. And I'll be like, Whatever. I'm just I'm almost there. I'm so close to solving this bug and should be like, No, no, no like, and I take a break, I go for a walk, I do something else. And sure enough, I always solve the problem totally or I just think about it in a different light because taking a break allows your brain to continue working on it without the sort of like stress of looking at the same things and it gives you a new mindset allows you to come back to your code with a totally new viewpoint and really just again, will illuminate some of the potential issues. So taking a break and Taking a step back from your code, allowing your brain to sort of process it for a little bit. Big, big, big tip. And it's one that's easy that people often like to not use, I can't tell you how many times I've solved issues by just going to the gym or having a shower or just giving it a rest for a couple days. And you come back to it with a totally new mindset. And it's usually not like a simple, quick fix, it's usually like, Oh, I should be approaching this in a totally different way. And just giving your mind the mind is crazy in that if you just give it time, it will just work on that in the background process. It's a ServiceWorker for your body.

10
00:25:37,410 --> 00:25:37,920
Unknown: Nice.

11
00:25:38,759 --> 00:26:32,250
Wes Bos: Next one is something called rubber duck debugging. And I love this because it is similar to reproducing it but the what people recommend is just put a rubber duck on your desk and talk your problem through to that rubber duck or if you have other people in the office. Because what happens is when you have an issue and you're trying to figure out what's wrong, if you explain what you're doing, how you're approaching it, and how the issue is happening, often by forcing yourself to outloud say the steps that is happening, you're gonna stumble upon Oh, I clearly wasn't checking for XY and Z or Oh, that was so stupid of me. I did this. So put a rubber duck on your I've actually thought about just getting Rubber Ducks as swag at some point and just putting them on your desk, because it's so funny how you can solve your problems just by talking to a rubber duck at your desk.

12
00:26:32,279 --> 00:26:39,150
Unknown: Yeah, and it's fun, right? I mean, it's Yeah, it's got a fun, a fun little thing. Yeah. Big fan.

13
00:26:40,410 --> 00:29:31,560
Wes Bos: Um, another big one is to check slack for GitHub issues. I get a lot of people tweet at me or send me emails to questions they have. And then I asked them to maybe do like a search in GitHub to see if it's a problem with the library. And chances are, if it's, it is a problem with the library, then they're most likely is an issue already there. And they're tracking it. And if it's not theirs, chances are someone's run into this issue and seen this error message before. And maybe you just made a mistake. And this GitHub, you know, issue line will show you where that mistake will be someone will say oh, well, I actually need to do this instead of this. So even just checking GitHub issues, is something that I sort of obsessively do anytime I run into a mistake just to see very, most, first and foremost, if there's already a map laid out for me to fix whatever I'm doing. So I don't have to figure out where I made the mistake, somebody else may have already made that mistake and figured it out. I think at the same point as well. If you ever find a GitHub issue, that you are having the same issue or the same error message, what I like to do even if it's like an issue that's a year or two old is just leave your solution in the comments. Because what will happen is over the next year or so there's going to be hundreds of people that stumble upon that on a Google search. And then they're going to give it a thumbs up because the GitHub reactions now you can usually just whiz through an entire issues, comments and find the one issue that hasn't 400 thumbs ups on it. And you know, okay, that clearly this is the silly thing that we all missed. And here's the solution to it. Yeah, yes, yes, yes, yes. Next one is use the node dash dash inspect flag. So this is not front end related, this is back end related. And for the longest time, you have been able to use Chrome Dev Tools on your node application. Because if you console dot log in a node application, you get it in your terminal. And unless you're using something like chalk, or colors, the output of console dot logs in the in your terminal is a very, very hard to read. And it's usually just a mess with other logs that are going in there. So if you now pass the dash dash inspect flag to your node process, it will fire up a like a local server that will allow you to talk to Chrome Dev Tools. And now I used to use a Chrome extension called nim. And I am and what that would do is it automatically would open up the dev tools when you started a new process. And there's probably still some use case for that. But now Chrome dev tools will just show you a little node icon in right to the left of the elements panel. And it's it's fantastic. Because you can now get a full blown console in Network tab, a couple of the other tabs as well for your node process. And you can use console dot group and all these things, debugger commands, everything that you're used to using in the normal Chrome dev tools in your node apps. Do you use this at all? Scott?

14
00:29:31,770 --> 00:29:40,770
Unknown: I don't. Yeah. Now, it's my I know my, my site is based on Meteor and I know you can use it with Meteor and everything like that. I just haven't and I definitely need to

15
00:29:41,070 --> 00:29:42,450
Wes Bos: just don't have issues.

16
00:29:42,840 --> 00:29:48,690
Unknown: Yeah, no, I have no bugs ever. In fact, I have zero bugs me my code is absolutely pristine, constantly.

17
00:29:49,350 --> 00:34:14,400
Wes Bos: Cool. I guess that's all the we have one more. Oh, one more Sorry, go ahead, which is to read the code in the library, because Okay, so code author is in open source, awesome authors, a lot of time though writing their code, and said, The sad thing is, is, you know, sometimes the docs, they fall by the wayside. And maybe this code has some features that are undocumented or not fully documented, maybe a function takes some parameters in a certain way. And then the API isn't documented correctly. Or maybe you're just running into an issue with the library itself. Now, this one's a little bit more advanced, if you're not like necessarily the best at reading code. But if you have access to the repo, and the pre compiled code, you can see the code as authored and see exactly what the API should be like. And you can actually look at the author's code to see all sorts of stuff. I mean, if you're using a method, right, then maybe you should see exactly what that method accepts what it outputs, what it actually does inside of it. And maybe not all of it is the most important part. But let's say you're just running into an issue, it doesn't hurt to look into the code and see exactly what the code expects, or how it was written. I learned a lot about a library called react spring the other day, just by looking at the actual implementation of it to see that, Oh, well, this thing actually does accept some props and configuration options that weren't exactly how it was shown in some of their examples. And because of that, I was able to actually get some stuff done without filing an issue to ask a question, or, or find someone else to say, hey, can this do this? Or can this do that, just by looking at the code totally. And on the same thread, often, the people who write these libraries are not the same type of people who write good documentation. So like, on the flip side, I'm not a great library author, but I'm great at providing examples and explaining things. So I sort of find that as my calling to say like, Okay, take 20 minutes out of your day here, and, and update the docs, because these, these author libraries are putting in lots and lots of time actually building this thing. And if you can take a load off both in terms of support as well as helping other people that are using it, then it's going to go a long way it is. And the best part is is like if you are running into an issue, chances are other people are running into an issue too. And if you can cover that in the docs, you're gonna save so many people have it like tight, like, why run into the same issue that everyone else has run into when somebody at the beginning of this like car crash could have just fixed the issue, and then there wouldn't have been a big car pile up to continue that metaphor. Yeah. So okay, so those are a lot of our debugging tips, sort of willy nilly stuff that you can use all over your debugging process to improve how you do your stuff. I think in this part of the episode, we want to take some time to talk about the different sort of browser debugging tools that come in both your Chrome Developer Tools as well as your Firefox developer tools, because although a lot of us open up this and see the elements tab, or the styles tab or the council, then a lot of us don't necessarily go past those tabs and pass those tabs are where some there's really excellent stuff. And not to mention more and more excellent stuff, like constantly being added to Chrome. And so because of that, I think, I think, yeah, we should maybe highlight some of our favorite tools, we did mention the Network tab earlier on in this and I use the Network tab, almost more than any of these, well, I guess, some of the extension ones or whatever. But I use the Network tab all the time, especially when working with queries to see what data if the data call was successful, why it wasn't successful, and where the stuff is coming in. I know we talked a bunch about this earlier. But I use this one a lot, especially for the waterfall too, you can see how long things took. And maybe there's some performance optimizations you can make here and there based on how long things are taking the load. Or if you're trying to try to debug like an AJAX request. And often what I'll see people is do is they they write the code to fetch the data, and then they write the code to parse the data. And then they write the code to display the data and it doesn't work. And you're kind of sitting there being like, oh, what did I do wrong? Right? With the Network tab, you can just say like, okay, is the request firing? Good? Is the request bringing back data? Good, what does that data look like? And then Am I parsing it properly. And then if all of those things work, then there's probably issue with the displaying step. So narrowing down where it's actually happening is really important.

18
00:34:14,520 --> 00:36:28,290
Okay, so next, that's frequently used is the Performance tab, which allows you to click a record button, reload your site or do some sort of action and see the code that is being run in what's called sort of a waterfall of code like one function, which calls another function which call another function. And it sort of all goes down in this like sort of triangular, like an upside down triangle shape. And this is really sort of beneficial for seeing where things might take a long time. Maybe there's a loop in there somewhere that is doing too many things. And not only that, but you can see the screenshots of your application as it's loading as it's working. You can enable CPU throttling to make your computer under higher stress. You can enable network throttling to slow down See similar slow 3g networks or even offline, this thing is just so incredibly handy for seeing how your application loads and the performance of it, I use this one again. In addition, in the Network tab, I use this one all the time, especially when I'm taking time to make my stuff load faster. Awesome that I use that quite a bit as well. And sometimes when I have like a 20 minutes or so what I like to do is just go into the Network tab and see like, how much can I shave off of my my page loading. And I remember I went on my CSS Grid site, and I put was a cloudinary passport. So I put their like image compression URL in front of all of my images, and I shaved off like 500 milliseconds or something like that. And in quite a bit of like, I think like, four or 500. Meg's worth of download, I was pretty happy about that. So it's kind of fun to see. Okay, where are the big things coming from? And how can I actually get those down? Sort of what I love in these Dev Tools is specifically Firefox has a lot of like little edge case tools that not a lot of people know about, because I know that a lot of people are on Chrome, but Firefox is dev tool game in the last probably a year or two years has been doing really, really good. We've talked about the CSS Grid dev tools are fantastic. But it's like the little things like the fonts tab. Have you ever like tried to debug a font? Oh, my God, like, I don't know if it's my computer font, or if it's actually working? It's one

19
00:36:28,290 --> 00:36:34,800
Unknown: of the my top my least favorite things to debug is, why isn't this font loading? Or why isn't this font working?

20
00:36:35,100 --> 00:41:34,590
Wes Bos: Yeah. And what you can do is you just go to the fonts tab of your like, you select like a paragraph tag or a heading in Firefox dev tools, hit your fonts tab, and then it will show you which Web Fonts you're loading for the page. And then it will tell you other fonts in the page. And it'll tell you if they're system fonts, or if they're web fonts. So that way, you know, and I've done this many of times, I've it looked great on my computer, I deployed it, and then you forgot to or the web font wasn't working for some odd reason, because it was just a font installed on your computer. Yeah, totally. And along the lines of that, here's a little a tasty treat, if you don't know about it, but the three little dots in the next to the x, that gives you all the settings in the Chrome Dev Tools, there is a little tab there that says more tools. And this is going to be where you'll find a whole bunch of awesome little tools just like that in Chrome that you may have never even used before. And this list grows all the time. In fact, one of the options in this list is what's new, which is always worth popping open to see what's new in these latest versions of Chrome or Chrome Canary with the tools that exist. In fact, I was just doing a lot of animation work. And there's an animations one in here that allows you to step through an animation with a playhead. Anyone who's ever worked in something like after effects, or any sort of animation design library knows that well, animations on the web are very difficult to really figure out or fine tune because you don't get access to the things like a playhead. And this basically, anytime you will trigger an animation. For instance, if I hover over something, and there's an animation, it automatically gets locked into this animation thing, you can click the animation, you can drag the playhead around, you can make fine tune modifications to this and then re click the play button to watch the thing. Go again. So you're really doing some animation debugging, this thing is super, super cool. Not to mention just just for the sheer amount of customization options it gives you and stuff like that it's awesome. All along the same lines of all these little edge KC tools because like sometimes we just get stuck in the elements tab, and then maybe the console. And you know a little bit about using a couple of the other ones, but there are so you can dive deep into all these different tools. And Umar I don't know if I'm saying his name, right. I apologize if you're listening to this, because I've met him before. But he has these dev tips. And he's been doing this for I bet like six years or something like that. He's been posting these little animated gifts of how to use different features in the dev tools. And he's been tweeting out little gifts forever. But if you go to Umar u m a r.com forward slash dev dash tips, we'll link it up in the show notes. He's got 171 of these little little tasty nuggets, tasty treats that help you to learn the little edge cases of it. And he also has a course as well, which is modern Dev Tools comm which goes into it looks like a little bit more in depth of it. So I would check that out if you're interested in really conquering the different pieces of the dev tools if the stuff that we're learning today. If you're saying Whoa, I didn't know you could do that. We're only scratching the surface here. Yeah. And along those lines of another little one is B one a Firefox got first and then chrome thank god they added this because I love this one, which is the layers in Chrome with under more tools layers, and it's going to show you if you're working with a lot of stuff that is occasionally on or off screen right? Maybe menus flying in or alerts or something like that and things like Working, you're not quite sure, or like 3d stacking order where two things line up on top of one another, this layers will show you the entire website with stuff outside of the canvas included. So if you have a menu sliding over, that menu will be over on the side, and you'll see it off of the canvas. And you'll see where everything sort of exists. Really just making sort of debugging these kind of situations way better. Not to mention, there's also 3d views where you can click and drag and see this thing as like sort of a 3d model in space. And the cool thing about that is then you can really figure out stacking order, and maybe why things aren't lining up on top of each other, or why you can't see something, maybe you can see something, and maybe it's just hidden underneath, like hidden underneath this stuff. So these 3d views and the Layers panel are really super cool and can come in really handy when debugging layout. Another great one I have is overriding sensors. So if you ever working with you want to work with geolocation, you want to fake some data that's coming in, if you want to ever fake the like fake an iPad, actually a little little hot tip, if you go to instagram.com and set your use Chrome dev tools to make it an iPad, you can actually use Instagram on the desktop, you can upload photos, you can view stories, I didn't even know you could do this, but you can I my friend arley posted a little similar day. And you can I didn't even know you could use, you can use all of Instagram, uploading and liking and commenting and viewing stories from the desktop. If you just fake the user agent as a mobile phone, like an iPad, something like that,

21
00:41:34,610 --> 00:45:57,510
yeah, that it's awesome. I the amount of stuff that you can just, you can fake through that I use it all the time. For geolocation. Personally, I was on a here's another little hot tip, I was on a plane once and the plane had a sometimes they have cheaper rates if you're on a phone for internet. And once they had it free if you were on a Blackberry. So I just I just fired up my dev tools and change the user agent to a Blackberry. And then I got free internet. And then I switched back and I had free internet for the whole flight. And that is off just yeah, you always got to try it. Anyways, we have different sensors. So what's the when you tilt your phone, what sensor is that? accelerometer? Yeah, the accelerometer, I built some fun stuff in that you can actually tell via JavaScript, how the user is holding their phone. And if they're turning it and flipping it over, you can fake that you can fake the geolocation. If you open up Xcode, this isn't in the browser. But if you open up Xcode, and you open up the iPhone simulator, you can actually simulate somebody driving a car or the called riding a bike and turning. Because one time I needed to build a clickable speedometer with html5 geolocation, and it tells you the speed in there. But the hard thing is that in order to test that you have to run down this tree. So you can go into it. And this is part of my JavaScript 30 core. So you can go into Xcode and simulate someone driving or someone riding a bike and someone local a city traffic or highway traffic. Yeah. So I mean, there's just so many of these things. And they're all super duper helpful in all sorts of use cases. So I guess another one I wanted to talk about was maybe like, what sort of extensions Do you use for Chrome dev tools I personally have, like the Apollo dev tools, which are awesome. I have the React dev tools, the Redux dev tools, the view dev tools for any of those apps. But in addition, I also have the lighthouse extension to allow me to use lighthouse at any given point, as well as a JSON format, or which people comment all the time, this Chrome extensions called JSON format, or Yeah, all it does is give you pretty JSON, or you can look at the raw, it allows you to collapse, it allows you look, I use this all the time when looking at data coming in. I love it. Because if you highlight if you hover over a nested node in your JSON, it will tell you the path to actually get to that that nessa thing in your JSON. So it'll tell you like person named first the abbreviated, it'll show you the all the way down. And then you could just copy that dot path to what you're looking for. Yeah, so nice. Another tab I really like is the application or storage tab, that depends on what browser you're using. But this will often tell you what cookies are set by that browser. So if you're having trouble with something going on, or if you actually want to log out of website, you can just clear all the cookies and then refresh the page. And you can see exactly what is being set. And then it also shows you things like local storage in index dB, so you can see what data is showing up for that specific domain name. I use those quite a bit. The cookies wasn't in there for the longest time, but it is now and it's really, really good. Nice. One I really like is the Firefox grid inspector. It shows you basically everything about the grid lines, the gutters, all that stuff like, oh, what exactly your grid is looking like. And I actually use this one just yesterday. I mean, I use this all the time, but just yesterday, I was having an issue in Firefox specifically where the grid was off. sort of weird, but it wasn't weird in any other browser. And I checked it out. And luckily, it showed me that there was a whole lot of padding getting applied to things. And it turns out that Firefox doesn't handle a padding percentage on a grid item very well, where all the other ones just sort of view it as a normal. And I use the padding percentage for aspect ratio, like placeholders for images. So because of that, I was able to see that the actual grid cell was way, way bigger than it needed to be, I just simply wrapped each grid cell in a div, and it was doing those as the children rather than the one with the percentage bottom. And I could see that it was sort of instantly exactly how to fix that using the Firefox grid tools. So there, if you're working with CSS Grid, I'm hoping chrome implement something that's as good or better than these, because they're just so good. And I use them all the time. But one way that you can avoid having to debug your CSS Grid at all is by using coffee cups, CSS Grid, prototype, software,

22
00:45:57,660 --> 00:49:30,120
good transition. So coffee cup is a they make these tools for working kind of visually building websites. And they contacted me a while ago, they actually just typed in CSS grid.io, I think to try to buy it, because they were coming out with the CSS Grid product. And they found that I had done a course on it. Then they got in touch and said, Hey, like, Is there anything that we could do together here? So I set up a call with them, I was like, okay, so you are building it, what they have is they have this actual program that allows you to visually drag and drop and add elements in use CSS Grid to build an actual website. So I said, Okay, that might not be a really good fit with our audience, because like, we don't really use visual builders, but show me right. And so I jumped on a call with them. And I actually loaded up the software myself. And I started to build a layout based on CSS Grid. And then, so it worked really well. Um, you can add different types of elements, you can change how big they are, all of like, I know a lot about CSS Grid, I did an entire course on it. So I was really given it the gears to see how this thing works. And to my surprise, it worked really well. And then when it exported the code, the code was extremely clean, I got some a bit burned from 10 years ago, and we had Dreamweaver and export this gnarly looking code. But this is absolutely a way that you could visually build, you can use their templates that they have, or you can just visually build a layout in CSS Grid. And that's probably why I like Firefox dev tools, because it visualizes grid for you. And then you can export this thing to HTML and CSS, and you could probably just pick it up from there, you can either edit it in this thing, or just pick it up from there, the code is so clean, so I was very, very surprised at it. And if you're looking for a way to either learn CSS Grid or just build stuff with CSS Grid, I'd probably recommend checking this out, they've launched a domain name, CSS grid.cc. And on that they have the free CSS Grid builder that you can download, you can watch a demo video, how it works. And then they also have a whole bunch of resources on how CSS Grid works. So because like part of understanding CSS Grid is not just getting a tool, it's it's really thinking and tackling a layout in terms of CSS Grid, you really have to relearn how to do layout when you learn CSS Grid. So they put together this awesome website at CSS grid.cc. That will both give you the tool that you need, as well as the a bunch of information in terms of how to learn CSS Grid. So check it out at CSS grid.cc. And thanks so much to coffeecup software for sponsoring the podcast. Nice, cool. So I think that pretty much does it. I mean, there's just so much stuff here. There's so many dev tools, and we left out probably a whole lot of stuff and debugging and performance tips. So maybe we'll have to do a part two to this where we talk a little bit more in depth about some more dev tools and really dive into some of that stuff. I don't know if you would be down for that. But I would be down for that. Yeah, tweet us at syntax FM tweet us your favorite dev tools, tips. And we'll probably put together another episode on this. My sick pick today is it's not gonna be tech related at all. But I posted a picture on Twitter the other day of just my backyard, we're having a beer with my wife in the backyard. And a couple of people said, Hey, nice coffee table. And so my sick pick is how I actually got this coffee table. So it's kind of a I think developers will find this interesting. Do you guys have a Habitat for Humanity restore down there?

23
00:49:30,120 --> 00:49:32,250
Unknown: I think we probably do. Yeah.

24
00:49:32,280 --> 00:50:42,360
Wes Bos: So Habitat for Humanity has these stores in Canada, they're called the restore and they sell building materials that people have donated. So someone rips out a kitchen and the stuff is still good. Then they donate it and then you can go in and buy it. So one thing that they sell is granite countertops from counters that people have ripped out and replaced with new stuff. So what we did is we went and found a piece of granite that was I don't know maybe three feet by two and a half feet. It's heavy as hell but it's like 150 bucks for a huge piece of granite. Then we built some cedar some cedar like a like a base for it that we could put the granite on top of and it's like the best coffee table for outside ever because it's super heavy because it's hundreds of pounds from the granite and it's it stays outside all year round it handles the snow just fine because it's literally granite and cedar. And it's it's great for the kids because you can just wipe it down you can hose it down it doesn't get musty or moldy or anything like that because it's natural materials. So hot tip if you're trying to build some sort of outdoor coffee table maybe look for a piece of granite and and build a table out of it.

25
00:50:42,390 --> 00:50:48,960
Unknown: I thought it was really cool when I saw that. Yeah, I'm actually very very into this idea. So I'm definitely have to see a little bit

26
00:50:49,500 --> 00:54:45,450
Wes Bos: about one probably 18 years ago they built one and they still have the same one and they've never sealed it or anything and sitting outside for was 1618 Canadian winters. Amazing how well I think they've rebuilt the cedar base once in that 18 years. That's amazing. I'm really sick pick sick tip pick tip pick my sick here is going to be for an app that I'm sure a lot of people have already but for those of you don't know this app saved my butt. It's called Hotel Tonight gives you really cheap rates on hotels specifically if you need them like now like if you ever need a hotel and you're somewhere Hotel Tonight gave me a like literally like 50% off of a hotel. So when I was in Paris on my layover instead of like having to stay at a crappy hotel for X amount of dollars or whatever I was able to stay at this really sweet fancy hotel for the exact same price and not to mention the app itself is really cool just really well made so I always a big fan of well made cool apps so Hotel Tonight has saved my butt on multiple occasions when I need to book a hotel at the last minute so yeah sick pick that's cool. I saw an ad for this on TV the other day Really? And it said Hotel Tonight for hotels that are not just for tonight apparently Oh yeah. Oh unfortunate name but it sounds like a great app. Well I think I think for a while they could only book hotels for tonight. I'm not quote me on that. But I think that's the way it was and then they just realized that maybe the market could be larger if you could book for more than a few nights in advance that's like hotwire is now just showing you the name of the hotel being like low last six customers got this hotel and every time that because people hate that sort of guessing game I my sick pick a couple months ago was a website where you could decode the what hotel it was, but now they're just showing it to you. Now you nice, cool sick pick for me it are no shameless plug. I'm just gonna shameless plug all my courses at Wes bos.com forward slash courses, can check it out, I've got so much ESX and react in all kinds of good stuff, I am almost ready to record my advanced react course. I it's funny because Prisma which is the the graph qL database, they've they rebranded from graph cool the other day, and they have had some major changes in the last couple of months, Apollo has had some major changes in the last couple of months. Next j S has had some major changes, and hopefully Fingers crossed, everything has stopped changing for at least a couple of months. And I'm glad that I've waited this long because it would have all been out of date in a month or two. But it's it's all being reviewed by a couple of the best people in the industry at this stuff right now. And then I'm ready to record. So probably a couple more weeks before you can get it. I know everyone's chomping at the bit to get it. Yeah. So that's the whole thing is like the growth in our industry is amazing for like getting new features and new easy ways of doing things and new products and whatever. Yeah, for us content creators. It is very difficult. You You spend all this time agonizing over decisions about what software and what tools to use, and then you get one thing and then it's invalidated. It totally ruins everything that's happened to me so many times. It's definitely like a learning experience about how to design courses that are more bulletproof. But that's so totally. And on the flip side, when something does work very nicely, like my node course has been for about a year, year and a half. It's been out for about a year and a half about a year it's been out and it hasn't had any major updates other than a couple things here and there. And then people ask me if it's out of date all the time. They say no, yeah, no, yeah. So you're you're you're kind of damned either way. But that's the industry right like that we we chose to work in it and you kind of have to keep up to date with it. And by keeping up to date we become you have a bit of a competitive advantage over a lot of those garbage tutorials that become out of date and they don't bother the time to update them.

27
00:54:45,480 --> 00:56:35,340
Yeah, my shameless plug is going to be my level two react course. This is going to be coming out this week on level up tutorials. It's already recorded. I was hoping to get all the editing done on my vaycay but it will not vacate my trip to Romania. I wish it was to vacate. I did not get all of it done. But I'm hopefully going to crush the rest of the editing in the next day or two and get this thing up for release on Wednesday, if not Thursday, probably this is a course it's a intermediate level react course. And the idea behind it is that it's covering pretty much the next level of stuff that my react 16 for every one course didn't cover or maybe wasn't didn't exist. So covers the context API covers, using portals, it covers really, really sick animations. I'm doing sort of like the Tinder interface where you're dragging a cart around. And these are extremely performant animations, you're going to be sort of blown away by how good these things look in any sort of regard, we go over sort of all the systems about using a library called react spring to build these really excellent animations. And again, we go through and build some practical stuff to like an animated modal using portals using render props. I mean, there's like the first few videos of the series just set you up to understand now concepts that are becoming very, very popular like render props in react. So this is going to be an intermediate skills course but it's going to be nice and easy ramp up to set you up to learn and use all of the new and awesome techniques in react so level to react to level up tutorials.com forward slash store where you can subscribe get access to that along with every other tutorial or you can purchase that one outright if subscriptions aren't your thing, quick good. I think that's it for this week. You had anything else got nothing. Awesome. Thanks so much to coffee cup CSS Grid builder and fresh books for sponsoring. And we'll see you next week.

28
00:56:35,340 --> 00:56:48,030
Unknown: Please pace. Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

