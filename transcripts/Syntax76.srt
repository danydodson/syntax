1
00:00:01,319 --> 00:00:02,820
Announcer: You're listening to syntax,

2
00:00:02,849 --> 00:01:16,110
Wes Bos: the podcast with the tastiest web development treats out there, strap yourself in and get ready to live ski and West boss. Hello, everybody and welcome to syntax. We are the podcasts with the tastiest web development treats. Today we're talking all about specialization versus generalization. I get questions about this all the time, people who are either in their job for a while and they feel like they're not really good at one thing, and people who are brand new to web development, they don't really know what to focus on, should I get good at absolutely everything, or should I just get good absolute, just like one thing. So we're gonna try to unpack that and give our thoughts as to, to what you should do. Today's episode is sponsored by two awesome companies, fresh books, which is going to help you do all of your cloud accounting, all of your expenses, all of your inputs, all of your outputs, everything that has to do with running a business, and dev lifts, which is going to get you fit. So if you are a developer, and you are looking to get strong or lose some weight, or just kind of get tuned in mentally, because you want to be totally focused, then Daedalus is going to help you out with that little we'll talk about both of those companies partway through this episode. Hello, Scott, how you doing today?

3
00:01:16,110 --> 00:01:17,040
Unknown: Hey,

4
00:01:17,399 --> 00:01:35,310
Scott Tolinski: here Hello to you, as well as I'm doing pretty good. Hey, we have some fantastic news, which is finally public that we can start sharing people syntax live is going to be happening. Yeah, I know. I know. And then the funny thing is, is that we've known about this for a good amount of time now.

5
00:01:35,369 --> 00:01:36,990
Unknown: And people have been like, for months. Yeah,

6
00:01:36,990 --> 00:02:00,870
Scott Tolinski: people have been like, you should do a live show. I mean, we've gotten that a few times. And we just wanted to be like we are but now No, we know we can announce that we're officially doing a live show at the jam stack. com San Francisco, October 30, I believe is when they're speaking the conference of the 29th and the 30th. It's gonna be a blast. We're gonna do syntax live on stage. And I think we're gonna we're gonna try to make it pretty fun.

7
00:02:01,019 --> 00:02:55,650
Wes Bos: Yeah, I'm so excited for it. Because I've first some people thought that we are. I didn't even tell you this, Scott. Some people thought that we were in the same room when we recorded but I have never met Scott. We're on webcam twice a week to do this. And we chat almost every day in chat, but I've actually never met him in person. So I'm really excited about this kind of live, I think it's gonna have really good energy. And there's a whole bunch of other really good speakers as well. There's got to linsky founder of level oils. Wes Bos founder and I didn't give that's the thing about having like a business that I don't is kind of this thing that it's just yourself founder, founder of Wes Bos Enterprises. Yeah. So they just put founder of cindex Chris coiour Jessica Lord Quincy Larson, who's from Free Code Camp a Monica. Let's Let's butcher her last name. Didn't soluis su di NCULS cu

8
00:02:55,710 --> 00:02:57,960
Unknown: I'm sorry, Monica. So sorry.

9
00:02:58,650 --> 00:03:13,740
Wes Bos: Didn't silly was a terrible I wish I knew how to pronounce things. But it's there's more speakers gonna be announced a very very soon as well. So check out jamstack calm calm if you want to meet up with Scott and I in San Francisco.

10
00:03:13,919 --> 00:03:47,819
Scott Tolinski: Yeah, it's gonna be sweet. We're I mean, it's funny because we're not often even in the same country. So yeah, this delay so it's gonna be a blast. I'm really excited about it. And now that we can start talking about it um, yeah, I'm just I'm pumped. I'm glad it's out there. So it really episode we're gonna be diving into this whole specialization verse generalization jack of all trades, master of none sort of stuff. Well, I think you wanted to kick it off here with a little bit of a message that you received from Yeah, general question.

11
00:03:47,850 --> 00:05:07,290
Wes Bos: Just someone someone sent me a DM on Twitter, which, sometimes I read them, I have probably have, like 400 DMS right now I get so many and every now and then I'll just dip into the stream and see what people are saying and try to get as many as I possibly can. And this is one that I got was I've been struggling with deciding Should I aim to be full stack front end or back end? Are there any drawbacks or benefits? This is a question I get all the time for people being like, I don't really know what to focus on. So we're gonna attempt to tackle that and answer that question for you. So let's talk about like, what is a specialist and what is a generalist, um, I like to think of a specialist as someone who is very good at one or two things who are sort of considered experts in a specific area of, of something. And we'll talk about this whole full stack versus front end in a bit because I think even inside of both of those, you can really unpack full stack and in front end and back in. So some examples of someone who is a dev that does just Drupal, they are a Drupal specialist. They will build Drupal, extensions over Drupal sites. They'll have all of the ideas about performance, they'll probably speak at conferences, and anytime that somebody He needs to hire a Drupal developer or someone needs to write a book about Drupal, they are the person that is going to be contacted about that.

12
00:05:07,410 --> 00:07:20,070
Scott Tolinski: Yeah, that is, I mean, that is the specialist. And what it is, is just that they are very, very, very good at one thing. And then that one, one thing is, you know, largely what you become known for. And if you become known for it, then again, you're gonna name is going to come up, and all these sorts of situations, right. And this makes you very hireable for especially like big dollar contract work, where someone says, shoot, we have a problem with this Drupal site. And we don't have anyone to fix it. But we know this guy who is very, very good at Drupal, and we're going to reach out to him and maybe he or she, like knows that how to solve this problem. Or maybe he or she knows a person that can solve this problem, as well. Right? Maybe they know another expert in this situation, and therefore they can reach out to them and put you in touch with somebody who is a master at this work. And so again, these are from very high dollar moments, and Wes has it listed as high dollar. Oh, she moments. One time we had a client who was like a big, big client, right, and it was a small agency, and they wanted search, right. And this is before some services existed that really made it easy. And if you're going to be doing like a very high end search, you really needed a specialist in this sort of thing. But in particular, they had chosen this Google box, it was sort of the Gavin Belson signature edition. You know, it was it was the Google the box, right? And at the time, yeah. Without the phallic logo. But at the time there was like, yeah, you needed to be an expert in this Google box. And this Google box, they bought it. And they did all this stuff without even telling us. They're just like, Oh, it's Google. It's the Google box. We got to have this Google box. And all sudden, we're like, well, how the heck do we connect this to our system? How do we get this thing working, or whatever, and we found a specialist and she, she killed it. One. But she she just went through, she nailed this thing for us. And it was a big, big money contract. She picked up a nice hefty payday because she was the only person who had that experience that we could get ahold of the only person that had that experience that could do the job for us. And because of that she was the master she got paid.

13
00:07:20,309 --> 00:09:18,169
Wes Bos: Yep, being a specialist can be very lucrative and very comfortable if you have taken the time to be well known in your industry in person. So I got a couple examples here. In where I live, downtown Hamilton, every single house has the exact same I think it's like oak strip floors, where it's like this corner sawn oak and they all have the same like little detail inlay. Every corner has these like little kind of like square details. It's so so nice. And every single house has it. And everyone gets their floors refinished, because they obviously they're like 100 years old, they're pretty beat up. But they they've been covered with carpet for most of their life. So you can you can pull them up and get your floors refinished. And every you talk to anybody downtown, and they say get Malcolm, everyone says call Malcolm. And if you even just Google Malcolm the floor guy, cuz like, I'm just like, Who's Malcolm. And if you just Google Malcolm, the floor guy says one guy, and he has just a truck with a whole bunch of Sanders in it. And he knows these floors cold and he's booked six months out in advance. And he just kind of lives his life making good money sanding and restoring these exact type of floors. Everyone knows to hire Malcolm right. It's a perfect example of specializing it. And he says on his truck, it says we don't do repairs. And I also remember this, this is another aside but T Han lakhs, which used to be a really well known design agency here in Toronto. They all went to Facebook a couple of years ago, but they used to have a website and said we don't do this, we don't do search engine optimization, we don't do. And I love that idea of of having a we don't list instead of a we do list because it really shows the person that we are really good at doing, like interface design, or refinishing the hardware floors, and you're gonna hire us because that's exactly what you need. If you need someone to repair your floor. Go find someone else.

14
00:09:18,409 --> 00:10:42,510
Scott Tolinski: Yeah. I mean, there is something to be said about the person who is very good at saying no, I mean, the person who says no to things is the person who's in control of their stuff. I mean, that's a big thing in our world as freelancers is knowing when to say no to a job, but also like when to know that you aren't the right person for the job. It's it's a sign of maturity. It's a sign of like control over your mastery and all sorts of stuff like that. So again, that we don't do this sort of thing is extremely I don't know it's very nice to see because so many times people want to fake the funk and try to do everything. And you can't necessarily do that. No another way that a specialist can be like very, very useful as send something like a code review, especially if you want your devs. To get like the best advice from somebody who's like a master at somebody, you're going to find somebody who only does react and does react very well to do your to check out your front end code and maybe give you a here's how to improve, here's how to go. And then that turns into like a training situation. Instead, these code reviews, I mean, you're essentially get paid to not write any code, necessarily, you're you're just looking at other people's code, making recommendations and that sort of thing. And that seems like a pretty sweet gig, right? I mean, yeah, you are sort of the Gordon Ramsay of someone else's code. And you can just come in there and tune it up and show them how to make the perfect cheeseburger or something.

15
00:10:43,649 --> 00:11:53,490
Wes Bos: I actually just had one of these gigs. A couple weeks ago, somebody was trying to buy a company. And part of their vetting process to buy that company was to have the codebase review to make sure by a third party, make sure that it was it was quality and things like that, and it was a react and graph qL codebase. And I got somebody was like, go talk to Wes, because he will review that codebase for you, because he knows both react and graph QL. So I took, I don't know, four hours or so. And I just read over the codebase and looked at all the patterns and stuff like that. And it was a very fun job to do, because I just got to like, read other people's code and understand how it worked and and then explain that and convey that in a way to the stakeholders of Is it good? Is it scalable? Is it something that's going to? Is this on? It's going to run? How expensive would it be to hire somebody at this level? Like it was a fairly advanced code base? So I had to tell them like, okay, like, you would have to hire someone like me for this. And that would cost X dollars a year. Or if you were to hire someone like that it'd be X dollars an hour. So it's kind of interesting way to go in via specialist. Anything else to say about specialists? Should we go into generalist?

16
00:11:53,520 --> 00:12:54,659
Scott Tolinski: No, I think there Yeah. And along that same line, I got hired to do a technical review for a book, which probably was even easier than that, because all I had to do was read a book, and it was a book I might have been interested in reading anyways. And I just got to make sure they didn't make any technical mistakes, look at the code, whatever. And they're examples. And it was really nice, it was a nice thing. Because Yeah, it's like getting paid to read something that just further solidify some of your knowledge and then general area. So next we have the generalist, so we've gone over the specialist. Now let's talk about the generalist, the jack of all trades, the dev who wants to do it all and know it all. And just to be you know, you know, Master of many domains, rather than just one singular domain, this person, essentially somebody who's not only just going to learn Drupal, or maybe even Drupal and WordPress, because those are pretty similar, but they're gonna learn Drupal, they're gonna learn WordPress, they're gonna learn Django, they're gonna learn rails, and they're gonna try to do all these different things. And they're going to just say that, oh, yeah, I can do that. That's what you're building the site in, I can build that, right?

17
00:12:54,809 --> 00:14:28,830
Wes Bos: Yeah, if I saw somebody had a resume, and they had like, five or six different languages on it, and every framework under the sun listed on it, and all that stuff, I would, that would raise an eyebrow for me for sure. Because I would know that okay, this person, unless they're an absolute genius, they likely do not have like, they're not proficient in all of these languages, and all of these frameworks and know the ins and outs and, and stuff like that. So that's kind of I think what a generalist is, in one way, I think another way that you can look at a generalist is someone who focuses on like a language, but not necessarily a specific area. So I think you could be a just a JavaScript developer who can code up a back end and a front end. And I don't know if you necessarily, this is kind of where I'm at right now. And I am a what I call a full stack developer, I will code up back end, no problem, I can code up the front end, I can write all the CSS that's sociated with it sort of tip to tail, I can do the whole thing. But I don't necessarily think that's a generalist. Or maybe it is considered a JavaScript generalist, but I would be very, very lost if you threw me into the back end of a Python application or you're trying to throw me it like somebody was asking like, when is a machine learning course coming? And I was like, brother, that is so far outside of my wheelhouse. I have I know nothing about that. And it's not anything that I really have interest in. So I don't know what do you thought like, would you think of somebody a year kind of in a similar spot? Would you say yourself as a generalist or a specialist?

18
00:14:28,890 --> 00:15:49,860
Scott Tolinski: Yeah, I I'm probably a bit more of a general than I would like to be but again, all the skills are related. I find myself having a hard time not wanting to do things like oh, there's a new design that needs to be done. I'll do it like, Oh, I should probably hire somebody out for that. But yeah, again, I mean, if you are the generalist You know, there's going to be more jobs available to you if you have like a tighter skills in like very related areas, then then skills and a bunch of non related areas. Again, If you're expanding Django, rails node, all that stuff, then you know, there's gonna be less jobs available to you. Because the the Python, the person who's hiring a Python dev isn't going to be hiring the dev who's a Python and a node and a Rails Dev, they're gonna be hiring the guy who or the girl who's a Python Dev, do you know what I'm saying? So yeah, I think building these related skills is is the most sort of important part, especially because, like when you're on that job, and you're you're doing like, when you're doing very specialized skills, you're going to be doing a lot of heavy lifting, and we're gonna be doing a lot of heavy lifting. If you sign up for deadlifts, which is one of our sponsors this week. It was one of our first sponsors and where they are very first sponsor, I know I asked this question every single time but

19
00:15:50,730 --> 00:16:21,210
Wes Bos: let's let's see, let me take a quick look at that. I'm curious who our very first sponsor was. WP Oh, no. WP migrate DB Pro. On Episode Five was episode three didn't have a sponsor. And yeah, WP migrate. dB Pro is our very first sponsor and then Freshbooks came in right after that, which is interesting to see fresh books that definitely keeps tabs on on the the podcast charts. As soon as a new podcast jumps up. I think that they they try to jump on it.

20
00:16:21,240 --> 00:16:45,270
Scott Tolinski: Yeah. So deadlifts is a it's just a one of those things that we've been they've been friends of the show for quite some time. Now. I myself and I'm just extremely active. And some programs like deadlifts, which are encouraging you to not only be a good developer, but to get your your mind body and everything connected, right. So with a little bit more about deadlifts is Wes Bos.

21
00:16:45,450 --> 00:19:48,080
Wes Bos: Yeah, so DevOps has sponsored a whole bunch in the past. And they're back for a couple more episodes. Now, just to tell you about sort of two programs that they have. So they've got one new program was called fit dot start, which I love because it's like a dot star. It's like a method on fit, which makes me laugh. It's 19 bucks a month. And it's tailored towards a goal. So you if you want to get lean, you want to lose some fat, if you want to do just bodyweight exercises. So if you don't have a gym that's available to you, and you just want to do bodyweight exercises and get a little bit stronger that way, then you totally can. Or if you want to get strong if you want to do compound lifts. So I really like that because you can say like, Okay, I'm a developer, I want to get fit. But here, here are my goals that I want want to go is 100% beginner friendly, your first week is actually just taking a walk to introduce reintroduce some movement into your life. And then you get your workouts via email soon, they're coming out with a mobile app, which I think is going to be really cool. One thing I really like about deadlifts, guys is that they obviously are going to give you your they're going to talk about your goal, and they're gonna tell you exactly what to do. But they're also going to tell tell you what to eat, what you should do is your nutritional Guide, which is, I think, is probably more than actually half of getting in shape. And then if you for that fit start you get if you use the code syntax, you get 50% off your subscription forever, then they also have a premium offering, which is what they've had since the beginning. And this is actually the one that I went through myself where if you want maximum personal personalization and maximum accountability, so if you want to talk with them, tell them what's going on with you. So I sat down with them and said, Hey, I want to lose a little bit of weight, I want to get stronger, because like I was feeling like, ever since I got my kids, I was feeling like I was like my back would start hurting in the morning. And I was like I need to like I need to get stronger because I want to be able to throw these kids in the pool, like 10 feet in the air, right? Yeah, right. Throwing kids in the pool is the best anyway. So that's why I don't I want to lose a little bit of weight, I want to throw my kids 10 foot in the air and not have my back hurt the next day. And then they come back to you with a whole workout. A whole nutrition plan, what you should be eating, things like that. You can have check in video calls with them have a private Slack channel with them. So if you want to be like, Hey, is my critique good if you want to take a little video of yourself lifting or something like that, really, really hands on Taylor there. If you use the code tasty, you'll get 50% off your subscription. But that's only for the first 10 people. So make sure that you you jump on that as well. So if you are developer looking to get fit, and I really want to stress that the the main thing for me with with going through this program was of course you lose a little bit weight and you start to feel better. But what's more, the biggest thing for me was like the mental clarity of just being on not being in a bit of a fog a bit of a days all day long. Where if you want to be a better developer focusing on your fitness is absolutely something that you need to do. So check it out@deadlifts.io and thanks so much to them for sponsoring.

22
00:19:48,320 --> 00:20:19,230
Scott Tolinski: Nice, cool. Yeah, so I think you know, part of it so far is what we're getting into is really that we have the the person who's collecting really narrow skills and related skills And then you have the person who's collecting every single skill that they could possibly have. And maybe like, collecting all of them isn't the right idea, right? Maybe, maybe it's like, it's not like pugs, or Pokemon or something, you don't want to collect all the skills, you want to collect the ones that are all grouped together. And related.

23
00:20:19,260 --> 00:21:20,600
Wes Bos: Yeah, yeah, I think if you're gonna be a generalist, be a generalist with skills that lend themselves together. So I think more and more the, the whole front end versus back end is kind of shifting or moving. Because a lot more logic is happening on the client side, like, it used to be that you would you would write, like, I don't know, 40 lines of jQuery for a website, and you would have a couple sliders and whatnot, and it would be okay. But now more and more the entire, like interface logic, everything is happening in the browser in JavaScript. And then you might have some stuff on the server side as well, you might have to spin up a graph qL server. So I think both of those things are getting a lot more complicated. So if you are going to be having some sort of skills, I think, having skills that lend themselves and you'll be able to transfer from one to another, I love being able to have good JavaScript skills, and then jump onto the back end, jump into the front end being able to understand what's going on over all the the spots there.

24
00:21:20,640 --> 00:22:27,270
Scott Tolinski: Yeah, I think that's one of the reasons why people were so confused. When node took off in popularity, like some back end, people were confused, because they're like, I don't want to do more JavaScript code. If you think about it, it's one way that you don't have to learn something else, I don't have to become a PHP master now to write JavaScript code, or back end code, because I can transfer some of those skills and abilities that I had in JavaScript language over to a whole nother area, right? It makes it bleeds that line between this this sort of back end and front end. Because before, like back end, people were really good at Python, or Ruby, or, or PHP, or any of these server side languages that were like sort of the classical way they worked on the back end. But now since we have access to JavaScript, in the back end, it allows this this blur, ending, blurring, blurring, blurring is a word. Yeah, it allows this blurring of different topics like that. So again, like you said, the front end back end is become a little bit more broad. So let's talk a little bit about maybe some of the front end skills and some of the back end skills and break them into individual skills.

25
00:22:27,719 --> 00:23:33,900
Wes Bos: Awesome. Yeah. So I think with the front end, you can, even inside a front end, you can specialize because as things get more and more complicated, both on the front end and back end, we're starting to see people specialize in just specific parts of of doing the front end. So you could be a specific framework specialist, you could be the React person, the view person, you could be really into Angular, you could be I think, even right now, there's a huge market for Angular one developers, there's some of these companies have these massive applications that have no hope of ever being moved off of Angular one, just because of how large they are. And I often get emails of people asking like, hey, like, Can who do I hire for Angular one Dev, or I need some tutorials for Angular one stuff, because our application is still on Angular one. And we need someone to to help us out. So it's kind of funny, because there's even with any language, like even COBOL, there's people that still are really good at COBOL and get paid handsomely. Because there's not a whole lot of people that specifically do it. So I guess that's a little argument for specializing in a technology that is not so hot.

26
00:23:33,960 --> 00:23:34,650
Scott Tolinski: Yeah. Right.

27
00:23:34,650 --> 00:24:16,380
Wes Bos: What else? What else on front end CSS you could be an expert on. On CSS, there's certainly a lot of people like I think of someone like Harry Roberts, CSS wizardry, who just goes into all of the big companies around the world and schools them on how to structure their CSS how to best approach things, how it works, right, like you think you think like, oh, CSS, it's easy, or something like that. But no, once you start writing enough of it, you need an expert to really lay things out on how it goes. Other things, performance animations, there's all these little kind of like tree branches of front end development that you could really just focus in and be the expert on that one thing.

28
00:24:16,469 --> 00:25:20,820
Scott Tolinski: Yeah. And then again, if you're the expert, you're going to get paid to do some really interesting jobs, you hear about people that get hired to come in and evaluate a CSS on a large application, and then go in and end up removing, you know, 10s of thousands of lines of code just because they're looking at it from a expert perspective. And we're able to see patterns and stuff that will maybe they're the team wasn't because they didn't have the people who had those, those those hardcore CSS skills, right. So again, that's all big stuff. But imagine you're also the animations person, right? Maybe you you go in there and you know how to get 60 FPS animations, you know, inside and out. And next time anyone has a big animation stuff, that's a that's a whole thing in itself. And especially because the will the animations in the web in general are just growing constantly the the amount you can do on the web for for that sort of regard with with normal HTML, JavaScript, stuff like that. And there's a whole other worlds of things like Web GL and canvas and writing games. In the web tech, I mean, there's just so many things, their

29
00:25:20,850 --> 00:25:57,390
Wes Bos: back end as well, we'll go through this real quick web servers, you might be really good at scaling servers, or I think now it's more the people that know how to manage serverless functions, manage boxes on AWS, were you able to scale up those types of things, different frameworks on the back end, you might be really good at Express for one of the other node frameworks, performance databases, Docker, continuous integration, there's so many different areas on this. And like we said earlier, if you are a specific expert on one or two of these areas, you you better bet you're going to be the person that that you call to come on over.

30
00:25:57,510 --> 00:26:21,660
Scott Tolinski: Yeah. And I think part of that, too, is probably making yourself known as the expert of that, like if you are an expert in so and so I would not be afraid to toot your own horn in that regard. And say like, I'm the expert in this rather than I'm a web developer, right, I make this happen. I make 60 FPS animations. Well, you know, while I'm in my sleep, sort of thing, you want to be able to pump your tires a little bit like that.

31
00:26:21,780 --> 00:26:49,620
Wes Bos: So yeah, I was always afraid of doing that. When I was in WordPress, I was like, oh, if I say I'm really good at WordPress, I mean, people are not gonna they're think I'm garbage, everything else. And I think that's important thing is that being an expert at one thing just shows that you're willing to like, hold the torch of that technology. And it means that you're probably really good at it. And you likely are also good at other things. And don't think people are gonna think like, oh, it must be garbage at doing something else.

32
00:26:49,650 --> 00:27:52,770
Scott Tolinski: Yeah, absolutely. So let's talk a little bit about it. Like you had like a camera, you have your focus, right, when you should narrow and widen your focus, like when should you widen the these things to learn more things? And when should you narrow it to learn less things? When are you too crazy so so you want to widen your focus when you are complacent in your mastery, when you feel like you've learned everything in this like bug for learning is sort of going away. And you're not necessarily as excited about the WordPress stuff anymore, because you just you know it inside and out front and back. There's almost how much more WordPress stuff can you do? Right. So at that point, you might be thinking, Okay, it might be a good opportunity to learn a skill, that's going to make me a better WordPress developer, or a better developer in that realm. But not directly necessarily related to WordPress itself. Maybe you're going to learn about server management or something to get your site's performance better. Or maybe you're going to learn about database administration, so that you can do better migrations or things like that.

33
00:27:53,009 --> 00:29:27,750
Wes Bos: You think anytime that you need to get something done is probably the best time to widen your focus and pick something new up, you got to pick the best tool for the job. So whenever you run into a specific problem, you take a step back and say, What would be the best tool to actually solve this problem? Instead of saying these are the skill sets that I currently have? How can I like mash my skills into making this actually work? So I've talked to lots of people who have conferences who say, yeah, our stack is c++ or stack is Ruby, our sack is Python. But we have this specific part of our application that does X, Y, and Z. And node is really good at that. So I talked to someone who ran a company that does captions. And they said node is really good at streaming in this video node is perfect for streams. So when we had to build out this part of our application, we we switch to node for that, or we're doing a whole bunch of machine learning on generating titles for ads. There's this app I've been using called let go. And you take a picture of something you're selling, and it will try to like machine learn from the image what it is. And I always thought that's really cool. I was like, maybe they're like database and back end. And an API is built in Node. But I bet that the machine learning part that looks at an image and figures out what it's in I bet that's built in like Python or something gnarly like that. And that's really good for being able to, I don't really know anything about that. But Python. Doesn't Python sound gnarly,

34
00:29:28,050 --> 00:29:31,200
Scott Tolinski: it's gnarly name because it's a snake. I mean, that's pretty sweet.

35
00:29:31,290 --> 00:29:35,010
Wes Bos: Yeah, I'm gonna do it in Barracuda next time. Oh, yeah, I

36
00:29:35,010 --> 00:30:39,390
Scott Tolinski: need a barracuda language. I mean, another good opportunity to widen your focus is for fun, right? Maybe you just want to get a little bit different perspective on things. For instance, you know, I was bored at my job, and I had completed all of my work. That was the hardest part for me of working at an agency that was in the university was that they'd be I'd be like, Alright, the site's done. They're like, well, this isn't due for like, eight more months, and I'd be like, Okay, great, I guess Just not doing anything for eight months, then like, give me something else to work on. Because they were just so slow, they were so incredibly slow, right? So in that time, I needed something fun to do that was sort of productive. So I picked up Angular, which led to actually a career dirt, not a career change, but a Job Change eventually. But I, you know, at that point in time, I was doing WordPress sites day in, day out, and the whole front end framework thing was still a little mysterious to me. I picked up that new skill, which was front end JavaScript frameworks. And then, I mean, I didn't pick it up because I had to, I picked it up just just for fun just to play around with and I loved working in that sort of environment. So that's ended up where it shifted the general course of my career from that.

37
00:30:39,750 --> 00:30:46,500
Wes Bos: Alright, let's talk a little bit more about the opposite, which is, do you have a camera methodology here of narrowing your focus?

38
00:30:46,530 --> 00:30:48,150
Scott Tolinski: Will you just narrow the focus? Yeah.

39
00:30:49,740 --> 00:30:50,250
Wes Bos: Okay.

40
00:30:51,750 --> 00:30:52,920
Scott Tolinski: That's the camera metaphor. Yeah.

41
00:30:52,920 --> 00:31:47,670
Wes Bos: I was setting you up for an amazing metaphor. Oh, yeah. There was one scenario. Guys, I'm better than that. Anyways, when should you narrow your focus, I think when you when you don't feel control over your skill, so I see this a lot, specifically in beginners, but also in existing developers who have maybe been a little bit complacent for a couple years, and you sort of look up and go, Whoa, everything is moving, everything is changing. If yes, sex and react and graph QL. And, like, it seems like almost every single tech people are using is has changed in the last two years. And if you're sort of feeling that way, it's I think it's best to folk pick one thing and focus down on it, because there's absolutely no way that you're going to be able to, to get good at all of these things. So just pick one thing, double down on it, build a whole bunch of stuff in on it. And and I think you'll start to feel a lot better.

42
00:31:47,880 --> 00:32:29,760
Scott Tolinski: Yeah. And then also might be because like, maybe you have applied and you've gone into several different interviews, and these interviews are for react, and you come in there been like, Yeah, I know, react. I know, Angular, I know, view. And they're like, Okay, well explained to me this about react, and you're like, huh, yeah, that so and then maybe you're missing out on these opportunities, because there's very specific knowledge you're missing out on and, and that's a good indicator that you become too general in these things. So you really want to then narrow down into maybe just react or whatever you're interested in, pick one, become a master at it, and then go back into that job interview and see how well that goes for you, it's gonna be totally different.

43
00:32:30,180 --> 00:33:09,210
Wes Bos: I think another great way is if you want to narrow your focus is if you want to become one of these people, if you want to go maybe the consulting or freelance route, where you want to be the high dollar consultant for someone who is good at this one thing. And if you think you can, sort of take react performance and run with it, if you think you can take be the accessibility person who does these amazing reviews, if you can, you can be the CSS code base person, then I think you should take that and run with it. Because if you like the idea of just having a very small, narrow focus and going deep on that one topic, it's absolutely a good spot to be in.

44
00:33:09,300 --> 00:34:14,900
Scott Tolinski: Yeah. And lastly, I had the same one for when to widen your focus. But for fun, like, if you want to, if you find again, CSS animations, or web animations, or any of that, in particular, if you find that particularly interesting or exciting, dive into it, go further, go deeper, enhance, enhance those skills. And like really, really nail those down. Because it's not going to get less fun, the better you get at it, it's most likely going to be more fun, though, the better you get at it. So again, if you if you get enjoyment from one thing in particular, feel free to run with that. Wes just wrote in our notes here, you know what else is fun? He's setting me up here for an add transition. But I think we should be more or less talking about like when you should get some new and fresh skills, and that you don't want to necessarily have to rely on his bookkeeping skills and accounting skills. It's better that you get a software that does it for you, or not necessarily for you, but helps you do it in a better way. That leads us to our sponsor this week, which is Freshbooks.

45
00:34:15,230 --> 00:35:40,860
Wes Bos: Yes. Freshbooks is the small business accounting software that makes billing painless. So Scott and I both send lots and lots of invoices to various customers specifically, there's tons of invoices, I send them for the sponsorship, I send Freshbooks a sponsor invoice for sponsoring this podcast, which I think is pretty funny that I send it on Friday. Thank goodness, I you. Thank goodness I use fresh books otherwise that would be awkward. I wonder if they ever decline invoices from from other things. But anyways, if you want to send a whole bunch of invoices out if you want to send quotes out if you want to manage all of your clients see where your money is. One of the things I use it the most is figuring out who hasn't paid us yet. So every week or two Go in. And then I'll say like, who hasn't paid us yet. And we'll either use the Freshbooks service, which will automatically remind them that they haven't paid. Or you can send a little follow up email, say, hey, just to let you know, I see that you've seen the invoice because that's another tricky thing. Freshbooks does, it tracks if you're if your clients have seen the invoice, and then it will, you can send them a little reminder saying, hey, make sure you pay this thing. It also does expenses, all of your taxes at the end of the year, you can get a good idea of where your business at at any time from their software. So check it out@freshbooks.com forward slash syntax and use syntax in the How did you hear about us, you're gonna get a 30 day unrestricted free trial. Thanks so much to Freshbooks for sponsoring. Nice, cool. So

46
00:35:40,860 --> 00:37:27,110
Scott Tolinski: I think we've already touched on this a little bit, but I think it's worth elaborating on. And this sort of this sort of mastering something and then expanding upon that. And I like to, like reference this as sort of like satellite skills, right, these sort of skills that are, are sort of circling around the skill you're learning, for instance, you're really good at CSS, well, maybe it's time that you if you would like to grow your CSS abilities, you would take on things like CSS preprocessors, and get really good at those or take on things like design system and understanding how you can improve your CSS and via design systems, or how you can just have a greater handle on the system overall, with your CSS by learning about different strategies for these design systems. Or maybe again, you want to be so good at CSS. And part of that is CSS animations and transitions, you're you're adding on these skills that are are related and are very similar to CSS overall, in general, and might even be in the CSS language, but they're going to just build up your further ability further your abilities in that regard. Another one could be like, if you if you are really good at WordPress and would like to remain a WordPress Master, you'll know that Gutenberg and some things in WordPress are going react. So maybe you want to pick up react now and get good at react. And maybe you want to get better at writing WordPress plugins. So you pick up PHP and you start getting heavy into PHP, or maybe even his basic database, administer it. Or maybe it is server management. And you want to figure out how to tune your server so that it runs your WordPress sites to the best of it. Again, all of these satellite skills are going to work together in harmony I have written here, too, to make you a better developer in that regard.

47
00:37:27,270 --> 00:38:40,920
Wes Bos: Exactly. This is how I approach all of my things. Like I don't even know if I'm a specialist or a generalist, but I do know that this is how I tackle learning things, I will take on it technology, I will master it, I will get pretty good at it. And then I'll sort of look up and then figure out what do I need next. And then you learn another thing. And then you look up and you learn another thing. And before you know it after five years, your breadth of skill is very vast and very large. And you you all sudden feel comfortable at many different technologies rather than looking at someone like me or someone like Scott and saying, Okay, well, I need to learn graph qL, but also also MongoDB. But also express but then I heard expressed is not good. And then I heard this thing and then you're like just get overwhelmed with all of the possible options that you could take, when really you should just focus in on one. And that's even with react is you should not learn react and Redux at the same time. We've talked about this many times over, you should just learn react, and then look a little bit bigger than learn some routing, and then go a little bit bigger and learn about state management and then go a little bit bigger and figure out how do I hook this up to a back end and then go a little bit bigger and say, How do I write my own database? resolvers? And you get the point, right? Yeah,

48
00:38:40,940 --> 00:42:10,980
Scott Tolinski: yeah, absolutely. So I again, I think this is just sort of, I mean, I love the little heading you had your master and expand that that's what you want to do you want to focus in, you want to expand, you want to go from there. So I figured I would talk a little bit about, you know, my my personal journey as like a full stack specialist or a developer in general, because I personally struggled with this topic a lot. And you know, I don't know, back in one of our first episodes when we did our origin stories, I talked a little bit about this, but I was trying to do everything right. I had huge issues with narrowing my focus in general this is before I even decided that I wanted to be a web developer, I was trying, I think my my website said that I was an audio engineer, a graphic designer, a videographer, a motion graphics artist in a web dev altogether, I wound up with all of those hot skills, I wound up being an accountant for a record label. So that's that's where getting a generalist gets you because, you know, nobody wants to hire the guy that does all that stuff. Because, you know, I'm not I wasn't good at anything in particular. I just wanted to do all that stuff. So, Courtney, my wife was basically like, Listen, like what do you want to do? Because you're not doing anything. You're doing too many things. You're you're being an accountant. Obviously, you don't want to be an accountant. So like, what do you really want to do and I looked through all my skills and I did a little bit of an audit to say like, what are the things that satisfied me the most. And in general, it's the problem solving aspect of web development. So I said, Okay, I'm going to take this, and I'm going to go with it. And I focused 100% on web development, not necessarily realizing that it's a gigantic topic. But I just focused on little things like building sites for clients in WordPress, right. So I picked that one little thing, and whether is WordPress, or Drupal or anything like that, I just started focusing on those skills in particular, without knowing it and really like buckled down on foundational HTML and CSS stuff, right, the the foundations of the time of good front end code, were essentially being able to do just solid HTML and CSS and a little bit of jQuery here and there, right. So for me, I was always starting with a little bit of a narrow focus and not necessarily realizing it. And then as you grow, maybe you expand a little too much and expand a little too much. And you need to focus down, I always found it was really helpful to really focus down on whatever I was doing at any of my particular employer. So my first employer hired me because I was a good junior developer level, like I could do HTML, CSS skills really strong, but I hadn't done a whole lot of back end or Drupal there any of that stuff. But at this location, that's pretty much all they did was Drupal. And what they soon found out is that if I would apply myself specifically to Drupal, I would get really good at Drupal really quickly. So I would apply myself 100% to that thing, because that's what we were doing all day at work. My next agency job was all WordPress. So I applied myself hardcore to WordPress, and became really good at WordPress. My next job was with Angular, I applied myself 100% do Angular. And then now I have a node back end and a react front end. And that's all I really focus on. Right, I'm not going off and learning Ruby right now. Because why bother, I'm getting better at JavaScript, I'm getting better react, I'm getting better at all of the stuff I need to. But it's narrowly focused within a group of skills that I need to have right now. So I started out very, very extreme on the one of the generalist side and found out that didn't work and narrowed it down to the point where I know what I'm working on and know what I need to be working on.

49
00:42:11,400 --> 00:43:04,170
Wes Bos: I just thought I wrote a couple notes here cuz that that made me think about like, generalizing sort of like you did, we'll help you figure out really quickly what it is that you don't like. So I think like, if you are just starting out in your career, trying a whole bunch of stuff and sort of generalizing in it is maybe a good idea. Because really quickly, it will show you what you do and do not like like when I first started, like I when I went to university, I went to school for technology, right? And that could have been hardware technology software, that could have been like, technology management, right? Those were kind of the three areas that a lot of people went to focus in on. And then I had a bunch of CO ops in that. And I realized that like I didn't like I realized that I did like software. But I didn't like this specific type of software. I was working in ASP running a whole bunch of day I would write all these DB report, what is the Microsoft database thing called?

50
00:43:04,350 --> 00:43:07,460
Scott Tolinski: No SQL Server, no. SQL

51
00:43:07,460 --> 00:43:18,980
Wes Bos: Server, whatever the Microsoft, my school thing was, I was writing that and I realized, like, I didn't like that. And then I did a, I was writing I think c plus plus c something C sharp.

52
00:43:19,020 --> 00:43:22,440
Scott Tolinski: Yeah, I sort of worked out a lesson I hated it. Yeah.

53
00:43:22,610 --> 00:44:49,200
Wes Bos: Yeah, I was worried. I think I think I hated it, because I didn't really know. And then have a proper introduction to programming. But I was writing like, this is funny. I was writing like, visualizations, and were the tanks, I used to work at an island gas company, and the tanks would fill with gas. And then you'd have to write like a visualization, the issue is show you how full the tanks of gas are. And then, and then do something if the tanks are too high, which is kind of interesting. And I realized I didn't like that either. I didn't like the sort of the culture and I liked working for myself, much better. So then then I was like, always doing web development on the side. So I realized, okay, I definitely like software. And I definitely like doing stuff for the web, because that's where my, where I really like to focus on. And then once you get into to that I was like doing WordPress, but I was also doing Drupal. And I was also doing Joomla, all at the same time. And I realized, like, this isn't too long. No, there's still a conference for Joomla, which is really crazy. So it still has like a, a fan base of people using it. So I figured I'm just gonna focus in on WordPress. And then once I had mastered that, I said, I looked around and said, well, it'd be also really nice if I was really good at JavaScript, because I'm starting to write a lot more JavaScript on the front end. So I focus on that. And then that led me to doing Angular. And that led me to switching over to react. So that whole like, Master, and then look around and say, what's next, I think is, is the way that my entire career path has gone.

54
00:44:49,440 --> 00:45:26,130
Scott Tolinski: Yeah. Well, I think that that segues really nicely into the next section, which is titled What should I focus on because we both talked about like our little journeys that we learned, like how we learned what we wanted to Focus on. And I think this is like a really interesting part of this. This episode here is like, what is this? How did you figure out this stuff? And obviously, we both sort of did it through a little bit of trial and error. And I think that's like really what it needs to happen. But like, what are some ways you can think about it smartly, that you can pick things to focus on? specifically? If it's not just so I want to waste a bunch of time trying these things? or trying to figure this out?

55
00:45:26,190 --> 00:47:11,220
Wes Bos: Yeah, I always hate answering these questions to people, what should I focus on? Because they're sort of putting their entire career in your hands? Right? And and you sort of have to be like, well, little bird, let me push you out of the nest. And you will find your way, right, like any any advanced developer, anyone in their career, can look back at their career and be like, how did I get here? Well, it was just a lot of stumbling around for many years. And I sort of figured it out. And that's why how I got myself here, and, and people who are new to it, say, like, tell me Just tell me exactly what to learn, and exactly what to do. So these tips now, I think are going to be as close as we're ever going to get to telling you exactly what you should do. So first tip, necessity will dictate a lot. What do you need to know right now? So what is it that you're building, if you have a job and are building a specific type of thing in your job, or you're starting to see, oh, we're starting to take on projects that are very heavy in specifically in something not react with help on that's probably something that's probably a time where you should learn a little bit of react. Another tip I have is job postings are a great way to figure out how you can stack the deck in your favor. So people are always going to tell you like should I learn react, or Angular or Ember? And the answer to that is, it doesn't matter. But what you want to hear is that learn react right now, because that's what everybody's asking for six months from now, it might not be. But if you want to stack the deck in your favor and just get a job, that's a great way to just sort of like keyword clickbait stuff, your, your application where you have it. And then once you're in, you can learn anything you want. And you'll be able to transfer those skills from one to another. That's we've talked about that many times. But stacking the deck in your favor is definitely a way to go.

56
00:47:11,340 --> 00:49:38,460
Scott Tolinski: Yeah, I mean, looking at job postings, and knowing what's in demand is such a huge thing. And we just answered the state of the JavaScript survey that comes around every year by Sasha grief. And I love that survey. Because again, it lets you know where the industry trends are headed. And a lot of that stuff ends up being what's hot, and what's looking to be hired. And if you're on top of those skills, you're going to be ready and waiting to be hired. Right? If you were if you put all your chips into backbone right now, not to say you won't be able to get a job writing backbone, because I'm sure there's a lot of apps still using backbone, right or Marionette are one of those. But like, it might not be the the smoothest way to find a job because maybe there's not the most backbone postings that there's ever been before. Again, a lot, the ways that we sort of did it is we just sort of, we did a little bit of all of this stuff. We did it based on what we needed to do at the time. But we also followed our heart a little bit, which has some caveats here. Because I have a funny story about this that actually relates pretty well for SB oh four or spring break, oh four was like my senior year spring break. And we were just me and the members of my band, we were just going to drive to the Outer Banks. And I think it's in South Carolina or North Carolina, I'm sorry, Carolina ins who live in the Outer Banks, I got that round. But we just started driving. And we were maybe like halfway, we were maybe in like, halfway there sort of across the United States. And this is before cell phones that had GPS, or even, we didn't have a GPS unit. And one of the members of our band asks the driver, hey, what's the ETA? Or what do we do next? Or where are we going next? Or what's the route look like? And he goes, Oh, I don't know. I thought you knew. He's like I told you to print out the map. And then you said, I'm just going to follow my heart. And we all thought he was just joking when he said he was going to follow his heart. And sure enough, we were we didn't have a map. We didn't we had to go we had to stop into like a gas station and get a map. I mean, it was like that era of time, because we didn't have any of this stuff. We just assumed he was joking this whole follow your heart thing. So you want to follow your heart, but you want to follow your heart with some bit of direction, whether or not that is these job postings or whatever. Again, if you see all these job postings for a database administrator, and you're like not interested in that, then don't, don't do it just to you know, shove a square peg into a round hole sort of situation. Again, just you know, you want to follow your heart but you want to follow it with a little bit of a map.

